
UTR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  00000f5a  00000fee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  008001ac  008001ac  0000109a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000109a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000065cc  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d47  00000000  00000000  000079e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003478  00000000  00000000  00009727  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000094c  00000000  00000000  0000cba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000027ef  00000000  00000000  0000d4ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e04  00000000  00000000  0000fcdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000638  00000000  00000000  00013adf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7d c0       	rjmp	.+250    	; 0xfc <__ctors_end>
   2:	00 00       	nop
   4:	96 c0       	rjmp	.+300    	; 0x132 <__bad_interrupt>
   6:	00 00       	nop
   8:	94 c0       	rjmp	.+296    	; 0x132 <__bad_interrupt>
   a:	00 00       	nop
   c:	92 c0       	rjmp	.+292    	; 0x132 <__bad_interrupt>
   e:	00 00       	nop
  10:	90 c0       	rjmp	.+288    	; 0x132 <__bad_interrupt>
  12:	00 00       	nop
  14:	8e c0       	rjmp	.+284    	; 0x132 <__bad_interrupt>
  16:	00 00       	nop
  18:	8c c0       	rjmp	.+280    	; 0x132 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8a c0       	rjmp	.+276    	; 0x132 <__bad_interrupt>
  1e:	00 00       	nop
  20:	88 c0       	rjmp	.+272    	; 0x132 <__bad_interrupt>
  22:	00 00       	nop
  24:	86 c0       	rjmp	.+268    	; 0x132 <__bad_interrupt>
  26:	00 00       	nop
  28:	84 c0       	rjmp	.+264    	; 0x132 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	88 c3       	rjmp	.+1808   	; 0x73e <__vector_11>
  2e:	00 00       	nop
  30:	2f c4       	rjmp	.+2142   	; 0x890 <__vector_12>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__bad_interrupt>
  36:	00 00       	nop
  38:	7c c0       	rjmp	.+248    	; 0x132 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7a c0       	rjmp	.+244    	; 0x132 <__bad_interrupt>
  3e:	00 00       	nop
  40:	78 c0       	rjmp	.+240    	; 0x132 <__bad_interrupt>
  42:	00 00       	nop
  44:	76 c0       	rjmp	.+236    	; 0x132 <__bad_interrupt>
  46:	00 00       	nop
  48:	74 c0       	rjmp	.+232    	; 0x132 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	72 c0       	rjmp	.+228    	; 0x132 <__bad_interrupt>
  4e:	00 00       	nop
  50:	70 c0       	rjmp	.+224    	; 0x132 <__bad_interrupt>
  52:	00 00       	nop
  54:	db c0       	rjmp	.+438    	; 0x20c <__vector_21>
  56:	00 00       	nop
  58:	6c c0       	rjmp	.+216    	; 0x132 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6a c0       	rjmp	.+212    	; 0x132 <__bad_interrupt>
  5e:	00 00       	nop
  60:	68 c0       	rjmp	.+208    	; 0x132 <__bad_interrupt>
  62:	00 00       	nop
  64:	66 c0       	rjmp	.+204    	; 0x132 <__bad_interrupt>
  66:	00 00       	nop
  68:	64 c0       	rjmp	.+200    	; 0x132 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	62 c0       	rjmp	.+196    	; 0x132 <__bad_interrupt>
  6e:	00 00       	nop
  70:	60 c0       	rjmp	.+192    	; 0x132 <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	18 03 55 00 54 00 20 00 52 00 4f 00 43 00 4b 00     ..U.T. .R.O.C.K.
  84:	45 00 54 00 52 00 59 00 00 00                       E.T.R.Y...

0000008e <ManufacturerString>:
  8e:	18 03 55 00 54 00 20 00 52 00 4f 00 43 00 4b 00     ..U.T. .R.O.C.K.
  9e:	45 00 54 00 52 00 59 00 00 00                       E.T.R.Y...

000000a8 <LanguageString>:
  a8:	04 03 09 04                                         ....

000000ac <ConfigurationDescriptor>:
  ac:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  bc:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
  cc:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
  dc:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000ea <DeviceDescriptor>:
  ea:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
  fa:	dc 01                                               ..

000000fc <__ctors_end>:
  fc:	11 24       	eor	r1, r1
  fe:	1f be       	out	0x3f, r1	; 63
 100:	cf ef       	ldi	r28, 0xFF	; 255
 102:	d4 e0       	ldi	r29, 0x04	; 4
 104:	de bf       	out	0x3e, r29	; 62
 106:	cd bf       	out	0x3d, r28	; 61

00000108 <__do_copy_data>:
 108:	11 e0       	ldi	r17, 0x01	; 1
 10a:	a0 e0       	ldi	r26, 0x00	; 0
 10c:	b1 e0       	ldi	r27, 0x01	; 1
 10e:	ea e5       	ldi	r30, 0x5A	; 90
 110:	ff e0       	ldi	r31, 0x0F	; 15
 112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x10>
 114:	05 90       	lpm	r0, Z+
 116:	0d 92       	st	X+, r0
 118:	ac 3a       	cpi	r26, 0xAC	; 172
 11a:	b1 07       	cpc	r27, r17
 11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0xc>

0000011e <__do_clear_bss>:
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	ac ea       	ldi	r26, 0xAC	; 172
 122:	b1 e0       	ldi	r27, 0x01	; 1
 124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
 126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
 128:	a8 3c       	cpi	r26, 0xC8	; 200
 12a:	b2 07       	cpc	r27, r18
 12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>
 12e:	9e d0       	rcall	.+316    	; 0x26c <main>
 130:	12 c7       	rjmp	.+3620   	; 0xf56 <_exit>

00000132 <__bad_interrupt>:
 132:	66 cf       	rjmp	.-308    	; 0x0 <__vectors>

00000134 <SetupHardware>:
	int rssisig = SPI_RW_8(AX_REG_RSSI,0);
	return(rssisig);
}
void restartRadio() {
	//SPI_RW_8(AX_REG_PWRMODE,AX_REG_PWR);
}
 134:	84 b7       	in	r24, 0x34	; 52
 136:	87 7f       	andi	r24, 0xF7	; 247
 138:	84 bf       	out	0x34, r24	; 52
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	a8 95       	wdr
 140:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 144:	88 61       	ori	r24, 0x18	; 24
 146:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 14a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 14e:	0f be       	out	0x3f, r0	; 63
 150:	80 e8       	ldi	r24, 0x80	; 128
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 15c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 160:	0f be       	out	0x3f, r0	; 63
 162:	de c2       	rjmp	.+1468   	; 0x720 <USB_Init>

00000164 <EVENT_USB_Device_Connect>:
 164:	58 9a       	sbi	0x0b, 0	; 11
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	80 e7       	ldi	r24, 0x70	; 112
 16a:	92 e0       	ldi	r25, 0x02	; 2
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <EVENT_USB_Device_Connect+0x8>
 174:	00 c0       	rjmp	.+0      	; 0x176 <EVENT_USB_Device_Connect+0x12>
 176:	00 00       	nop
 178:	58 98       	cbi	0x0b, 0	; 11
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	80 e7       	ldi	r24, 0x70	; 112
 17e:	92 e0       	ldi	r25, 0x02	; 2
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <EVENT_USB_Device_Connect+0x1c>
 188:	00 c0       	rjmp	.+0      	; 0x18a <EVENT_USB_Device_Connect+0x26>
 18a:	00 00       	nop
 18c:	08 95       	ret

0000018e <EVENT_USB_Device_Disconnect>:
 18e:	ea cf       	rjmp	.-44     	; 0x164 <EVENT_USB_Device_Connect>

00000190 <EVENT_USB_Device_ConfigurationChanged>:
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	2f c5       	rjmp	.+2654   	; 0xbf4 <CDC_Device_ConfigureEndpoints>

00000196 <EVENT_USB_Device_ControlRequest>:
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	32 c6       	rjmp	.+3172   	; 0xe00 <CDC_Device_ProcessControlRequest>

0000019c <EVENT_CDC_Device_ControLineStateChanged>:
 19c:	08 95       	ret

0000019e <sendSerial>:
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	1f 92       	push	r1
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
 1a8:	89 83       	std	Y+1, r24	; 0x01
 1aa:	be 01       	movw	r22, r28
 1ac:	6f 5f       	subi	r22, 0xFF	; 255
 1ae:	7f 4f       	sbci	r23, 0xFF	; 255
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	44 d5       	rcall	.+2696   	; 0xc3e <CDC_Device_SendString>
 1b6:	0f 90       	pop	r0
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <SPI_MasterInit>:
 1be:	84 b1       	in	r24, 0x04	; 4
 1c0:	87 60       	ori	r24, 0x07	; 7
 1c2:	84 b9       	out	0x04, r24	; 4
 1c4:	8c b5       	in	r24, 0x2c	; 44
 1c6:	81 65       	ori	r24, 0x51	; 81
 1c8:	8c bd       	out	0x2c, r24	; 44
 1ca:	08 95       	ret

000001cc <SPI_RW_8>:
 1cc:	28 98       	cbi	0x05, 0	; 5
 1ce:	8e bd       	out	0x2e, r24	; 46
 1d0:	0d b4       	in	r0, 0x2d	; 45
 1d2:	07 fe       	sbrs	r0, 7
 1d4:	fd cf       	rjmp	.-6      	; 0x1d0 <SPI_RW_8+0x4>
 1d6:	6e bd       	out	0x2e, r22	; 46
 1d8:	0d b4       	in	r0, 0x2d	; 45
 1da:	07 fe       	sbrs	r0, 7
 1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <SPI_RW_8+0xc>
 1de:	28 9a       	sbi	0x05, 0	; 5
 1e0:	8e b5       	in	r24, 0x2e	; 46
 1e2:	08 95       	ret

000001e4 <initRaido>:
 1e4:	67 e0       	ldi	r22, 0x07	; 7
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	f1 df       	rcall	.-30     	; 0x1cc <SPI_RW_8>
 1ea:	2f e7       	ldi	r18, 0x7F	; 127
 1ec:	88 e3       	ldi	r24, 0x38	; 56
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <initRaido+0xc>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <initRaido+0x16>
 1fa:	00 00       	nop
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	8c e1       	ldi	r24, 0x1C	; 28
 200:	e5 df       	rcall	.-54     	; 0x1cc <SPI_RW_8>
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	81 11       	cpse	r24, r1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	89 2f       	mov	r24, r25
 20a:	08 95       	ret

0000020c <__vector_21>:
ISR(TIMER0_OVF_vect) { //moved from main loop to timer .1 second / (8Mhz / 1024 prescale) = 12.8
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
					   /*HANDLE USB COMMUNICATIONS*/
	cli();
 22e:	f8 94       	cli
	USBint++;
 230:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <__data_end>
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__data_end>
	//if (USBint > 3){
	//USBint = 0;
	CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	97 d5       	rcall	.+2862   	; 0xd6e <CDC_Device_ReceiveByte>
	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	91 e0       	ldi	r25, 0x01	; 1
	USB_USBTask();
 244:	7e d5       	rcall	.+2812   	; 0xd42 <CDC_Device_USBTask>
 246:	bb d4       	rcall	.+2422   	; 0xbbe <USB_USBTask>
	sei();
 248:	78 94       	sei
}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <main>:


int main(void){
	//INIT CODE 
	TCCR0B |= ((1 << CS02) | (1 << CS00)); //Table 15-9 clk/1024 prescale
 26c:	85 b5       	in	r24, 0x25	; 37
 26e:	85 60       	ori	r24, 0x05	; 5
 270:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0); //timer 0 overflow interrupt enable
 272:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
 276:	81 60       	ori	r24, 0x01	; 1
 278:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
	DDRB |= (1 << PB0); //set PB0 output
 27c:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= (1 << DDD0); //set PD0 output
 27e:	50 9a       	sbi	0x0a, 0	; 10
	PORTB |= (1 << PB0); //SS high
 280:	28 9a       	sbi	0x05, 0	; 5
	sei(); // Set interputs 
 282:	78 94       	sei
	SetupHardware(); //USB init 
 284:	57 df       	rcall	.-338    	; 0x134 <SetupHardware>
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream); //Init USB stream
 286:	6d ea       	ldi	r22, 0xAD	; 173
 288:	71 e0       	ldi	r23, 0x01	; 1
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	a4 d5       	rcall	.+2888   	; 0xdd8 <CDC_Device_CreateStream>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 290:	78 94       	sei
	GlobalInterruptEnable();
	SPI_MasterInit(); // Turns AVR device into SPI Master
 292:	95 df       	rcall	.-214    	; 0x1be <SPI_MasterInit>
 294:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	89 e6       	ldi	r24, 0x69	; 105
 298:	98 e1       	ldi	r25, 0x18	; 24
 29a:	21 50       	subi	r18, 0x01	; 1
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x2e>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x38>
 2a4:	00 00       	nop
	//initRaido(0);//NEEDS freq 
	//END OF INIT CODE

	_delay_ms(1000);
	sendSerial(initRaido(0));
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	9d df       	rcall	.-198    	; 0x1e4 <initRaido>
 2aa:	79 df       	rcall	.-270    	; 0x19e <sendSerial>
	while(true){
		char rec = SPI_RW_8(0x028, 0b00000000);
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	88 e2       	ldi	r24, 0x28	; 40
 2b0:	8d df       	rcall	.-230    	; 0x1cc <SPI_RW_8>
 2b2:	75 df       	rcall	.-278    	; 0x19e <sendSerial>
		/*if(!(rec & 0b00000001)){
			fifo_dat=SPI_RW_8(0x029,0b00000000); 
			CDC_Device_SendString(&VirtualSerial_CDC_Interface, fifo_dat);
			_delay_ms(1000);
			}*/
		sendSerial(rec);
 2b4:	2f ef       	ldi	r18, 0xFF	; 255
 2b6:	89 e6       	ldi	r24, 0x69	; 105
 2b8:	98 e1       	ldi	r25, 0x18	; 24
 2ba:	21 50       	subi	r18, 0x01	; 1
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	90 40       	sbci	r25, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <main+0x4e>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0x58>
 2c4:	00 00       	nop
 2c6:	f2 cf       	rjmp	.-28     	; 0x2ac <main+0x40>

000002c8 <CALLBACK_USB_GetDescriptor>:
 2c8:	29 2f       	mov	r18, r25
 2ca:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 2cc:	22 30       	cpi	r18, 0x02	; 2
 2ce:	31 05       	cpc	r19, r1
 2d0:	71 f0       	breq	.+28     	; 0x2ee <CALLBACK_USB_GetDescriptor+0x26>
 2d2:	23 30       	cpi	r18, 0x03	; 3
 2d4:	31 05       	cpc	r19, r1
 2d6:	81 f0       	breq	.+32     	; 0x2f8 <CALLBACK_USB_GetDescriptor+0x30>
 2d8:	21 30       	cpi	r18, 0x01	; 1
 2da:	31 05       	cpc	r19, r1
 2dc:	a1 f4       	brne	.+40     	; 0x306 <CALLBACK_USB_GetDescriptor+0x3e>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 2de:	82 e1       	ldi	r24, 0x12	; 18
 2e0:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
 2e2:	2a ee       	ldi	r18, 0xEA	; 234
 2e4:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 2e6:	fa 01       	movw	r30, r20
 2e8:	31 83       	std	Z+1, r19	; 0x01
 2ea:	20 83       	st	Z, r18
	return Size;
}
 2ec:	08 95       	ret
			Size    = sizeof(USB_Descriptor_Configuration_t);
 2ee:	8e e3       	ldi	r24, 0x3E	; 62
 2f0:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
 2f2:	2c ea       	ldi	r18, 0xAC	; 172
 2f4:	30 e0       	ldi	r19, 0x00	; 0
			break;
 2f6:	f7 cf       	rjmp	.-18     	; 0x2e6 <CALLBACK_USB_GetDescriptor+0x1e>
			switch (DescriptorNumber)
 2f8:	99 27       	eor	r25, r25
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	91 05       	cpc	r25, r1
 2fe:	71 f0       	breq	.+28     	; 0x31c <CALLBACK_USB_GetDescriptor+0x54>
 300:	38 f0       	brcs	.+14     	; 0x310 <CALLBACK_USB_GetDescriptor+0x48>
 302:	02 97       	sbiw	r24, 0x02	; 2
 304:	71 f0       	breq	.+28     	; 0x322 <CALLBACK_USB_GetDescriptor+0x5a>
	uint16_t    Size    = NO_DESCRIPTOR;
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	80 e0       	ldi	r24, 0x00	; 0
	const void* Address = NULL;
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	eb cf       	rjmp	.-42     	; 0x2e6 <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 310:	e8 ea       	ldi	r30, 0xA8	; 168
 312:	f0 e0       	ldi	r31, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
 314:	84 91       	lpm	r24, Z
 316:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
 318:	9f 01       	movw	r18, r30
					break;
 31a:	e5 cf       	rjmp	.-54     	; 0x2e6 <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 31c:	ee e8       	ldi	r30, 0x8E	; 142
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	f9 cf       	rjmp	.-14     	; 0x314 <CALLBACK_USB_GetDescriptor+0x4c>
					Size    = pgm_read_byte(&ProductString.Header.Size);
 322:	e4 e7       	ldi	r30, 0x74	; 116
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	f6 cf       	rjmp	.-20     	; 0x314 <CALLBACK_USB_GetDescriptor+0x4c>

00000328 <Endpoint_Write_Stream_LE>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 328:	af 92       	push	r10
 32a:	bf 92       	push	r11
 32c:	cf 92       	push	r12
 32e:	df 92       	push	r13
 330:	ff 92       	push	r15
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	6c 01       	movw	r12, r24
 33c:	eb 01       	movw	r28, r22
 33e:	8a 01       	movw	r16, r20
 340:	88 d1       	rcall	.+784    	; 0x652 <Endpoint_WaitUntilReady>
 342:	f8 2e       	mov	r15, r24
 344:	81 11       	cpse	r24, r1
 346:	23 c0       	rjmp	.+70     	; 0x38e <Endpoint_Write_Stream_LE+0x66>
 348:	01 15       	cp	r16, r1
 34a:	11 05       	cpc	r17, r1
 34c:	39 f0       	breq	.+14     	; 0x35c <Endpoint_Write_Stream_LE+0x34>
 34e:	f8 01       	movw	r30, r16
 350:	80 81       	ld	r24, Z
 352:	91 81       	ldd	r25, Z+1	; 0x01
 354:	c8 1b       	sub	r28, r24
 356:	d9 0b       	sbc	r29, r25
 358:	c8 0e       	add	r12, r24
 35a:	d9 1e       	adc	r13, r25
 35c:	b1 2c       	mov	r11, r1
 35e:	a1 2c       	mov	r10, r1
 360:	20 97       	sbiw	r28, 0x00	; 0
 362:	a9 f0       	breq	.+42     	; 0x38e <Endpoint_Write_Stream_LE+0x66>
 364:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 368:	85 fd       	sbrc	r24, 5
 36a:	21 c0       	rjmp	.+66     	; 0x3ae <Endpoint_Write_Stream_LE+0x86>
 36c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 370:	8e 77       	andi	r24, 0x7E	; 126
 372:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 376:	01 15       	cp	r16, r1
 378:	11 05       	cpc	r17, r1
 37a:	a1 f0       	breq	.+40     	; 0x3a4 <Endpoint_Write_Stream_LE+0x7c>
 37c:	f8 01       	movw	r30, r16
 37e:	80 81       	ld	r24, Z
 380:	91 81       	ldd	r25, Z+1	; 0x01
 382:	a8 0e       	add	r10, r24
 384:	b9 1e       	adc	r11, r25
 386:	b1 82       	std	Z+1, r11	; 0x01
 388:	a0 82       	st	Z, r10
 38a:	85 e0       	ldi	r24, 0x05	; 5
 38c:	f8 2e       	mov	r15, r24
 38e:	8f 2d       	mov	r24, r15
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	ff 90       	pop	r15
 39a:	df 90       	pop	r13
 39c:	cf 90       	pop	r12
 39e:	bf 90       	pop	r11
 3a0:	af 90       	pop	r10
 3a2:	08 95       	ret
 3a4:	56 d1       	rcall	.+684    	; 0x652 <Endpoint_WaitUntilReady>
 3a6:	88 23       	and	r24, r24
 3a8:	d9 f2       	breq	.-74     	; 0x360 <Endpoint_Write_Stream_LE+0x38>
 3aa:	f8 2e       	mov	r15, r24
 3ac:	f0 cf       	rjmp	.-32     	; 0x38e <Endpoint_Write_Stream_LE+0x66>
 3ae:	f6 01       	movw	r30, r12
 3b0:	81 91       	ld	r24, Z+
 3b2:	6f 01       	movw	r12, r30
 3b4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 3b8:	21 97       	sbiw	r28, 0x01	; 1
 3ba:	ff ef       	ldi	r31, 0xFF	; 255
 3bc:	af 1a       	sub	r10, r31
 3be:	bf 0a       	sbc	r11, r31
 3c0:	cf cf       	rjmp	.-98     	; 0x360 <Endpoint_Write_Stream_LE+0x38>

000003c2 <Endpoint_Write_Control_Stream_LE>:
 3c2:	fc 01       	movw	r30, r24
 3c4:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <USB_ControlRequest+0x6>
 3c8:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <USB_ControlRequest+0x7>
 3cc:	86 17       	cp	r24, r22
 3ce:	97 07       	cpc	r25, r23
 3d0:	a0 f0       	brcs	.+40     	; 0x3fa <Endpoint_Write_Control_Stream_LE+0x38>
 3d2:	61 15       	cp	r22, r1
 3d4:	71 05       	cpc	r23, r1
 3d6:	29 f4       	brne	.+10     	; 0x3e2 <Endpoint_Write_Control_Stream_LE+0x20>
 3d8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 3dc:	9e 77       	andi	r25, 0x7E	; 126
 3de:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	61 15       	cp	r22, r1
 3e6:	71 05       	cpc	r23, r1
 3e8:	51 f4       	brne	.+20     	; 0x3fe <Endpoint_Write_Control_Stream_LE+0x3c>
 3ea:	91 11       	cpse	r25, r1
 3ec:	08 c0       	rjmp	.+16     	; 0x3fe <Endpoint_Write_Control_Stream_LE+0x3c>
 3ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 3f2:	82 ff       	sbrs	r24, 2
 3f4:	32 c0       	rjmp	.+100    	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	08 95       	ret
 3fa:	bc 01       	movw	r22, r24
 3fc:	f2 cf       	rjmp	.-28     	; 0x3e2 <Endpoint_Write_Control_Stream_LE+0x20>
 3fe:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <USB_DeviceState>
 402:	88 23       	and	r24, r24
 404:	b1 f1       	breq	.+108    	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
 406:	85 30       	cpi	r24, 0x05	; 5
 408:	b1 f1       	breq	.+108    	; 0x476 <__FUSE_REGION_LENGTH__+0x76>
 40a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 40e:	83 fd       	sbrc	r24, 3
 410:	2e c0       	rjmp	.+92     	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
 412:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 416:	82 fd       	sbrc	r24, 2
 418:	ea cf       	rjmp	.-44     	; 0x3ee <Endpoint_Write_Control_Stream_LE+0x2c>
 41a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 41e:	80 ff       	sbrs	r24, 0
 420:	e1 cf       	rjmp	.-62     	; 0x3e4 <Endpoint_Write_Control_Stream_LE+0x22>
 422:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	61 15       	cp	r22, r1
 42a:	71 05       	cpc	r23, r1
 42c:	19 f0       	breq	.+6      	; 0x434 <__FUSE_REGION_LENGTH__+0x34>
 42e:	28 30       	cpi	r18, 0x08	; 8
 430:	31 05       	cpc	r19, r1
 432:	58 f0       	brcs	.+22     	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	28 30       	cpi	r18, 0x08	; 8
 438:	31 05       	cpc	r19, r1
 43a:	09 f0       	breq	.+2      	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 442:	2e 77       	andi	r18, 0x7E	; 126
 444:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 448:	cd cf       	rjmp	.-102    	; 0x3e4 <Endpoint_Write_Control_Stream_LE+0x22>
 44a:	81 91       	ld	r24, Z+
 44c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 450:	61 50       	subi	r22, 0x01	; 1
 452:	71 09       	sbc	r23, r1
 454:	2f 5f       	subi	r18, 0xFF	; 255
 456:	3f 4f       	sbci	r19, 0xFF	; 255
 458:	e7 cf       	rjmp	.-50     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
 45a:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <USB_DeviceState>
 45e:	88 23       	and	r24, r24
 460:	41 f0       	breq	.+16     	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
 462:	85 30       	cpi	r24, 0x05	; 5
 464:	41 f0       	breq	.+16     	; 0x476 <__FUSE_REGION_LENGTH__+0x76>
 466:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 46a:	83 ff       	sbrs	r24, 3
 46c:	c0 cf       	rjmp	.-128    	; 0x3ee <Endpoint_Write_Control_Stream_LE+0x2c>
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	08 95       	ret
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	08 95       	ret
 476:	83 e0       	ldi	r24, 0x03	; 3
 478:	08 95       	ret

0000047a <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 47a:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 47c:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <USB_ControlRequest+0x6>
 480:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <USB_ControlRequest+0x7>
 484:	86 17       	cp	r24, r22
 486:	97 07       	cpc	r25, r23
 488:	a0 f0       	brcs	.+40     	; 0x4b2 <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 48a:	61 15       	cp	r22, r1
 48c:	71 05       	cpc	r23, r1
 48e:	29 f4       	brne	.+10     	; 0x49a <Endpoint_Write_Control_PStream_LE+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 490:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 494:	8e 77       	andi	r24, 0x7E	; 126
 496:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 49a:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 49c:	61 15       	cp	r22, r1
 49e:	71 05       	cpc	r23, r1
 4a0:	51 f4       	brne	.+20     	; 0x4b6 <Endpoint_Write_Control_PStream_LE+0x3c>
 4a2:	91 11       	cpse	r25, r1
 4a4:	08 c0       	rjmp	.+16     	; 0x4b6 <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 4aa:	82 ff       	sbrs	r24, 2
 4ac:	33 c0       	rjmp	.+102    	; 0x514 <__stack+0x15>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	08 95       	ret
 4b2:	bc 01       	movw	r22, r24
 4b4:	f2 cf       	rjmp	.-28     	; 0x49a <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 4b6:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 4ba:	88 23       	and	r24, r24
 4bc:	b9 f1       	breq	.+110    	; 0x52c <__stack+0x2d>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 4be:	85 30       	cpi	r24, 0x05	; 5
 4c0:	b9 f1       	breq	.+110    	; 0x530 <__stack+0x31>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 4c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
 4c6:	83 fd       	sbrc	r24, 3
 4c8:	2f c0       	rjmp	.+94     	; 0x528 <__stack+0x29>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsOUTReceived())
 4ce:	82 fd       	sbrc	r24, 2
 4d0:	ea cf       	rjmp	.-44     	; 0x4a6 <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsINReady())
 4d6:	80 ff       	sbrs	r24, 0
 4d8:	e1 cf       	rjmp	.-62     	; 0x49c <Endpoint_Write_Control_PStream_LE+0x22>
					return UEBCLX;
 4da:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 4de:	30 e0       	ldi	r19, 0x00	; 0
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4e0:	61 15       	cp	r22, r1
 4e2:	71 05       	cpc	r23, r1
 4e4:	19 f0       	breq	.+6      	; 0x4ec <Endpoint_Write_Control_PStream_LE+0x72>
 4e6:	28 30       	cpi	r18, 0x08	; 8
 4e8:	31 05       	cpc	r19, r1
 4ea:	58 f0       	brcs	.+22     	; 0x502 <__stack+0x3>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	28 30       	cpi	r18, 0x08	; 8
 4f0:	31 05       	cpc	r19, r1
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <Endpoint_Write_Control_PStream_LE+0x7c>
 4f4:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4fa:	8e 77       	andi	r24, 0x7E	; 126
 4fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 500:	cd cf       	rjmp	.-102    	; 0x49c <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 502:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 504:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 508:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 50a:	61 50       	subi	r22, 0x01	; 1
 50c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 50e:	2f 5f       	subi	r18, 0xFF	; 255
 510:	3f 4f       	sbci	r19, 0xFF	; 255
 512:	e6 cf       	rjmp	.-52     	; 0x4e0 <Endpoint_Write_Control_PStream_LE+0x66>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 514:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 518:	88 23       	and	r24, r24
 51a:	41 f0       	breq	.+16     	; 0x52c <__stack+0x2d>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 51c:	85 30       	cpi	r24, 0x05	; 5
 51e:	41 f0       	breq	.+16     	; 0x530 <__stack+0x31>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 520:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
 524:	83 ff       	sbrs	r24, 3
 526:	bf cf       	rjmp	.-130    	; 0x4a6 <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
 528:	81 e0       	ldi	r24, 0x01	; 1
}
 52a:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 530:	83 e0       	ldi	r24, 0x03	; 3
 532:	08 95       	ret

00000534 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 534:	98 2f       	mov	r25, r24
 536:	95 30       	cpi	r25, 0x05	; 5
 538:	28 f0       	brcs	.+10     	; 0x544 <Endpoint_ConfigureEndpoint_Prv+0x10>
 53a:	8f 70       	andi	r24, 0x0F	; 15
 53c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	08 95       	ret
 544:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 548:	24 2f       	mov	r18, r20
 54a:	76 2f       	mov	r23, r22
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	98 17       	cp	r25, r24
 550:	31 f0       	breq	.+12     	; 0x55e <Endpoint_ConfigureEndpoint_Prv+0x2a>
 552:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 556:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 55a:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 55e:	21 fd       	sbrc	r18, 1
 560:	02 c0       	rjmp	.+4      	; 0x566 <Endpoint_ConfigureEndpoint_Prv+0x32>
 562:	9f 5f       	subi	r25, 0xFF	; 255
 564:	e8 cf       	rjmp	.-48     	; 0x536 <Endpoint_ConfigureEndpoint_Prv+0x2>
 566:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 56a:	3e 7f       	andi	r19, 0xFE	; 254
 56c:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 570:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 574:	3d 7f       	andi	r19, 0xFD	; 253
 576:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 57a:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 57e:	31 60       	ori	r19, 0x01	; 1
 580:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 584:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 588:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 58c:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 590:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
 594:	27 fd       	sbrc	r18, 7
 596:	e5 cf       	rjmp	.-54     	; 0x562 <Endpoint_ConfigureEndpoint_Prv+0x2e>
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	08 95       	ret

0000059c <Endpoint_ConfigureEndpointTable>:
 59c:	0f 93       	push	r16
 59e:	1f 93       	push	r17
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	06 2f       	mov	r16, r22
 5a6:	ec 01       	movw	r28, r24
 5a8:	10 e0       	ldi	r17, 0x00	; 0
 5aa:	10 13       	cpse	r17, r16
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <Endpoint_ConfigureEndpointTable+0x16>
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	0f c0       	rjmp	.+30     	; 0x5d0 <Endpoint_ConfigureEndpointTable+0x34>
 5b2:	28 81       	ld	r18, Y
 5b4:	21 11       	cpse	r18, r1
 5b6:	03 c0       	rjmp	.+6      	; 0x5be <Endpoint_ConfigureEndpointTable+0x22>
 5b8:	1f 5f       	subi	r17, 0xFF	; 255
 5ba:	25 96       	adiw	r28, 0x05	; 5
 5bc:	f6 cf       	rjmp	.-20     	; 0x5aa <Endpoint_ConfigureEndpointTable+0xe>
 5be:	9c 81       	ldd	r25, Y+4	; 0x04
 5c0:	a9 81       	ldd	r26, Y+1	; 0x01
 5c2:	ba 81       	ldd	r27, Y+2	; 0x02
 5c4:	6b 81       	ldd	r22, Y+3	; 0x03
 5c6:	82 2f       	mov	r24, r18
 5c8:	8f 70       	andi	r24, 0x0F	; 15
 5ca:	85 30       	cpi	r24, 0x05	; 5
 5cc:	30 f0       	brcs	.+12     	; 0x5da <Endpoint_ConfigureEndpointTable+0x3e>
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	1f 91       	pop	r17
 5d6:	0f 91       	pop	r16
 5d8:	08 95       	ret
 5da:	42 e0       	ldi	r20, 0x02	; 2
 5dc:	92 30       	cpi	r25, 0x02	; 2
 5de:	08 f0       	brcs	.+2      	; 0x5e2 <Endpoint_ConfigureEndpointTable+0x46>
 5e0:	46 e0       	ldi	r20, 0x06	; 6
 5e2:	e8 e0       	ldi	r30, 0x08	; 8
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	ea 17       	cp	r30, r26
 5ea:	fb 07       	cpc	r31, r27
 5ec:	78 f0       	brcs	.+30     	; 0x60c <Endpoint_ConfigureEndpointTable+0x70>
 5ee:	92 95       	swap	r25
 5f0:	90 7f       	andi	r25, 0xF0	; 240
 5f2:	49 2b       	or	r20, r25
 5f4:	62 95       	swap	r22
 5f6:	66 0f       	add	r22, r22
 5f8:	66 0f       	add	r22, r22
 5fa:	60 7c       	andi	r22, 0xC0	; 192
 5fc:	22 1f       	adc	r18, r18
 5fe:	22 27       	eor	r18, r18
 600:	22 1f       	adc	r18, r18
 602:	62 2b       	or	r22, r18
 604:	97 df       	rcall	.-210    	; 0x534 <Endpoint_ConfigureEndpoint_Prv>
 606:	81 11       	cpse	r24, r1
 608:	d7 cf       	rjmp	.-82     	; 0x5b8 <Endpoint_ConfigureEndpointTable+0x1c>
 60a:	e1 cf       	rjmp	.-62     	; 0x5ce <Endpoint_ConfigureEndpointTable+0x32>
 60c:	9f 5f       	subi	r25, 0xFF	; 255
 60e:	ee 0f       	add	r30, r30
 610:	ff 1f       	adc	r31, r31
 612:	ea cf       	rjmp	.-44     	; 0x5e8 <Endpoint_ConfigureEndpointTable+0x4c>

00000614 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 614:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <USB_ControlRequest>
 618:	87 ff       	sbrs	r24, 7
 61a:	13 c0       	rjmp	.+38     	; 0x642 <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 61c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 620:	82 ff       	sbrs	r24, 2
 622:	06 c0       	rjmp	.+12     	; 0x630 <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 624:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 628:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 62a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 62e:	04 c0       	rjmp	.+8      	; 0x638 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 630:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <USB_DeviceState>
 634:	81 11       	cpse	r24, r1
 636:	f2 cf       	rjmp	.-28     	; 0x61c <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
 638:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 63a:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <USB_DeviceState>
 63e:	88 23       	and	r24, r24
 640:	d9 f3       	breq	.-10     	; 0x638 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 642:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		while (!(Endpoint_IsINReady()))
 646:	80 ff       	sbrs	r24, 0
 648:	f8 cf       	rjmp	.-16     	; 0x63a <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 64a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 64e:	8e 77       	andi	r24, 0x7E	; 126
 650:	ec cf       	rjmp	.-40     	; 0x62a <Endpoint_ClearStatusStage+0x16>

00000652 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 652:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
 656:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
 65a:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 65c:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 660:	90 ff       	sbrs	r25, 0
 662:	06 c0       	rjmp	.+12     	; 0x670 <Endpoint_WaitUntilReady+0x1e>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 664:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 668:	90 ff       	sbrs	r25, 0
 66a:	06 c0       	rjmp	.+12     	; 0x678 <Endpoint_WaitUntilReady+0x26>
			  return ENDPOINT_READYWAIT_NoError;
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 670:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 674:	92 fd       	sbrc	r25, 2
 676:	fa cf       	rjmp	.-12     	; 0x66c <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 678:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 67c:	99 23       	and	r25, r25
 67e:	91 f0       	breq	.+36     	; 0x6a4 <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 680:	95 30       	cpi	r25, 0x05	; 5
 682:	91 f0       	breq	.+36     	; 0x6a8 <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 684:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 688:	95 fd       	sbrc	r25, 5
 68a:	10 c0       	rjmp	.+32     	; 0x6ac <Endpoint_WaitUntilReady+0x5a>
 68c:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
 690:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 694:	24 17       	cp	r18, r20
 696:	35 07       	cpc	r19, r21
 698:	09 f3       	breq	.-62     	; 0x65c <Endpoint_WaitUntilReady+0xa>
 69a:	81 50       	subi	r24, 0x01	; 1
 69c:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 69e:	f1 f6       	brne	.-68     	; 0x65c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 6a0:	84 e0       	ldi	r24, 0x04	; 4
 6a2:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 6a4:	82 e0       	ldi	r24, 0x02	; 2
 6a6:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
 6a8:	83 e0       	ldi	r24, 0x03	; 3
 6aa:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
 6ae:	08 95       	ret

000006b0 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 6b0:	40 d0       	rcall	.+128    	; 0x732 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 6b2:	42 d0       	rcall	.+132    	; 0x738 <USB_INT_ClearAllInterrupts>
 6b4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 6b8:	8f 77       	andi	r24, 0x7F	; 127
 6ba:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 6be:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
 6c2:	80 68       	ori	r24, 0x80	; 128
 6c4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 6c8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON &= ~(1 << FRZCLK);
 6cc:	8f 7d       	andi	r24, 0xDF	; 223
 6ce:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 6d2:	19 bc       	out	0x29, r1	; 41
				PLLCSR = USB_PLL_PSC;
 6d4:	82 e0       	ldi	r24, 0x02	; 2
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6d6:	89 bd       	out	0x29, r24	; 41
 6d8:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 6da:	00 fe       	sbrs	r0, 0
 6dc:	fd cf       	rjmp	.-6      	; 0x6d8 <USB_ResetInterface+0x28>
 6de:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 6e2:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 6e6:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 6ea:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 6ee:	42 e0       	ldi	r20, 0x02	; 2
				return Endpoint_ConfigureEndpoint_Prv(Number,
 6f0:	60 e0       	ldi	r22, 0x00	; 0
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	1f df       	rcall	.-450    	; 0x534 <Endpoint_ConfigureEndpoint_Prv>
 6f6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6fa:	8e 7f       	andi	r24, 0xFE	; 254
 6fc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 700:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << SUSPE);
 704:	81 60       	ori	r24, 0x01	; 1
 706:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 70a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << EORSTE);
 70e:	88 60       	ori	r24, 0x08	; 8
 710:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 714:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
				UDCON  &= ~(1 << DETACH);
 718:	8e 7f       	andi	r24, 0xFE	; 254
 71a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
 71e:	08 95       	ret

00000720 <USB_Init>:
}
 720:	e3 e6       	ldi	r30, 0x63	; 99
				REGCR  &= ~(1 << REGDIS);
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
 726:	8e 7f       	andi	r24, 0xFE	; 254
 728:	80 83       	st	Z, r24
	USB_IsInitialized = true;
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <USB_IsInitialized>
	USB_ResetInterface();
 730:	bf cf       	rjmp	.-130    	; 0x6b0 <USB_ResetInterface>

00000732 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 732:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
	#endif
}
 736:	08 95       	ret

00000738 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 738:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#endif
}
 73c:	08 95       	ret

0000073e <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 73e:	1f 92       	push	r1
 740:	0f 92       	push	r0
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	0f 92       	push	r0
 746:	11 24       	eor	r1, r1
 748:	2f 93       	push	r18
 74a:	3f 93       	push	r19
 74c:	4f 93       	push	r20
 74e:	5f 93       	push	r21
 750:	6f 93       	push	r22
 752:	7f 93       	push	r23
 754:	8f 93       	push	r24
 756:	9f 93       	push	r25
 758:	af 93       	push	r26
 75a:	bf 93       	push	r27
 75c:	ef 93       	push	r30
 75e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 760:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 764:	82 ff       	sbrs	r24, 2
 766:	0a c0       	rjmp	.+20     	; 0x77c <__vector_11+0x3e>
						return (UDIEN  & (1 << SOFE));
 768:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 76c:	82 ff       	sbrs	r24, 2
 76e:	06 c0       	rjmp	.+12     	; 0x77c <__vector_11+0x3e>
						UDINT  &= ~(1 << SOFI);
 770:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 774:	8b 7f       	andi	r24, 0xFB	; 251
 776:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 77a:	20 d2       	rcall	.+1088   	; 0xbbc <USB_Event_Stub>
						return (UDINT  & (1 << SUSPI));
 77c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 780:	80 ff       	sbrs	r24, 0
 782:	17 c0       	rjmp	.+46     	; 0x7b2 <__vector_11+0x74>
						return (UDIEN  & (1 << SUSPE));
 784:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 788:	80 ff       	sbrs	r24, 0
 78a:	13 c0       	rjmp	.+38     	; 0x7b2 <__vector_11+0x74>
						UDIEN  &= ~(1 << SUSPE);
 78c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 790:	8e 7f       	andi	r24, 0xFE	; 254
 792:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << WAKEUPE);
 796:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 79a:	80 61       	ori	r24, 0x10	; 16
 79c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 7a0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 7a4:	80 62       	ori	r24, 0x20	; 32
 7a6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				PLLCSR = 0;
 7aa:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 7ac:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
 7b0:	ee dc       	rcall	.-1572   	; 0x18e <EVENT_USB_Device_Disconnect>
						return (UDINT  & (1 << WAKEUPI));
 7b2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 7b6:	84 ff       	sbrs	r24, 4
 7b8:	27 c0       	rjmp	.+78     	; 0x808 <__vector_11+0xca>
						return (UDIEN  & (1 << WAKEUPE));
 7ba:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 7be:	84 ff       	sbrs	r24, 4
 7c0:	23 c0       	rjmp	.+70     	; 0x808 <__vector_11+0xca>
				PLLCSR = USB_PLL_PSC;
 7c2:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 7c4:	82 e0       	ldi	r24, 0x02	; 2
 7c6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 7c8:	09 b4       	in	r0, 0x29	; 41
 7ca:	00 fe       	sbrs	r0, 0
 7cc:	fd cf       	rjmp	.-6      	; 0x7c8 <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 7ce:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 7d2:	8f 7d       	andi	r24, 0xDF	; 223
 7d4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						UDINT  &= ~(1 << WAKEUPI);
 7d8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 7dc:	8f 7e       	andi	r24, 0xEF	; 239
 7de:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						UDIEN  &= ~(1 << WAKEUPE);
 7e2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 7e6:	8f 7e       	andi	r24, 0xEF	; 239
 7e8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << SUSPE);
 7ec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 7f0:	81 60       	ori	r24, 0x01	; 1
 7f2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 7f6:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <USB_Device_ConfigurationNumber>
 7fa:	88 23       	and	r24, r24
 7fc:	09 f4       	brne	.+2      	; 0x800 <__vector_11+0xc2>
 7fe:	40 c0       	rjmp	.+128    	; 0x880 <__vector_11+0x142>
		  USB_DeviceState = DEVICE_STATE_Configured;
 800:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 802:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 806:	ae dc       	rcall	.-1700   	; 0x164 <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << EORSTI));
 808:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 80c:	83 ff       	sbrs	r24, 3
 80e:	27 c0       	rjmp	.+78     	; 0x85e <__vector_11+0x120>
						return (UDIEN  & (1 << EORSTE));
 810:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 814:	83 ff       	sbrs	r24, 3
 816:	23 c0       	rjmp	.+70     	; 0x85e <__vector_11+0x120>
						UDINT  &= ~(1 << EORSTI);
 818:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 81c:	87 7f       	andi	r24, 0xF7	; 247
 81e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 822:	82 e0       	ldi	r24, 0x02	; 2
 824:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 828:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
 82c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 830:	8e 7f       	andi	r24, 0xFE	; 254
 832:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						UDIEN  &= ~(1 << SUSPE);
 836:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 83a:	8e 7f       	andi	r24, 0xFE	; 254
 83c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << WAKEUPE);
 840:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 844:	80 61       	ori	r24, 0x10	; 16
 846:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 84a:	42 e0       	ldi	r20, 0x02	; 2
 84c:	60 e0       	ldi	r22, 0x00	; 0
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	71 de       	rcall	.-798    	; 0x534 <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
 852:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 856:	88 60       	ori	r24, 0x08	; 8
 858:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 85c:	af d1       	rcall	.+862    	; 0xbbc <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 85e:	ff 91       	pop	r31
 860:	ef 91       	pop	r30
 862:	bf 91       	pop	r27
 864:	af 91       	pop	r26
 866:	9f 91       	pop	r25
 868:	8f 91       	pop	r24
 86a:	7f 91       	pop	r23
 86c:	6f 91       	pop	r22
 86e:	5f 91       	pop	r21
 870:	4f 91       	pop	r20
 872:	3f 91       	pop	r19
 874:	2f 91       	pop	r18
 876:	0f 90       	pop	r0
 878:	0f be       	out	0x3f, r0	; 63
 87a:	0f 90       	pop	r0
 87c:	1f 90       	pop	r1
 87e:	18 95       	reti
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 880:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 884:	87 fd       	sbrc	r24, 7
 886:	02 c0       	rjmp	.+4      	; 0x88c <__vector_11+0x14e>
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	bb cf       	rjmp	.-138    	; 0x802 <__vector_11+0xc4>
 88c:	83 e0       	ldi	r24, 0x03	; 3
 88e:	b9 cf       	rjmp	.-142    	; 0x802 <__vector_11+0xc4>

00000890 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 890:	1f 92       	push	r1
 892:	0f 92       	push	r0
 894:	0f b6       	in	r0, 0x3f	; 63
 896:	0f 92       	push	r0
 898:	11 24       	eor	r1, r1
 89a:	2f 93       	push	r18
 89c:	3f 93       	push	r19
 89e:	4f 93       	push	r20
 8a0:	5f 93       	push	r21
 8a2:	6f 93       	push	r22
 8a4:	7f 93       	push	r23
 8a6:	8f 93       	push	r24
 8a8:	9f 93       	push	r25
 8aa:	af 93       	push	r26
 8ac:	bf 93       	push	r27
 8ae:	cf 93       	push	r28
 8b0:	ef 93       	push	r30
 8b2:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 8b4:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 8b8:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 8ba:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 8be:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						UEIENX &= ~(1 << RXSTPE);
 8c2:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 8c6:	87 7f       	andi	r24, 0xF7	; 247
 8c8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 8cc:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 8ce:	1b d0       	rcall	.+54     	; 0x906 <USB_Device_ProcessControlRequest>
 8d0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						UEIENX |= (1 << RXSTPE);
 8d4:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 8d8:	88 60       	ori	r24, 0x08	; 8
 8da:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 8de:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 8e2:	ff 91       	pop	r31
 8e4:	ef 91       	pop	r30
 8e6:	cf 91       	pop	r28
 8e8:	bf 91       	pop	r27
 8ea:	af 91       	pop	r26
 8ec:	9f 91       	pop	r25
 8ee:	8f 91       	pop	r24
 8f0:	7f 91       	pop	r23
 8f2:	6f 91       	pop	r22
 8f4:	5f 91       	pop	r21
 8f6:	4f 91       	pop	r20
 8f8:	3f 91       	pop	r19
 8fa:	2f 91       	pop	r18
 8fc:	0f 90       	pop	r0
 8fe:	0f be       	out	0x3f, r0	; 63
 900:	0f 90       	pop	r0
 902:	1f 90       	pop	r1
 904:	18 95       	reti

00000906 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 906:	1f 93       	push	r17
 908:	cf 93       	push	r28
 90a:	df 93       	push	r29
 90c:	cd b7       	in	r28, 0x3d	; 61
 90e:	de b7       	in	r29, 0x3e	; 62
 910:	aa 97       	sbiw	r28, 0x2a	; 42
 912:	0f b6       	in	r0, 0x3f	; 63
 914:	f8 94       	cli
 916:	de bf       	out	0x3e, r29	; 62
 918:	0f be       	out	0x3f, r0	; 63
 91a:	cd bf       	out	0x3d, r28	; 61
 91c:	e0 ec       	ldi	r30, 0xC0	; 192
 91e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 920:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 924:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 926:	21 e0       	ldi	r18, 0x01	; 1
 928:	e8 3c       	cpi	r30, 0xC8	; 200
 92a:	f2 07       	cpc	r31, r18
 92c:	c9 f7       	brne	.-14     	; 0x920 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
 92e:	33 dc       	rcall	.-1946   	; 0x196 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 930:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
 934:	83 ff       	sbrs	r24, 3
 936:	10 c0       	rjmp	.+32     	; 0x958 <USB_Device_ProcessControlRequest+0x52>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 938:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 93c:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <USB_ControlRequest+0x1>
 940:	95 30       	cpi	r25, 0x05	; 5
 942:	09 f4       	brne	.+2      	; 0x946 <USB_Device_ProcessControlRequest+0x40>
 944:	d8 c0       	rjmp	.+432    	; 0xaf6 <USB_Device_ProcessControlRequest+0x1f0>
 946:	00 f5       	brcc	.+64     	; 0x988 <USB_Device_ProcessControlRequest+0x82>
 948:	91 30       	cpi	r25, 0x01	; 1
 94a:	09 f4       	brne	.+2      	; 0x94e <USB_Device_ProcessControlRequest+0x48>
 94c:	8b c0       	rjmp	.+278    	; 0xa64 <USB_Device_ProcessControlRequest+0x15e>
 94e:	08 f4       	brcc	.+2      	; 0x952 <USB_Device_ProcessControlRequest+0x4c>
 950:	61 c0       	rjmp	.+194    	; 0xa14 <USB_Device_ProcessControlRequest+0x10e>
 952:	93 30       	cpi	r25, 0x03	; 3
 954:	09 f4       	brne	.+2      	; 0x958 <USB_Device_ProcessControlRequest+0x52>
 956:	86 c0       	rjmp	.+268    	; 0xa64 <USB_Device_ProcessControlRequest+0x15e>
 958:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 95c:	83 ff       	sbrs	r24, 3
 95e:	0a c0       	rjmp	.+20     	; 0x974 <USB_Device_ProcessControlRequest+0x6e>
				UEINTX &= ~(1 << RXSTPI);
 960:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 964:	87 7f       	andi	r24, 0xF7	; 247
 966:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				UECONX |= (1 << STALLRQ);
 96a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 96e:	80 62       	ori	r24, 0x20	; 32
 970:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 974:	aa 96       	adiw	r28, 0x2a	; 42
 976:	0f b6       	in	r0, 0x3f	; 63
 978:	f8 94       	cli
 97a:	de bf       	out	0x3e, r29	; 62
 97c:	0f be       	out	0x3f, r0	; 63
 97e:	cd bf       	out	0x3d, r28	; 61
 980:	df 91       	pop	r29
 982:	cf 91       	pop	r28
 984:	1f 91       	pop	r17
 986:	08 95       	ret
		switch (USB_ControlRequest.bRequest)
 988:	98 30       	cpi	r25, 0x08	; 8
 98a:	09 f4       	brne	.+2      	; 0x98e <USB_Device_ProcessControlRequest+0x88>
 98c:	ec c0       	rjmp	.+472    	; 0xb66 <USB_Device_ProcessControlRequest+0x260>
 98e:	99 30       	cpi	r25, 0x09	; 9
 990:	09 f4       	brne	.+2      	; 0x994 <USB_Device_ProcessControlRequest+0x8e>
 992:	f6 c0       	rjmp	.+492    	; 0xb80 <USB_Device_ProcessControlRequest+0x27a>
 994:	96 30       	cpi	r25, 0x06	; 6
 996:	01 f7       	brne	.-64     	; 0x958 <USB_Device_ProcessControlRequest+0x52>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 998:	80 58       	subi	r24, 0x80	; 128
 99a:	82 30       	cpi	r24, 0x02	; 2
 99c:	e8 f6       	brcc	.-70     	; 0x958 <USB_Device_ProcessControlRequest+0x52>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 99e:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <USB_ControlRequest+0x2>
 9a2:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <USB_ControlRequest+0x3>
 9a6:	8c 3d       	cpi	r24, 0xDC	; 220
 9a8:	23 e0       	ldi	r18, 0x03	; 3
 9aa:	92 07       	cpc	r25, r18
 9ac:	09 f0       	breq	.+2      	; 0x9b0 <USB_Device_ProcessControlRequest+0xaa>
 9ae:	c6 c0       	rjmp	.+396    	; 0xb3c <USB_Device_ProcessControlRequest+0x236>
	SignatureDescriptor.Header.Type = DTYPE_String;
 9b0:	83 e0       	ldi	r24, 0x03	; 3
 9b2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 9b4:	8a e2       	ldi	r24, 0x2A	; 42
 9b6:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 9b8:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 9ba:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 9bc:	de 01       	movw	r26, r28
 9be:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 9c0:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 9c2:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 9c4:	51 e2       	ldi	r21, 0x21	; 33
 9c6:	e3 2f       	mov	r30, r19
 9c8:	f0 e0       	ldi	r31, 0x00	; 0
 9ca:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
 9ce:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 9d0:	20 ff       	sbrs	r18, 0
 9d2:	03 c0       	rjmp	.+6      	; 0x9da <USB_Device_ProcessControlRequest+0xd4>
					{
						SerialByte >>= 4;
 9d4:	e2 95       	swap	r30
 9d6:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 9d8:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 9da:	ef 70       	andi	r30, 0x0F	; 15
 9dc:	8e 2f       	mov	r24, r30
 9de:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 9e0:	ea 30       	cpi	r30, 0x0A	; 10
 9e2:	08 f4       	brcc	.+2      	; 0x9e6 <USB_Device_ProcessControlRequest+0xe0>
 9e4:	a9 c0       	rjmp	.+338    	; 0xb38 <USB_Device_ProcessControlRequest+0x232>
 9e6:	c7 96       	adiw	r24, 0x37	; 55
 9e8:	8d 93       	st	X+, r24
 9ea:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 9ec:	2f 5f       	subi	r18, 0xFF	; 255
 9ee:	24 31       	cpi	r18, 0x14	; 20
 9f0:	51 f7       	brne	.-44     	; 0x9c6 <USB_Device_ProcessControlRequest+0xc0>
				SREG = GlobalIntState;
 9f2:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
 9f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 9f8:	87 7f       	andi	r24, 0xF7	; 247
 9fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 9fe:	6a e2       	ldi	r22, 0x2A	; 42
 a00:	70 e0       	ldi	r23, 0x00	; 0
 a02:	ce 01       	movw	r24, r28
 a04:	01 96       	adiw	r24, 0x01	; 1
 a06:	dd dc       	rcall	.-1606   	; 0x3c2 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 a08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a0c:	8b 77       	andi	r24, 0x7B	; 123
 a0e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a12:	a2 cf       	rjmp	.-188    	; 0x958 <USB_Device_ProcessControlRequest+0x52>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a14:	80 38       	cpi	r24, 0x80	; 128
 a16:	99 f0       	breq	.+38     	; 0xa3e <USB_Device_ProcessControlRequest+0x138>
 a18:	82 38       	cpi	r24, 0x82	; 130
 a1a:	09 f0       	breq	.+2      	; 0xa1e <USB_Device_ProcessControlRequest+0x118>
 a1c:	9d cf       	rjmp	.-198    	; 0x958 <USB_Device_ProcessControlRequest+0x52>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a1e:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <USB_ControlRequest+0x4>
 a22:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 a24:	85 30       	cpi	r24, 0x05	; 5
 a26:	08 f0       	brcs	.+2      	; 0xa2a <USB_Device_ProcessControlRequest+0x124>
 a28:	97 cf       	rjmp	.-210    	; 0x958 <USB_Device_ProcessControlRequest+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a2a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a2e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 a32:	85 fb       	bst	r24, 5
 a34:	88 27       	eor	r24, r24
 a36:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a38:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 a3c:	06 c0       	rjmp	.+12     	; 0xa4a <USB_Device_ProcessControlRequest+0x144>
	uint8_t CurrentStatus = 0;
 a3e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
 a42:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <USB_Device_RemoteWakeupEnabled>
 a46:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a48:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
 a4a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a4e:	97 7f       	andi	r25, 0xF7	; 247
 a50:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a54:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
 a58:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a60:	8e 77       	andi	r24, 0x7E	; 126
 a62:	32 c0       	rjmp	.+100    	; 0xac8 <USB_Device_ProcessControlRequest+0x1c2>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a64:	28 2f       	mov	r18, r24
 a66:	2d 7f       	andi	r18, 0xFD	; 253
 a68:	09 f0       	breq	.+2      	; 0xa6c <USB_Device_ProcessControlRequest+0x166>
 a6a:	76 cf       	rjmp	.-276    	; 0x958 <USB_Device_ProcessControlRequest+0x52>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a6c:	88 23       	and	r24, r24
 a6e:	e9 f0       	breq	.+58     	; 0xaaa <USB_Device_ProcessControlRequest+0x1a4>
 a70:	82 30       	cpi	r24, 0x02	; 2
 a72:	09 f0       	breq	.+2      	; 0xa76 <USB_Device_ProcessControlRequest+0x170>
 a74:	71 cf       	rjmp	.-286    	; 0x958 <USB_Device_ProcessControlRequest+0x52>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a76:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <USB_ControlRequest+0x2>
 a7a:	81 11       	cpse	r24, r1
 a7c:	20 c0       	rjmp	.+64     	; 0xabe <USB_Device_ProcessControlRequest+0x1b8>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a7e:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <USB_ControlRequest+0x4>
 a82:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 a84:	2f ef       	ldi	r18, 0xFF	; 255
 a86:	28 0f       	add	r18, r24
 a88:	24 30       	cpi	r18, 0x04	; 4
 a8a:	08 f0       	brcs	.+2      	; 0xa8e <USB_Device_ProcessControlRequest+0x188>
 a8c:	65 cf       	rjmp	.-310    	; 0x958 <USB_Device_ProcessControlRequest+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a8e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
 a92:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a96:	20 ff       	sbrs	r18, 0
 a98:	12 c0       	rjmp	.+36     	; 0xabe <USB_Device_ProcessControlRequest+0x1b8>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a9a:	93 30       	cpi	r25, 0x03	; 3
 a9c:	c9 f4       	brne	.+50     	; 0xad0 <USB_Device_ProcessControlRequest+0x1ca>
				UECONX |= (1 << STALLRQ);
 a9e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 aa2:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
 aa4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 aa8:	0a c0       	rjmp	.+20     	; 0xabe <USB_Device_ProcessControlRequest+0x1b8>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 aaa:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <USB_ControlRequest+0x2>
 aae:	81 30       	cpi	r24, 0x01	; 1
 ab0:	09 f0       	breq	.+2      	; 0xab4 <USB_Device_ProcessControlRequest+0x1ae>
 ab2:	52 cf       	rjmp	.-348    	; 0x958 <USB_Device_ProcessControlRequest+0x52>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 ab4:	93 30       	cpi	r25, 0x03	; 3
 ab6:	09 f0       	breq	.+2      	; 0xaba <USB_Device_ProcessControlRequest+0x1b4>
 ab8:	80 e0       	ldi	r24, 0x00	; 0
 aba:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 abe:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				UEINTX &= ~(1 << RXSTPI);
 ac2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 ac6:	87 7f       	andi	r24, 0xF7	; 247
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ac8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearStatusStage();
 acc:	a3 dd       	rcall	.-1210   	; 0x614 <Endpoint_ClearStatusStage>
 ace:	44 cf       	rjmp	.-376    	; 0x958 <USB_Device_ProcessControlRequest+0x52>
				UECONX |= (1 << STALLRQC);
 ad0:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 ad4:	90 61       	ori	r25, 0x10	; 16
 ad6:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 ada:	21 e0       	ldi	r18, 0x01	; 1
 adc:	30 e0       	ldi	r19, 0x00	; 0
 ade:	01 c0       	rjmp	.+2      	; 0xae2 <USB_Device_ProcessControlRequest+0x1dc>
 ae0:	22 0f       	add	r18, r18
 ae2:	8a 95       	dec	r24
 ae4:	ea f7       	brpl	.-6      	; 0xae0 <USB_Device_ProcessControlRequest+0x1da>
 ae6:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
 aea:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UECONX |= (1 << RSTDT);
 aee:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 af2:	88 60       	ori	r24, 0x08	; 8
 af4:	d7 cf       	rjmp	.-82     	; 0xaa4 <USB_Device_ProcessControlRequest+0x19e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 af6:	81 11       	cpse	r24, r1
 af8:	2f cf       	rjmp	.-418    	; 0x958 <USB_Device_ProcessControlRequest+0x52>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 afa:	10 91 c2 01 	lds	r17, 0x01C2	; 0x8001c2 <USB_ControlRequest+0x2>
 afe:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b00:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 b04:	80 78       	andi	r24, 0x80	; 128
 b06:	81 2b       	or	r24, r17
 b08:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
				UEINTX &= ~(1 << RXSTPI);
 b0c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b10:	87 7f       	andi	r24, 0xF7	; 247
 b12:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearStatusStage();
 b16:	7e dd       	rcall	.-1284   	; 0x614 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	while (!(Endpoint_IsINReady()));
 b1c:	80 ff       	sbrs	r24, 0
 b1e:	fc cf       	rjmp	.-8      	; 0xb18 <USB_Device_ProcessControlRequest+0x212>
				UDADDR |= (1 << ADDEN);
 b20:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 b24:	80 68       	ori	r24, 0x80	; 128
 b26:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b2a:	83 e0       	ldi	r24, 0x03	; 3
 b2c:	11 11       	cpse	r17, r1
 b2e:	01 c0       	rjmp	.+2      	; 0xb32 <USB_Device_ProcessControlRequest+0x22c>
 b30:	82 e0       	ldi	r24, 0x02	; 2
 b32:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <USB_DeviceState>
 b36:	10 cf       	rjmp	.-480    	; 0x958 <USB_Device_ProcessControlRequest+0x52>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b38:	c0 96       	adiw	r24, 0x30	; 48
 b3a:	56 cf       	rjmp	.-340    	; 0x9e8 <USB_Device_ProcessControlRequest+0xe2>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b3c:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <USB_ControlRequest+0x4>
 b40:	70 91 c5 01 	lds	r23, 0x01C5	; 0x8001c5 <USB_ControlRequest+0x5>
 b44:	ae 01       	movw	r20, r28
 b46:	4f 5f       	subi	r20, 0xFF	; 255
 b48:	5f 4f       	sbci	r21, 0xFF	; 255
 b4a:	be db       	rcall	.-2180   	; 0x2c8 <CALLBACK_USB_GetDescriptor>
 b4c:	bc 01       	movw	r22, r24
 b4e:	89 2b       	or	r24, r25
 b50:	09 f4       	brne	.+2      	; 0xb54 <USB_Device_ProcessControlRequest+0x24e>
 b52:	02 cf       	rjmp	.-508    	; 0x958 <USB_Device_ProcessControlRequest+0x52>
				UEINTX &= ~(1 << RXSTPI);
 b54:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b58:	97 7f       	andi	r25, 0xF7	; 247
 b5a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b5e:	89 81       	ldd	r24, Y+1	; 0x01
 b60:	9a 81       	ldd	r25, Y+2	; 0x02
 b62:	8b dc       	rcall	.-1770   	; 0x47a <Endpoint_Write_Control_PStream_LE>
 b64:	51 cf       	rjmp	.-350    	; 0xa08 <USB_Device_ProcessControlRequest+0x102>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b66:	80 38       	cpi	r24, 0x80	; 128
 b68:	09 f0       	breq	.+2      	; 0xb6c <USB_Device_ProcessControlRequest+0x266>
 b6a:	f6 ce       	rjmp	.-532    	; 0x958 <USB_Device_ProcessControlRequest+0x52>
 b6c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b70:	87 7f       	andi	r24, 0xF7	; 247
 b72:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 b76:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <USB_Device_ConfigurationNumber>
				UEDATX = Data;
 b7a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 b7e:	6e cf       	rjmp	.-292    	; 0xa5c <USB_Device_ProcessControlRequest+0x156>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b80:	81 11       	cpse	r24, r1
 b82:	ea ce       	rjmp	.-556    	; 0x958 <USB_Device_ProcessControlRequest+0x52>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b84:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <USB_ControlRequest+0x2>
 b88:	92 30       	cpi	r25, 0x02	; 2
 b8a:	08 f0       	brcs	.+2      	; 0xb8e <USB_Device_ProcessControlRequest+0x288>
 b8c:	e5 ce       	rjmp	.-566    	; 0x958 <USB_Device_ProcessControlRequest+0x52>
				UEINTX &= ~(1 << RXSTPI);
 b8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b92:	87 7f       	andi	r24, 0xF7	; 247
 b94:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b98:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
 b9c:	3b dd       	rcall	.-1418   	; 0x614 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
 b9e:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <USB_Device_ConfigurationNumber>
 ba2:	88 23       	and	r24, r24
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 ba4:	29 f0       	breq	.+10     	; 0xbb0 <USB_Device_ProcessControlRequest+0x2aa>
 ba6:	84 e0       	ldi	r24, 0x04	; 4
 ba8:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
 bac:	f1 da       	rcall	.-2590   	; 0x190 <EVENT_USB_Device_ConfigurationChanged>
 bae:	d4 ce       	rjmp	.-600    	; 0x958 <USB_Device_ProcessControlRequest+0x52>
				return (UDADDR & (1 << ADDEN));
 bb0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 bb4:	87 fd       	sbrc	r24, 7
 bb6:	f7 cf       	rjmp	.-18     	; 0xba6 <USB_Device_ProcessControlRequest+0x2a0>
 bb8:	81 e0       	ldi	r24, 0x01	; 1
 bba:	f6 cf       	rjmp	.-20     	; 0xba8 <USB_Device_ProcessControlRequest+0x2a2>

00000bbc <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 bbc:	08 95       	ret

00000bbe <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 bbe:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 bc0:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <USB_DeviceState>
 bc4:	88 23       	and	r24, r24
 bc6:	91 f0       	breq	.+36     	; 0xbec <USB_USBTask+0x2e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 bc8:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 bcc:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 bce:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 bd2:	80 fd       	sbrc	r24, 0
 bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <USB_USBTask+0x32>
 bd6:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 bd8:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bda:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bde:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 be2:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 be4:	90 de       	rcall	.-736    	; 0x906 <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 be6:	cf 70       	andi	r28, 0x0F	; 15
 be8:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
}
 bec:	cf 91       	pop	r28
 bee:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 bf0:	80 e8       	ldi	r24, 0x80	; 128
 bf2:	f2 cf       	rjmp	.-28     	; 0xbd8 <USB_USBTask+0x1a>

00000bf4 <CDC_Device_ConfigureEndpoints>:
void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
}
 bf4:	cf 93       	push	r28
 bf6:	df 93       	push	r29
 bf8:	ec 01       	movw	r28, r24
 bfa:	fc 01       	movw	r30, r24
 bfc:	70 96       	adiw	r30, 0x10	; 16
 bfe:	8b e0       	ldi	r24, 0x0B	; 11
 c00:	df 01       	movw	r26, r30
 c02:	1d 92       	st	X+, r1
 c04:	8a 95       	dec	r24
 c06:	e9 f7       	brne	.-6      	; 0xc02 <CDC_Device_ConfigureEndpoints+0xe>
 c08:	82 e0       	ldi	r24, 0x02	; 2
 c0a:	8c 83       	std	Y+4, r24	; 0x04
 c0c:	89 87       	std	Y+9, r24	; 0x09
 c0e:	83 e0       	ldi	r24, 0x03	; 3
 c10:	8e 87       	std	Y+14, r24	; 0x0e
 c12:	61 e0       	ldi	r22, 0x01	; 1
 c14:	ce 01       	movw	r24, r28
 c16:	01 96       	adiw	r24, 0x01	; 1
 c18:	c1 dc       	rcall	.-1662   	; 0x59c <Endpoint_ConfigureEndpointTable>
 c1a:	88 23       	and	r24, r24
 c1c:	61 f0       	breq	.+24     	; 0xc36 <CDC_Device_ConfigureEndpoints+0x42>
 c1e:	61 e0       	ldi	r22, 0x01	; 1
 c20:	ce 01       	movw	r24, r28
 c22:	06 96       	adiw	r24, 0x06	; 6
 c24:	bb dc       	rcall	.-1674   	; 0x59c <Endpoint_ConfigureEndpointTable>
 c26:	88 23       	and	r24, r24
 c28:	31 f0       	breq	.+12     	; 0xc36 <CDC_Device_ConfigureEndpoints+0x42>
 c2a:	61 e0       	ldi	r22, 0x01	; 1
 c2c:	ce 01       	movw	r24, r28
 c2e:	0b 96       	adiw	r24, 0x0b	; 11
 c30:	df 91       	pop	r29
 c32:	cf 91       	pop	r28
 c34:	b3 cc       	rjmp	.-1690   	; 0x59c <Endpoint_ConfigureEndpointTable>
 c36:	80 e0       	ldi	r24, 0x00	; 0
 c38:	df 91       	pop	r29
 c3a:	cf 91       	pop	r28
 c3c:	08 95       	ret

00000c3e <CDC_Device_SendString>:
 c3e:	db 01       	movw	r26, r22
 c40:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <USB_DeviceState>
 c44:	24 30       	cpi	r18, 0x04	; 4
 c46:	c9 f4       	brne	.+50     	; 0xc7a <CDC_Device_SendString+0x3c>
 c48:	fc 01       	movw	r30, r24
 c4a:	44 89       	ldd	r20, Z+20	; 0x14
 c4c:	55 89       	ldd	r21, Z+21	; 0x15
 c4e:	66 89       	ldd	r22, Z+22	; 0x16
 c50:	77 89       	ldd	r23, Z+23	; 0x17
 c52:	45 2b       	or	r20, r21
 c54:	46 2b       	or	r20, r22
 c56:	47 2b       	or	r20, r23
 c58:	81 f0       	breq	.+32     	; 0xc7a <CDC_Device_SendString+0x3c>
 c5a:	81 81       	ldd	r24, Z+1	; 0x01
 c5c:	8f 70       	andi	r24, 0x0F	; 15
 c5e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 c62:	fd 01       	movw	r30, r26
 c64:	01 90       	ld	r0, Z+
 c66:	00 20       	and	r0, r0
 c68:	e9 f7       	brne	.-6      	; 0xc64 <CDC_Device_SendString+0x26>
 c6a:	31 97       	sbiw	r30, 0x01	; 1
 c6c:	bf 01       	movw	r22, r30
 c6e:	6a 1b       	sub	r22, r26
 c70:	7b 0b       	sbc	r23, r27
 c72:	50 e0       	ldi	r21, 0x00	; 0
 c74:	40 e0       	ldi	r20, 0x00	; 0
 c76:	cd 01       	movw	r24, r26
 c78:	57 cb       	rjmp	.-2386   	; 0x328 <Endpoint_Write_Stream_LE>
 c7a:	82 e0       	ldi	r24, 0x02	; 2
 c7c:	08 95       	ret

00000c7e <CDC_Device_SendByte>:
 c7e:	cf 93       	push	r28
 c80:	c6 2f       	mov	r28, r22
 c82:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <USB_DeviceState>
 c86:	24 30       	cpi	r18, 0x04	; 4
 c88:	f9 f4       	brne	.+62     	; 0xcc8 <CDC_Device_SendByte+0x4a>
 c8a:	fc 01       	movw	r30, r24
 c8c:	44 89       	ldd	r20, Z+20	; 0x14
 c8e:	55 89       	ldd	r21, Z+21	; 0x15
 c90:	66 89       	ldd	r22, Z+22	; 0x16
 c92:	77 89       	ldd	r23, Z+23	; 0x17
 c94:	45 2b       	or	r20, r21
 c96:	46 2b       	or	r20, r22
 c98:	47 2b       	or	r20, r23
 c9a:	b1 f0       	breq	.+44     	; 0xcc8 <CDC_Device_SendByte+0x4a>
 c9c:	81 81       	ldd	r24, Z+1	; 0x01
 c9e:	8f 70       	andi	r24, 0x0F	; 15
 ca0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 ca4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 ca8:	85 ff       	sbrs	r24, 5
 caa:	05 c0       	rjmp	.+10     	; 0xcb6 <CDC_Device_SendByte+0x38>
 cac:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 cb0:	80 e0       	ldi	r24, 0x00	; 0
 cb2:	cf 91       	pop	r28
 cb4:	08 95       	ret
 cb6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 cba:	8e 77       	andi	r24, 0x7E	; 126
 cbc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 cc0:	c8 dc       	rcall	.-1648   	; 0x652 <Endpoint_WaitUntilReady>
 cc2:	88 23       	and	r24, r24
 cc4:	99 f3       	breq	.-26     	; 0xcac <CDC_Device_SendByte+0x2e>
 cc6:	f5 cf       	rjmp	.-22     	; 0xcb2 <CDC_Device_SendByte+0x34>
 cc8:	82 e0       	ldi	r24, 0x02	; 2
 cca:	f3 cf       	rjmp	.-26     	; 0xcb2 <CDC_Device_SendByte+0x34>

00000ccc <CDC_Device_putchar>:
 ccc:	fb 01       	movw	r30, r22
 cce:	68 2f       	mov	r22, r24
 cd0:	84 85       	ldd	r24, Z+12	; 0x0c
 cd2:	95 85       	ldd	r25, Z+13	; 0x0d
 cd4:	d4 df       	rcall	.-88     	; 0xc7e <CDC_Device_SendByte>
 cd6:	21 e0       	ldi	r18, 0x01	; 1
 cd8:	30 e0       	ldi	r19, 0x00	; 0
 cda:	81 11       	cpse	r24, r1
 cdc:	02 c0       	rjmp	.+4      	; 0xce2 <CDC_Device_putchar+0x16>
 cde:	30 e0       	ldi	r19, 0x00	; 0
 ce0:	20 e0       	ldi	r18, 0x00	; 0
 ce2:	88 27       	eor	r24, r24
 ce4:	99 27       	eor	r25, r25
 ce6:	82 1b       	sub	r24, r18
 ce8:	93 0b       	sbc	r25, r19
 cea:	08 95       	ret

00000cec <CDC_Device_Flush>:
 cec:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <USB_DeviceState>
 cf0:	24 30       	cpi	r18, 0x04	; 4
 cf2:	29 f5       	brne	.+74     	; 0xd3e <CDC_Device_Flush+0x52>
 cf4:	fc 01       	movw	r30, r24
 cf6:	44 89       	ldd	r20, Z+20	; 0x14
 cf8:	55 89       	ldd	r21, Z+21	; 0x15
 cfa:	66 89       	ldd	r22, Z+22	; 0x16
 cfc:	77 89       	ldd	r23, Z+23	; 0x17
 cfe:	45 2b       	or	r20, r21
 d00:	46 2b       	or	r20, r22
 d02:	47 2b       	or	r20, r23
 d04:	e1 f0       	breq	.+56     	; 0xd3e <CDC_Device_Flush+0x52>
 d06:	81 81       	ldd	r24, Z+1	; 0x01
 d08:	8f 70       	andi	r24, 0x0F	; 15
 d0a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 d0e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 d12:	81 11       	cpse	r24, r1
 d14:	02 c0       	rjmp	.+4      	; 0xd1a <CDC_Device_Flush+0x2e>
 d16:	80 e0       	ldi	r24, 0x00	; 0
 d18:	08 95       	ret
 d1a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d22:	8e 77       	andi	r24, 0x7E	; 126
 d24:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d28:	95 fd       	sbrc	r25, 5
 d2a:	f5 cf       	rjmp	.-22     	; 0xd16 <CDC_Device_Flush+0x2a>
 d2c:	92 dc       	rcall	.-1756   	; 0x652 <Endpoint_WaitUntilReady>
 d2e:	81 11       	cpse	r24, r1
 d30:	07 c0       	rjmp	.+14     	; 0xd40 <CDC_Device_Flush+0x54>
 d32:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d36:	9e 77       	andi	r25, 0x7E	; 126
 d38:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d3c:	08 95       	ret
 d3e:	82 e0       	ldi	r24, 0x02	; 2
 d40:	08 95       	ret

00000d42 <CDC_Device_USBTask>:
 d42:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <USB_DeviceState>
 d46:	24 30       	cpi	r18, 0x04	; 4
 d48:	89 f4       	brne	.+34     	; 0xd6c <CDC_Device_USBTask+0x2a>
 d4a:	fc 01       	movw	r30, r24
 d4c:	44 89       	ldd	r20, Z+20	; 0x14
 d4e:	55 89       	ldd	r21, Z+21	; 0x15
 d50:	66 89       	ldd	r22, Z+22	; 0x16
 d52:	77 89       	ldd	r23, Z+23	; 0x17
 d54:	45 2b       	or	r20, r21
 d56:	46 2b       	or	r20, r22
 d58:	47 2b       	or	r20, r23
 d5a:	41 f0       	breq	.+16     	; 0xd6c <CDC_Device_USBTask+0x2a>
 d5c:	21 81       	ldd	r18, Z+1	; 0x01
 d5e:	2f 70       	andi	r18, 0x0F	; 15
 d60:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 d64:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d68:	20 fd       	sbrc	r18, 0
 d6a:	c0 cf       	rjmp	.-128    	; 0xcec <CDC_Device_Flush>
 d6c:	08 95       	ret

00000d6e <CDC_Device_ReceiveByte>:
 d6e:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <USB_DeviceState>
 d72:	24 30       	cpi	r18, 0x04	; 4
 d74:	19 f0       	breq	.+6      	; 0xd7c <CDC_Device_ReceiveByte+0xe>
 d76:	8f ef       	ldi	r24, 0xFF	; 255
 d78:	9f ef       	ldi	r25, 0xFF	; 255
 d7a:	08 95       	ret
 d7c:	fc 01       	movw	r30, r24
 d7e:	44 89       	ldd	r20, Z+20	; 0x14
 d80:	55 89       	ldd	r21, Z+21	; 0x15
 d82:	66 89       	ldd	r22, Z+22	; 0x16
 d84:	77 89       	ldd	r23, Z+23	; 0x17
 d86:	45 2b       	or	r20, r21
 d88:	46 2b       	or	r20, r22
 d8a:	47 2b       	or	r20, r23
 d8c:	a1 f3       	breq	.-24     	; 0xd76 <CDC_Device_ReceiveByte+0x8>
 d8e:	86 81       	ldd	r24, Z+6	; 0x06
 d90:	8f 70       	andi	r24, 0x0F	; 15
 d92:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 d96:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d9a:	82 ff       	sbrs	r24, 2
 d9c:	ec cf       	rjmp	.-40     	; 0xd76 <CDC_Device_ReceiveByte+0x8>
 d9e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 da2:	88 23       	and	r24, r24
 da4:	69 f0       	breq	.+26     	; 0xdc0 <CDC_Device_ReceiveByte+0x52>
 da6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 daa:	90 e0       	ldi	r25, 0x00	; 0
 dac:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 db0:	21 11       	cpse	r18, r1
 db2:	05 c0       	rjmp	.+10     	; 0xdbe <CDC_Device_ReceiveByte+0x50>
 db4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 db8:	2b 77       	andi	r18, 0x7B	; 123
 dba:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 dbe:	08 95       	ret
 dc0:	8f ef       	ldi	r24, 0xFF	; 255
 dc2:	9f ef       	ldi	r25, 0xFF	; 255
 dc4:	f3 cf       	rjmp	.-26     	; 0xdac <CDC_Device_ReceiveByte+0x3e>

00000dc6 <CDC_Device_getchar>:
 dc6:	fc 01       	movw	r30, r24
 dc8:	84 85       	ldd	r24, Z+12	; 0x0c
 dca:	95 85       	ldd	r25, Z+13	; 0x0d
 dcc:	d0 df       	rcall	.-96     	; 0xd6e <CDC_Device_ReceiveByte>
 dce:	97 ff       	sbrs	r25, 7
 dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <CDC_Device_getchar+0x10>
 dd2:	8e ef       	ldi	r24, 0xFE	; 254
 dd4:	9f ef       	ldi	r25, 0xFF	; 255
 dd6:	08 95       	ret

00000dd8 <CDC_Device_CreateStream>:
 dd8:	fb 01       	movw	r30, r22
 dda:	2e e0       	ldi	r18, 0x0E	; 14
 ddc:	db 01       	movw	r26, r22
 dde:	1d 92       	st	X+, r1
 de0:	2a 95       	dec	r18
 de2:	e9 f7       	brne	.-6      	; 0xdde <CDC_Device_CreateStream+0x6>
 de4:	23 e0       	ldi	r18, 0x03	; 3
 de6:	23 83       	std	Z+3, r18	; 0x03
 de8:	26 e6       	ldi	r18, 0x66	; 102
 dea:	36 e0       	ldi	r19, 0x06	; 6
 dec:	31 87       	std	Z+9, r19	; 0x09
 dee:	20 87       	std	Z+8, r18	; 0x08
 df0:	23 ee       	ldi	r18, 0xE3	; 227
 df2:	36 e0       	ldi	r19, 0x06	; 6
 df4:	33 87       	std	Z+11, r19	; 0x0b
 df6:	22 87       	std	Z+10, r18	; 0x0a
 df8:	95 87       	std	Z+13, r25	; 0x0d
 dfa:	84 87       	std	Z+12, r24	; 0x0c
 dfc:	08 95       	ret

00000dfe <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
 dfe:	08 95       	ret

00000e00 <CDC_Device_ProcessControlRequest>:
{
 e00:	cf 93       	push	r28
 e02:	df 93       	push	r29
 e04:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (!(Endpoint_IsSETUPReceived()))
 e0a:	83 ff       	sbrs	r24, 3
 e0c:	10 c0       	rjmp	.+32     	; 0xe2e <CDC_Device_ProcessControlRequest+0x2e>
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 e0e:	28 81       	ld	r18, Y
 e10:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <USB_ControlRequest+0x4>
 e14:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <USB_ControlRequest+0x5>
 e18:	28 17       	cp	r18, r24
 e1a:	19 06       	cpc	r1, r25
 e1c:	41 f4       	brne	.+16     	; 0xe2e <CDC_Device_ProcessControlRequest+0x2e>
	switch (USB_ControlRequest.bRequest)
 e1e:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <USB_ControlRequest+0x1>
 e22:	81 32       	cpi	r24, 0x21	; 33
 e24:	e1 f0       	breq	.+56     	; 0xe5e <CDC_Device_ProcessControlRequest+0x5e>
 e26:	30 f4       	brcc	.+12     	; 0xe34 <CDC_Device_ProcessControlRequest+0x34>
 e28:	80 32       	cpi	r24, 0x20	; 32
 e2a:	09 f4       	brne	.+2      	; 0xe2e <CDC_Device_ProcessControlRequest+0x2e>
 e2c:	4d c0       	rjmp	.+154    	; 0xec8 <CDC_Device_ProcessControlRequest+0xc8>
}
 e2e:	df 91       	pop	r29
 e30:	cf 91       	pop	r28
 e32:	08 95       	ret
	switch (USB_ControlRequest.bRequest)
 e34:	82 32       	cpi	r24, 0x22	; 34
 e36:	09 f4       	brne	.+2      	; 0xe3a <CDC_Device_ProcessControlRequest+0x3a>
 e38:	79 c0       	rjmp	.+242    	; 0xf2c <CDC_Device_ProcessControlRequest+0x12c>
 e3a:	83 32       	cpi	r24, 0x23	; 35
 e3c:	c1 f7       	brne	.-16     	; 0xe2e <CDC_Device_ProcessControlRequest+0x2e>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 e3e:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <USB_ControlRequest>
 e42:	81 32       	cpi	r24, 0x21	; 33
 e44:	a1 f7       	brne	.-24     	; 0xe2e <CDC_Device_ProcessControlRequest+0x2e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 e4a:	87 7f       	andi	r24, 0xF7	; 247
 e4c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_ClearStatusStage();
 e50:	e1 db       	rcall	.-2110   	; 0x614 <Endpoint_ClearStatusStage>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 e52:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <USB_ControlRequest+0x2>
 e56:	ce 01       	movw	r24, r28
}
 e58:	df 91       	pop	r29
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 e5a:	cf 91       	pop	r28
 e5c:	d0 cf       	rjmp	.-96     	; 0xdfe <CDC_Device_Event_Stub>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 e5e:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <USB_ControlRequest>
 e62:	81 3a       	cpi	r24, 0xA1	; 161
 e64:	21 f7       	brne	.-56     	; 0xe2e <CDC_Device_ProcessControlRequest+0x2e>
 e66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 e6a:	87 7f       	andi	r24, 0xF7	; 247
 e6c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 e70:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				while (!(Endpoint_IsINReady()));
 e74:	80 ff       	sbrs	r24, 0
 e76:	fc cf       	rjmp	.-8      	; 0xe70 <CDC_Device_ProcessControlRequest+0x70>
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 e78:	8c 89       	ldd	r24, Y+20	; 0x14
 e7a:	9d 89       	ldd	r25, Y+21	; 0x15
 e7c:	ae 89       	ldd	r26, Y+22	; 0x16
 e7e:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 e80:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
 e84:	49 2f       	mov	r20, r25
 e86:	5a 2f       	mov	r21, r26
 e88:	6b 2f       	mov	r22, r27
 e8a:	77 27       	eor	r23, r23
 e8c:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 16);
 e90:	ad 01       	movw	r20, r26
 e92:	66 27       	eor	r22, r22
 e94:	77 27       	eor	r23, r23
 e96:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 24);
 e9a:	8b 2f       	mov	r24, r27
 e9c:	99 27       	eor	r25, r25
 e9e:	aa 27       	eor	r26, r26
 ea0:	bb 27       	eor	r27, r27
 ea2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 ea6:	88 8d       	ldd	r24, Y+24	; 0x18
				UEDATX = Data;
 ea8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 eac:	89 8d       	ldd	r24, Y+25	; 0x19
 eae:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 eb2:	8a 8d       	ldd	r24, Y+26	; 0x1a
 eb4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 eb8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 ebc:	8e 77       	andi	r24, 0x7E	; 126
 ebe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
}
 ec2:	df 91       	pop	r29
				Endpoint_ClearStatusStage();
 ec4:	cf 91       	pop	r28
 ec6:	a6 cb       	rjmp	.-2228   	; 0x614 <Endpoint_ClearStatusStage>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ec8:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <USB_ControlRequest>
 ecc:	81 32       	cpi	r24, 0x21	; 33
 ece:	09 f0       	breq	.+2      	; 0xed2 <CDC_Device_ProcessControlRequest+0xd2>
 ed0:	ae cf       	rjmp	.-164    	; 0xe2e <CDC_Device_ProcessControlRequest+0x2e>
				UEINTX &= ~(1 << RXSTPI);
 ed2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 ed6:	87 7f       	andi	r24, 0xF7	; 247
 ed8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 edc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				while (!(Endpoint_IsOUTReceived()))
 ee0:	82 ff       	sbrs	r24, 2
 ee2:	1f c0       	rjmp	.+62     	; 0xf22 <CDC_Device_ProcessControlRequest+0x122>
				Data.Bytes[0] = UEDATX;
 ee4:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[1] = UEDATX;
 ee8:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[2] = UEDATX;
 eec:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[3] = UEDATX;
 ef0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 ef4:	3c 8b       	std	Y+20, r19	; 0x14
 ef6:	2d 8b       	std	Y+21, r18	; 0x15
 ef8:	9e 8b       	std	Y+22, r25	; 0x16
 efa:	8f 8b       	std	Y+23, r24	; 0x17
				return UEDATX;
 efc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 f00:	88 8f       	std	Y+24, r24	; 0x18
 f02:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 f06:	89 8f       	std	Y+25, r24	; 0x19
 f08:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 f0c:	8a 8f       	std	Y+26, r24	; 0x1a
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 f0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 f12:	8b 77       	andi	r24, 0x7B	; 123
 f14:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 f18:	7d db       	rcall	.-2310   	; 0x614 <Endpoint_ClearStatusStage>
}
 f1a:	ce 01       	movw	r24, r28
 f1c:	df 91       	pop	r29
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 f1e:	cf 91       	pop	r28
 f20:	6e cf       	rjmp	.-292    	; 0xdfe <CDC_Device_Event_Stub>
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 f22:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <USB_DeviceState>
 f26:	81 11       	cpse	r24, r1
 f28:	d9 cf       	rjmp	.-78     	; 0xedc <CDC_Device_ProcessControlRequest+0xdc>
 f2a:	81 cf       	rjmp	.-254    	; 0xe2e <CDC_Device_ProcessControlRequest+0x2e>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f2c:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <USB_ControlRequest>
 f30:	81 32       	cpi	r24, 0x21	; 33
 f32:	09 f0       	breq	.+2      	; 0xf36 <CDC_Device_ProcessControlRequest+0x136>
 f34:	7c cf       	rjmp	.-264    	; 0xe2e <CDC_Device_ProcessControlRequest+0x2e>
				UEINTX &= ~(1 << RXSTPI);
 f36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 f3a:	87 7f       	andi	r24, 0xF7	; 247
 f3c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_ClearStatusStage();
 f40:	69 db       	rcall	.-2350   	; 0x614 <Endpoint_ClearStatusStage>
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 f42:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <USB_ControlRequest+0x2>
 f46:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <USB_ControlRequest+0x3>
 f4a:	99 8b       	std	Y+17, r25	; 0x11
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 f4c:	88 8b       	std	Y+16, r24	; 0x10
}
 f4e:	ce 01       	movw	r24, r28
 f50:	df 91       	pop	r29
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 f52:	cf 91       	pop	r28
 f54:	23 c9       	rjmp	.-3514   	; 0x19c <EVENT_CDC_Device_ControLineStateChanged>

00000f56 <_exit>:
 f56:	f8 94       	cli

00000f58 <__stop_program>:
 f58:	ff cf       	rjmp	.-2      	; 0xf58 <__stop_program>
