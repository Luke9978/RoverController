/*
atmega16u2

^^^ may need to change this ^^^
*/

#define F_CPU 8000000UL

#include <avr/io.h> 
#include <util/delay.h> 
#include <stdbool.h>

#define startMsgLen 6
#define endMsgLen 2
#define gpsBufferSize 600
#define startMsg "$GPGLL"
#define endMsg 0x0D

int bufferIndex = 0;
char gpsBuffer[gpsBufferSize] = {}; //"circular" buffer for incoming gps data << not actually circular at this point, instead the buffer is made larger than needed

int main() {
  while (1) {
    /* if (transmitGps) { //PUT STUFF IN BUFFER
    gpsSerial.listen();
    while (gpsSerial.available() > 1) {
      char data = gpsSerial.read();
      if (gpsDirect) {
        Serial.write(data);
      } else {
        gpsBuffer[bufferIndex] = data;
        if (bufferIndex < gpsBufferSize) {
          bufferIndex ++;
        }
      }
    }*/
    int startPt = 0;
    int j;
    for (j = 0; j < gpsBufferSize; j++) {
      int i;
      for (i = 0; i < startMsgLen; i++) {
        if (gpsBuffer[j] == startMsg[i] && i == startMsgLen - 1) {
          startPt = j + 2;
          j = gpsBufferSize; //break out of both loops
        }
      }
    }
    int endPt = 0;
    int j;
    for (j = startPt + 3; j < gpsBufferSize; j++) {
      if (gpsBuffer[j] == endMsg) {
        endPt = j;
        j = gpsBufferSize; //break out of both loops
      }
    }
    //Serial.println(endPt);
    //Serial.println(startPt);
    bufferIndex = 0;
    if (startPt != 0 && endPt != 0) {
        bool validLock = true;
        int i;
        for (i = startPt; i < endPt; i++) {
          if (gpsBuffer[i] == ',' && gpsBuffer[i + 1] == ',' && gpsBuffer[i + 2] == ',' && i < startPt + 10) {
            //Serial.println(i);
            validLock = false;
          }
        }
        if (validLock) {
          uart1_putchar('l'); //Serial.print("LAT: ");
          int i;
          for (i = startPt; i < endPt && gpsBuffer[i] != 0x0A; i++) {

            if (gpsBuffer[i] == ',' && (gpsBuffer[i + 1] == 'N' || gpsBuffer[i + 1] == 'S') && gpsBuffer[i + 2] == ',') { //fix N and S notation
              Serial.print(" ");
              Serial.println(gpsBuffer[i + 1]);
              uart1_putchar('l'); //Serial.print("LON: ");
              i = i + 3;
            }
            if (gpsBuffer[i] == ',' && (gpsBuffer[i + 1] == 'E' || gpsBuffer[i + 1] == 'W') && gpsBuffer[i + 2] == ',') { //fix E and W notation
              uart1_putchar(' '); //Serial.print(" ");
              uart1_putchar(gpsBuffer[i + 1]; //Serial.print(gpsBuffer[i + 1]);
                i = endPt; //break from loop
              }
              if (gpsBuffer[i] != ',') { //don't print commas
                uart1_putchar(gpsBuffer[i]; //Serial.print(gpsBuffer[i]);
                }
              }
            } else {
              uart1_putchar('!'); //Serial.print("NO LOCK");
            }
          int i;
          for (i = 0; i < gpsBufferSize; i++) {
            gpsBuffer[i] = ' ';
          }
          uart1_putchar('\n'); //Serial.println("");
        }
      }
    }
  }
}
