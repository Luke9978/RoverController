/*
atmega16u2

^^^ may need to change this ^^^
*/

#define F_CPU 8000000UL

#include <avr/io.h> 
#include <util/delay.h> 
#include <stdbool.h>
#include <avr/power.h>
#include <avr/interrupt.h>

void uart1_init(void) { //9600 baud
  UCSR1C |= ((1 << UCSZ11) | (1 << UCSZ10));
  UCSR1B |= ((1 << RXEN1) | (1 << TXEN1));
  UBRR1L |= 51; //value 51 from Table 18-8 in ATTiny841 datasheet
}
void uart1_putchar(char c) {
  loop_until_bit_is_set(UCSR1A, UDRE1);
  UDR1 = c;
}

char uart1_getchar(void) {
  loop_until_bit_is_set(UCSR1A, RXC1); /* Wait until data exists. */
  return UDR1;
}

void delay_ms(uint16_t count) {
  while (count--) {
    _delay_ms(1);
  }
}

void delay_us(uint16_t count) {
  while (count--) {
    _delay_us(1);
  }
}

void enable_RX_int() {
  UCSR1B |= (1 << RXCIE1);
}

void disable_RX_int() {
  UCSR1B &= ~(1 << RXCIE1);
}

int gpsSM = 0;
#define gpsBufferLength 100
char gpsBuffer[gpsBufferLength] = {};
int gpsBufferIndex = 0;
ISR(USART1_RX_vect) {
    cli();
    loop_until_bit_is_set(UCSR1A, RXC1); /* Wait until data exists. */
    char data = UDR1;
    switch (gpsSM) {
    case 6: //put data into GPS buffer //needs flag to prevent parsing during interrupt
      if (data != 0x0D && gpsBufferIndex < gpsBufferLength) { //detect newline and prevent overflow
        gpsBuffer[gpsBufferIndex++] = data;
      } else { //parse data and reset state machine
        bool validLock = true;
        int i;
        for (i = 0; i < gpsBufferLength; i++) { //determine valid lock
          if (gpsBuffer[i] == ',' && gpsBuffer[i + 1] == ',' && gpsBuffer[i + 2] == ',' && i < startPt + 10) {
            validLock = false;
          }
        }
        if (validLock) {

          for (i = 0; i < gpsBufferLength && gpsBuffer[i] != '_' && gpsBuffer[i]; i++) {
            if (gpsBuffer[i] != ',') {
              uart1_putchar(gpsBuffer[i];
              }
            }
          }
          }
          for (i = 0; i < gpsBufferLength; i++) {
            gpsBuffer[i] = '_';
          }
          gpsBufferIndex = 0;
          gpsSM = 0;
        }
        break;
      case 5:
        if (data == 'L') {
          gpsSM++;
          uart1_putchar('e');
        } else {
          gpsSM = 0;
        }
        break;
      case 4:
        if (data == 'L') {
          gpsSM++;
        } else {
          gpsSM = 0;
        }
        break;
      case 3:
        if (data == 'G') {
          gpsSM++;
        } else {
          gpsSM = 0;
        }
        break;
      case 2:
        if (data == 'P') {
          gpsSM++;
        } else {
          gpsSM = 0;
        }
        break;
      case 1:
        if (data == 'G') {
          gpsSM++;
        } else {
          gpsSM = 0;
        }
        break;
      case 0:
        if (data == '$') {
          gpsSM++;
        } else {
          gpsSM = 0;
        }
        break;
      }
      sei();
    }

    int main() {
      clock_prescale_set(clock_div_1);
      uart1_init();
      enable_RX_int();
      sei();
      PORTB |= (1 << PB0); //pull up resistor
      while (1) {
        if (!PINB & (1 << PB0)) { //only parse when PB0 is low
          int z;
          for (z = 0; z < gpsBufferLength && gpsBuffer[z]; z++) {
            uart1_putchar(gpsBuffer[z]);
          }
        }
      }
    }