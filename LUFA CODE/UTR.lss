
UTR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001076  0000110a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001076  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080011c  0080011c  00001126  2**0
                  ALLOC
  3 .comment      00000033  00000000  00000000  00001126  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000115c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000360  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006c61  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f4b  00000000  00000000  0000815d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000374b  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009bc  00000000  00000000  0000d7f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002712  00000000  00000000  0000e1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004158  00000000  00000000  000108c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000660  00000000  00000000  00014a1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7d c0       	rjmp	.+250    	; 0xfc <__ctors_end>
       2:	00 00       	nop
       4:	96 c0       	rjmp	.+300    	; 0x132 <__bad_interrupt>
       6:	00 00       	nop
       8:	94 c0       	rjmp	.+296    	; 0x132 <__bad_interrupt>
       a:	00 00       	nop
       c:	92 c0       	rjmp	.+292    	; 0x132 <__bad_interrupt>
       e:	00 00       	nop
      10:	90 c0       	rjmp	.+288    	; 0x132 <__bad_interrupt>
      12:	00 00       	nop
      14:	8e c0       	rjmp	.+284    	; 0x132 <__bad_interrupt>
      16:	00 00       	nop
      18:	8c c0       	rjmp	.+280    	; 0x132 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8a c0       	rjmp	.+276    	; 0x132 <__bad_interrupt>
      1e:	00 00       	nop
      20:	88 c0       	rjmp	.+272    	; 0x132 <__bad_interrupt>
      22:	00 00       	nop
      24:	86 c0       	rjmp	.+268    	; 0x132 <__bad_interrupt>
      26:	00 00       	nop
      28:	84 c0       	rjmp	.+264    	; 0x132 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3e c3       	rjmp	.+1660   	; 0x6aa <__vector_11>
      2e:	00 00       	nop
      30:	e5 c3       	rjmp	.+1994   	; 0x7fc <__vector_12>
      32:	00 00       	nop
      34:	7e c0       	rjmp	.+252    	; 0x132 <__bad_interrupt>
      36:	00 00       	nop
      38:	7c c0       	rjmp	.+248    	; 0x132 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7a c0       	rjmp	.+244    	; 0x132 <__bad_interrupt>
      3e:	00 00       	nop
      40:	78 c0       	rjmp	.+240    	; 0x132 <__bad_interrupt>
      42:	00 00       	nop
      44:	76 c0       	rjmp	.+236    	; 0x132 <__bad_interrupt>
      46:	00 00       	nop
      48:	74 c0       	rjmp	.+232    	; 0x132 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	72 c0       	rjmp	.+228    	; 0x132 <__bad_interrupt>
      4e:	00 00       	nop
      50:	70 c0       	rjmp	.+224    	; 0x132 <__bad_interrupt>
      52:	00 00       	nop
      54:	d5 c0       	rjmp	.+426    	; 0x200 <__vector_21>
      56:	00 00       	nop
      58:	6c c0       	rjmp	.+216    	; 0x132 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6a c0       	rjmp	.+212    	; 0x132 <__bad_interrupt>
      5e:	00 00       	nop
      60:	68 c0       	rjmp	.+208    	; 0x132 <__bad_interrupt>
      62:	00 00       	nop
      64:	66 c0       	rjmp	.+204    	; 0x132 <__bad_interrupt>
      66:	00 00       	nop
      68:	64 c0       	rjmp	.+200    	; 0x132 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	62 c0       	rjmp	.+196    	; 0x132 <__bad_interrupt>
      6e:	00 00       	nop
      70:	60 c0       	rjmp	.+192    	; 0x132 <__bad_interrupt>
      72:	00 00       	nop

00000074 <ProductString>:
      74:	18 03 55 00 54 00 20 00 52 00 4f 00 43 00 4b 00     ..U.T. .R.O.C.K.
      84:	45 00 54 00 52 00 59 00 00 00                       E.T.R.Y...

0000008e <ManufacturerString>:
      8e:	18 03 55 00 54 00 20 00 52 00 4f 00 43 00 4b 00     ..U.T. .R.O.C.K.
      9e:	45 00 54 00 52 00 59 00 00 00                       E.T.R.Y...

000000a8 <LanguageString>:
      a8:	04 03 09 04                                         ....

000000ac <ConfigurationDescriptor>:
      ac:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      bc:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      cc:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      dc:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000ea <DeviceDescriptor>:
      ea:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
      fa:	dc 01                                               ..

000000fc <__ctors_end>:
      fc:	11 24       	eor	r1, r1
      fe:	1f be       	out	0x3f, r1	; 63
     100:	cf ef       	ldi	r28, 0xFF	; 255
     102:	d4 e0       	ldi	r29, 0x04	; 4
     104:	de bf       	out	0x3e, r29	; 62
     106:	cd bf       	out	0x3d, r28	; 61

00000108 <__do_copy_data>:
     108:	11 e0       	ldi	r17, 0x01	; 1
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	e6 e7       	ldi	r30, 0x76	; 118
     110:	f0 e1       	ldi	r31, 0x10	; 16
     112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x10>
     114:	05 90       	lpm	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	ac 31       	cpi	r26, 0x1C	; 28
     11a:	b1 07       	cpc	r27, r17
     11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0xc>

0000011e <__do_clear_bss>:
     11e:	21 e0       	ldi	r18, 0x01	; 1
     120:	ac e1       	ldi	r26, 0x1C	; 28
     122:	b1 e0       	ldi	r27, 0x01	; 1
     124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
     126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
     128:	a8 33       	cpi	r26, 0x38	; 56
     12a:	b2 07       	cpc	r27, r18
     12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>
     12e:	98 d0       	rcall	.+304    	; 0x260 <main>
     130:	a0 c7       	rjmp	.+3904   	; 0x1072 <_exit>

00000132 <__bad_interrupt>:
     132:	66 cf       	rjmp	.-308    	; 0x0 <__vectors>

00000134 <SetupHardware>:
	fputs(dataMSB, &USBSerialStream);
	fputs(dataLSB, &USBSerialStream);
	PORTD &= ~(1 << DDD0); //set PD0 low*/
}
void SetupHardware(void) {
	MCUSR &= ~(1 << WDRF);
     134:	84 b7       	in	r24, 0x34	; 52
     136:	87 7f       	andi	r24, 0xF7	; 247
     138:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	a8 95       	wdr
     140:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     144:	88 61       	ori	r24, 0x18	; 24
     146:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     14a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     14e:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     150:	80 e8       	ldi	r24, 0x80	; 128
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0f b6       	in	r0, 0x3f	; 63
     156:	f8 94       	cli
     158:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     15c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     160:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	clock_prescale_set(clock_div_1);
	USB_Init();
     162:	94 c2       	rjmp	.+1320   	; 0x68c <USB_Init>

00000164 <EVENT_USB_Device_Connect>:
}
void EVENT_USB_Device_Connect(void) {
	PORTD |= (1 << DDD0); //set PD0 high
     164:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     166:	2f ef       	ldi	r18, 0xFF	; 255
     168:	80 e7       	ldi	r24, 0x70	; 112
     16a:	92 e0       	ldi	r25, 0x02	; 2
     16c:	21 50       	subi	r18, 0x01	; 1
     16e:	80 40       	sbci	r24, 0x00	; 0
     170:	90 40       	sbci	r25, 0x00	; 0
     172:	e1 f7       	brne	.-8      	; 0x16c <EVENT_USB_Device_Connect+0x8>
     174:	00 c0       	rjmp	.+0      	; 0x176 <EVENT_USB_Device_Connect+0x12>
     176:	00 00       	nop
	_delay_ms(100);
	PORTD &= ~(1 << DDD0); //set PD0 low
     178:	58 98       	cbi	0x0b, 0	; 11
     17a:	2f ef       	ldi	r18, 0xFF	; 255
     17c:	80 e7       	ldi	r24, 0x70	; 112
     17e:	92 e0       	ldi	r25, 0x02	; 2
     180:	21 50       	subi	r18, 0x01	; 1
     182:	80 40       	sbci	r24, 0x00	; 0
     184:	90 40       	sbci	r25, 0x00	; 0
     186:	e1 f7       	brne	.-8      	; 0x180 <EVENT_USB_Device_Connect+0x1c>
     188:	00 c0       	rjmp	.+0      	; 0x18a <EVENT_USB_Device_Connect+0x26>
     18a:	00 00       	nop
	_delay_ms(100);
}
     18c:	08 95       	ret

0000018e <EVENT_USB_Device_Disconnect>:
     18e:	ea cf       	rjmp	.-44     	; 0x164 <EVENT_USB_Device_Connect>

00000190 <EVENT_USB_Device_ConfigurationChanged>:
	_delay_ms(100);
}

void EVENT_USB_Device_ConfigurationChanged(void) {
	bool ConfigSuccess = true;
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	91 e0       	ldi	r25, 0x01	; 1
     194:	e5 c4       	rjmp	.+2506   	; 0xb60 <CDC_Device_ConfigureEndpoints>

00000196 <EVENT_USB_Device_ControlRequest>:
}

void EVENT_USB_Device_ControlRequest(void) {
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	91 e0       	ldi	r25, 0x01	; 1
     19a:	c8 c5       	rjmp	.+2960   	; 0xd2c <CDC_Device_ProcessControlRequest>

0000019c <EVENT_CDC_Device_ControLineStateChanged>:
}

void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t *const CDCInterfaceInfo) {
	bool HostReady = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR) != 0;
	if (HostReady) { transferData(); }
}
     19c:	08 95       	ret

0000019e <SPI_MasterInit>:

void sendSerial(char rec) {
	CDC_Device_SendString(&VirtualSerial_CDC_Interface, &rec);
}
void SPI_MasterInit(void){
	DDRB |= (1<<DDB1)|(1<<DDB2)|(1<<DDB0);
     19e:	84 b1       	in	r24, 0x04	; 4
     1a0:	87 60       	ori	r24, 0x07	; 7
     1a2:	84 b9       	out	0x04, r24	; 4
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     1a4:	8c b5       	in	r24, 0x2c	; 44
     1a6:	81 65       	ori	r24, 0x51	; 81
     1a8:	8c bd       	out	0x2c, r24	; 44
}
     1aa:	08 95       	ret

000001ac <SPI_RW_8>:

adding 128 to an int sets register to write instead of read
*/

char SPI_RW_8(unsigned char reg_A,unsigned char reg_D, int read){
	PORTB &= ~(1<<DDB5); //SS low
     1ac:	2d 98       	cbi	0x05, 5	; 5
	if(read==1){
     1ae:	41 30       	cpi	r20, 0x01	; 1
     1b0:	51 05       	cpc	r21, r1
     1b2:	59 f4       	brne	.+22     	; 0x1ca <SPI_RW_8+0x1e>
		SPDR = reg_A;
	}else{
		
		SPDR = reg_A | 0b1000000;
     1b4:	8e bd       	out	0x2e, r24	; 46
	}
	while(!(SPSR & (1<<SPIF)));
     1b6:	0d b4       	in	r0, 0x2d	; 45
     1b8:	07 fe       	sbrs	r0, 7
     1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <SPI_RW_8+0xa>
	SPDR = reg_D;
     1bc:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1<<SPIF)));
     1be:	0d b4       	in	r0, 0x2d	; 45
     1c0:	07 fe       	sbrs	r0, 7
     1c2:	fd cf       	rjmp	.-6      	; 0x1be <SPI_RW_8+0x12>
	PORTB |= (1<<DDB5); //SS high
     1c4:	2d 9a       	sbi	0x05, 5	; 5
	return SPDR;
     1c6:	8e b5       	in	r24, 0x2e	; 46
}
     1c8:	08 95       	ret
		SPDR = reg_A | 0b1000000;
     1ca:	80 64       	ori	r24, 0x40	; 64
     1cc:	f3 cf       	rjmp	.-26     	; 0x1b4 <SPI_RW_8+0x8>

000001ce <SPI_RW_A16_R8>:
char SPI_RW_A16_R8(uint16_t reg_A,unsigned char reg_D, int read){
	uint8_t reg_A_upper = reg_A >> 8;
	uint8_t reg_A_lower = reg_A;
    PORTB &= ~(1<<DDB5); //SS low
     1ce:	2d 98       	cbi	0x05, 5	; 5
	if(read==1){
     1d0:	41 30       	cpi	r20, 0x01	; 1
     1d2:	51 05       	cpc	r21, r1
     1d4:	59 f4       	brne	.+22     	; 0x1ec <SPI_RW_A16_R8+0x1e>
		SPDR = reg_A_upper;
     1d6:	9e bd       	out	0x2e, r25	; 46
		while(!(SPSR & (1<<SPIF)));
     1d8:	0d b4       	in	r0, 0x2d	; 45
     1da:	07 fe       	sbrs	r0, 7
     1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <SPI_RW_A16_R8+0xa>
		SPDR = reg_A_lower;
     1de:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1<<SPIF)));
     1e0:	0d b4       	in	r0, 0x2d	; 45
     1e2:	07 fe       	sbrs	r0, 7
     1e4:	fd cf       	rjmp	.-6      	; 0x1e0 <SPI_RW_A16_R8+0x12>
		SPDR = reg_A_upper | 0x80;
		while(!(SPSR & (1<<SPIF)));
		SPDR = reg_A_lower;
		while(!(SPSR & (1<<SPIF)));
	}
    PORTB |= (1<<DDB5); //SS high
     1e6:	2d 9a       	sbi	0x05, 5	; 5
	return SPDR;
     1e8:	8e b5       	in	r24, 0x2e	; 46
}
     1ea:	08 95       	ret
		SPDR = reg_A_upper | 0x80;
     1ec:	90 68       	ori	r25, 0x80	; 128
     1ee:	9e bd       	out	0x2e, r25	; 46
		while(!(SPSR & (1<<SPIF)));
     1f0:	0d b4       	in	r0, 0x2d	; 45
     1f2:	07 fe       	sbrs	r0, 7
     1f4:	fd cf       	rjmp	.-6      	; 0x1f0 <SPI_RW_A16_R8+0x22>
		SPDR = reg_A_lower;
     1f6:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1<<SPIF)));
     1f8:	0d b4       	in	r0, 0x2d	; 45
     1fa:	07 fe       	sbrs	r0, 7
     1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <SPI_RW_A16_R8+0x2a>
     1fe:	f3 cf       	rjmp	.-26     	; 0x1e6 <SPI_RW_A16_R8+0x18>

00000200 <__vector_21>:
ISR(TIMER0_OVF_vect) { //moved from main loop to timer .1 second / (8Mhz / 1024 prescale) = 12.8
     200:	1f 92       	push	r1
     202:	0f 92       	push	r0
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	0f 92       	push	r0
     208:	11 24       	eor	r1, r1
     20a:	2f 93       	push	r18
     20c:	3f 93       	push	r19
     20e:	4f 93       	push	r20
     210:	5f 93       	push	r21
     212:	6f 93       	push	r22
     214:	7f 93       	push	r23
     216:	8f 93       	push	r24
     218:	9f 93       	push	r25
     21a:	af 93       	push	r26
     21c:	bf 93       	push	r27
     21e:	ef 93       	push	r30
     220:	ff 93       	push	r31
					   /*HANDLE USB COMMUNICATIONS*/
	cli();
     222:	f8 94       	cli
	USBint++;
     224:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     228:	8f 5f       	subi	r24, 0xFF	; 255
     22a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	//if (USBint > 3){
	//USBint = 0;
	CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	33 d5       	rcall	.+2662   	; 0xc9a <CDC_Device_ReceiveByte>
	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	91 e0       	ldi	r25, 0x01	; 1
	USB_USBTask();
     238:	1a d5       	rcall	.+2612   	; 0xc6e <CDC_Device_USBTask>
     23a:	77 d4       	rcall	.+2286   	; 0xb2a <USB_USBTask>
	sei();
     23c:	78 94       	sei
}
     23e:	ff 91       	pop	r31
     240:	ef 91       	pop	r30
     242:	bf 91       	pop	r27
     244:	af 91       	pop	r26
     246:	9f 91       	pop	r25
     248:	8f 91       	pop	r24
     24a:	7f 91       	pop	r23
     24c:	6f 91       	pop	r22
     24e:	5f 91       	pop	r21
     250:	4f 91       	pop	r20
     252:	3f 91       	pop	r19
     254:	2f 91       	pop	r18
     256:	0f 90       	pop	r0
     258:	0f be       	out	0x3f, r0	; 63
     25a:	0f 90       	pop	r0
     25c:	1f 90       	pop	r1
     25e:	18 95       	reti

00000260 <main>:
    fputs(buffer, &USBSerialStream);
    fputs("\n", &USBSerialStream);
}
int main(void){
	//INIT CODE 
	TCCR0B |= ((1 << CS02) | (1 << CS00)); //Table 15-9 clk/1024 prescale
     260:	85 b5       	in	r24, 0x25	; 37
     262:	85 60       	ori	r24, 0x05	; 5
     264:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0); //timer 0 overflow interrupt enable
     266:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     26a:	81 60       	ori	r24, 0x01	; 1
     26c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
	DDRB |= (1 << AX_SS_PIN); //set PB0 output
     270:	25 9a       	sbi	0x04, 5	; 4
	DDRD |= (1 << DDD5); //set PD0 output
     272:	55 9a       	sbi	0x0a, 5	; 10
	PORTB |= (1 << AX_SS_PIN); //SS high
     274:	2d 9a       	sbi	0x05, 5	; 5
	sei(); // Set interputs 
     276:	78 94       	sei
	SetupHardware(); //USB init 
     278:	5d df       	rcall	.-326    	; 0x134 <SetupHardware>
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream); //Init USB stream
     27a:	6d e1       	ldi	r22, 0x1D	; 29
     27c:	71 e0       	ldi	r23, 0x01	; 1
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	40 d5       	rcall	.+2688   	; 0xd04 <CDC_Device_CreateStream>
     284:	2f ef       	ldi	r18, 0xFF	; 255
     286:	8d e3       	ldi	r24, 0x3D	; 61
     288:	99 e4       	ldi	r25, 0x49	; 73
     28a:	21 50       	subi	r18, 0x01	; 1
     28c:	80 40       	sbci	r24, 0x00	; 0
     28e:	90 40       	sbci	r25, 0x00	; 0
     290:	e1 f7       	brne	.-8      	; 0x28a <main+0x2a>
     292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x34>
     294:	00 00       	nop
    _delay_ms(3000);
    fputs('b',&USBSerialStream);
     296:	6d e1       	ldi	r22, 0x1D	; 29
     298:	71 e0       	ldi	r23, 0x01	; 1
     29a:	82 e6       	ldi	r24, 0x62	; 98
     29c:	90 e0       	ldi	r25, 0x00	; 0
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     29e:	a5 d6       	rcall	.+3402   	; 0xfea <fputs>
	GlobalInterruptEnable();
	SPI_MasterInit(); // Turns AVR device into SPI Master
     2a0:	78 94       	sei
     2a2:	7d df       	rcall	.-262    	; 0x19e <SPI_MasterInit>
	//END OF INIT CODE
    while(ax_check_comms()!=1){ax_bootup();}
     2a4:	34 d6       	rcall	.+3176   	; 0xf0e <ax_check_comms>
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	81 f4       	brne	.+32     	; 0x2ca <main+0x6a>
    fputs('i',&USBSerialStream);
     2aa:	6d e1       	ldi	r22, 0x1D	; 29
     2ac:	71 e0       	ldi	r23, 0x01	; 1
     2ae:	89 e6       	ldi	r24, 0x69	; 105
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	9b d6       	rcall	.+3382   	; 0xfea <fputs>
     2b4:	2f ef       	ldi	r18, 0xFF	; 255
     2b6:	89 e6       	ldi	r24, 0x69	; 105
     2b8:	98 e1       	ldi	r25, 0x18	; 24
     2ba:	21 50       	subi	r18, 0x01	; 1
     2bc:	80 40       	sbci	r24, 0x00	; 0
     2be:	90 40       	sbci	r25, 0x00	; 0
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <main+0x5a>
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0x64>
	
    while(true){
      // ax_send_data();
       //fputs("Data sent.",&USBSerialStream);
       //sendSerial(text);
       char * datac = ax_read_packet();
     2c4:	00 00       	nop
     2c6:	dd d5       	rcall	.+3002   	; 0xe82 <ax_read_packet>
     2c8:	f5 cf       	rjmp	.-22     	; 0x2b4 <main+0x54>
    while(ax_check_comms()!=1){ax_bootup();}
     2ca:	31 d6       	rcall	.+3170   	; 0xf2e <ax_bootup>
     2cc:	eb cf       	rjmp	.-42     	; 0x2a4 <main+0x44>

000002ce <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     2ce:	29 2f       	mov	r18, r25
     2d0:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     2d2:	22 30       	cpi	r18, 0x02	; 2
     2d4:	31 05       	cpc	r19, r1
     2d6:	71 f0       	breq	.+28     	; 0x2f4 <CALLBACK_USB_GetDescriptor+0x26>
     2d8:	23 30       	cpi	r18, 0x03	; 3
     2da:	31 05       	cpc	r19, r1
     2dc:	81 f0       	breq	.+32     	; 0x2fe <CALLBACK_USB_GetDescriptor+0x30>
     2de:	21 30       	cpi	r18, 0x01	; 1
     2e0:	31 05       	cpc	r19, r1
     2e2:	a1 f4       	brne	.+40     	; 0x30c <CALLBACK_USB_GetDescriptor+0x3e>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     2e4:	82 e1       	ldi	r24, 0x12	; 18
     2e6:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
     2e8:	2a ee       	ldi	r18, 0xEA	; 234
     2ea:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     2ec:	fa 01       	movw	r30, r20
     2ee:	31 83       	std	Z+1, r19	; 0x01
     2f0:	20 83       	st	Z, r18
	return Size;
}
     2f2:	08 95       	ret
			Size    = sizeof(USB_Descriptor_Configuration_t);
     2f4:	8e e3       	ldi	r24, 0x3E	; 62
     2f6:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
     2f8:	2c ea       	ldi	r18, 0xAC	; 172
     2fa:	30 e0       	ldi	r19, 0x00	; 0
			break;
     2fc:	f7 cf       	rjmp	.-18     	; 0x2ec <CALLBACK_USB_GetDescriptor+0x1e>
			switch (DescriptorNumber)
     2fe:	99 27       	eor	r25, r25
     300:	81 30       	cpi	r24, 0x01	; 1
     302:	91 05       	cpc	r25, r1
     304:	71 f0       	breq	.+28     	; 0x322 <CALLBACK_USB_GetDescriptor+0x54>
     306:	38 f0       	brcs	.+14     	; 0x316 <CALLBACK_USB_GetDescriptor+0x48>
     308:	02 97       	sbiw	r24, 0x02	; 2
     30a:	71 f0       	breq	.+28     	; 0x328 <CALLBACK_USB_GetDescriptor+0x5a>
	uint16_t    Size    = NO_DESCRIPTOR;
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	80 e0       	ldi	r24, 0x00	; 0
	const void* Address = NULL;
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	eb cf       	rjmp	.-42     	; 0x2ec <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     316:	e8 ea       	ldi	r30, 0xA8	; 168
     318:	f0 e0       	ldi	r31, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
     31a:	84 91       	lpm	r24, Z
     31c:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
     31e:	9f 01       	movw	r18, r30
					break;
     320:	e5 cf       	rjmp	.-54     	; 0x2ec <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     322:	ee e8       	ldi	r30, 0x8E	; 142
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	f9 cf       	rjmp	.-14     	; 0x31a <CALLBACK_USB_GetDescriptor+0x4c>
					Size    = pgm_read_byte(&ProductString.Header.Size);
     328:	e4 e7       	ldi	r30, 0x74	; 116
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	f6 cf       	rjmp	.-20     	; 0x31a <CALLBACK_USB_GetDescriptor+0x4c>

0000032e <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     32e:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     330:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <USB_ControlRequest+0x6>
     334:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <USB_ControlRequest+0x7>
     338:	86 17       	cp	r24, r22
     33a:	97 07       	cpc	r25, r23
     33c:	a0 f0       	brcs	.+40     	; 0x366 <Endpoint_Write_Control_Stream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     33e:	61 15       	cp	r22, r1
     340:	71 05       	cpc	r23, r1
     342:	29 f4       	brne	.+10     	; 0x34e <Endpoint_Write_Control_Stream_LE+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     344:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     348:	9e 77       	andi	r25, 0x7E	; 126
     34a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     34e:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     350:	61 15       	cp	r22, r1
     352:	71 05       	cpc	r23, r1
     354:	51 f4       	brne	.+20     	; 0x36a <Endpoint_Write_Control_Stream_LE+0x3c>
     356:	91 11       	cpse	r25, r1
     358:	08 c0       	rjmp	.+16     	; 0x36a <Endpoint_Write_Control_Stream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     35a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     35e:	82 ff       	sbrs	r24, 2
     360:	32 c0       	rjmp	.+100    	; 0x3c6 <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	08 95       	ret
     366:	bc 01       	movw	r22, r24
     368:	f2 cf       	rjmp	.-28     	; 0x34e <Endpoint_Write_Control_Stream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     36a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     36e:	88 23       	and	r24, r24
     370:	b1 f1       	breq	.+108    	; 0x3de <Endpoint_Write_Control_Stream_LE+0xb0>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     372:	85 30       	cpi	r24, 0x05	; 5
     374:	b1 f1       	breq	.+108    	; 0x3e2 <Endpoint_Write_Control_Stream_LE+0xb4>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     376:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
     37a:	83 fd       	sbrc	r24, 3
     37c:	2e c0       	rjmp	.+92     	; 0x3da <Endpoint_Write_Control_Stream_LE+0xac>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     37e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsOUTReceived())
     382:	82 fd       	sbrc	r24, 2
     384:	ea cf       	rjmp	.-44     	; 0x35a <Endpoint_Write_Control_Stream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     386:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsINReady())
     38a:	80 ff       	sbrs	r24, 0
     38c:	e1 cf       	rjmp	.-62     	; 0x350 <Endpoint_Write_Control_Stream_LE+0x22>
					return UEBCLX;
     38e:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     392:	30 e0       	ldi	r19, 0x00	; 0
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     394:	61 15       	cp	r22, r1
     396:	71 05       	cpc	r23, r1
     398:	19 f0       	breq	.+6      	; 0x3a0 <Endpoint_Write_Control_Stream_LE+0x72>
     39a:	28 30       	cpi	r18, 0x08	; 8
     39c:	31 05       	cpc	r19, r1
     39e:	58 f0       	brcs	.+22     	; 0x3b6 <Endpoint_Write_Control_Stream_LE+0x88>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	28 30       	cpi	r18, 0x08	; 8
     3a4:	31 05       	cpc	r19, r1
     3a6:	09 f0       	breq	.+2      	; 0x3aa <Endpoint_Write_Control_Stream_LE+0x7c>
     3a8:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3aa:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     3ae:	2e 77       	andi	r18, 0x7E	; 126
     3b0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     3b4:	cd cf       	rjmp	.-102    	; 0x350 <Endpoint_Write_Control_Stream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
     3b6:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     3b8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Length--;
     3bc:	61 50       	subi	r22, 0x01	; 1
     3be:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     3c0:	2f 5f       	subi	r18, 0xFF	; 255
     3c2:	3f 4f       	sbci	r19, 0xFF	; 255
     3c4:	e7 cf       	rjmp	.-50     	; 0x394 <Endpoint_Write_Control_Stream_LE+0x66>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     3c6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     3ca:	88 23       	and	r24, r24
     3cc:	41 f0       	breq	.+16     	; 0x3de <Endpoint_Write_Control_Stream_LE+0xb0>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     3ce:	85 30       	cpi	r24, 0x05	; 5
     3d0:	41 f0       	breq	.+16     	; 0x3e2 <Endpoint_Write_Control_Stream_LE+0xb4>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     3d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
     3d6:	83 ff       	sbrs	r24, 3
     3d8:	c0 cf       	rjmp	.-128    	; 0x35a <Endpoint_Write_Control_Stream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
     3da:	81 e0       	ldi	r24, 0x01	; 1
}
     3dc:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     3e2:	83 e0       	ldi	r24, 0x03	; 3
     3e4:	08 95       	ret

000003e6 <Endpoint_Write_Control_PStream_LE>:
{
     3e6:	fc 01       	movw	r30, r24
	if (Length > USB_ControlRequest.wLength)
     3e8:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <USB_ControlRequest+0x6>
     3ec:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <USB_ControlRequest+0x7>
     3f0:	86 17       	cp	r24, r22
     3f2:	97 07       	cpc	r25, r23
     3f4:	a0 f0       	brcs	.+40     	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
	else if (!(Length))
     3f6:	61 15       	cp	r22, r1
     3f8:	71 05       	cpc	r23, r1
     3fa:	29 f4       	brne	.+10     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     400:	8e 77       	andi	r24, 0x7E	; 126
     402:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     406:	90 e0       	ldi	r25, 0x00	; 0
	while (Length || LastPacketFull)
     408:	61 15       	cp	r22, r1
     40a:	71 05       	cpc	r23, r1
     40c:	51 f4       	brne	.+20     	; 0x422 <__FUSE_REGION_LENGTH__+0x22>
     40e:	91 11       	cpse	r25, r1
     410:	08 c0       	rjmp	.+16     	; 0x422 <__FUSE_REGION_LENGTH__+0x22>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     412:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	while (!(Endpoint_IsOUTReceived()))
     416:	82 ff       	sbrs	r24, 2
     418:	33 c0       	rjmp	.+102    	; 0x480 <__FUSE_REGION_LENGTH__+0x80>
	return ENDPOINT_RWCSTREAM_NoError;
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	08 95       	ret
     41e:	bc 01       	movw	r22, r24
     420:	f2 cf       	rjmp	.-28     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     422:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     426:	88 23       	and	r24, r24
     428:	b9 f1       	breq	.+110    	; 0x498 <__FUSE_REGION_LENGTH__+0x98>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     42a:	85 30       	cpi	r24, 0x05	; 5
     42c:	b9 f1       	breq	.+110    	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     42e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
     432:	83 fd       	sbrc	r24, 3
     434:	2f c0       	rjmp	.+94     	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     436:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsOUTReceived())
     43a:	82 fd       	sbrc	r24, 2
     43c:	ea cf       	rjmp	.-44     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     43e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsINReady())
     442:	80 ff       	sbrs	r24, 0
     444:	e1 cf       	rjmp	.-62     	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
					return UEBCLX;
     446:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     44a:	30 e0       	ldi	r19, 0x00	; 0
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     44c:	61 15       	cp	r22, r1
     44e:	71 05       	cpc	r23, r1
     450:	19 f0       	breq	.+6      	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
     452:	28 30       	cpi	r18, 0x08	; 8
     454:	31 05       	cpc	r19, r1
     456:	58 f0       	brcs	.+22     	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	28 30       	cpi	r18, 0x08	; 8
     45c:	31 05       	cpc	r19, r1
     45e:	09 f0       	breq	.+2      	; 0x462 <__FUSE_REGION_LENGTH__+0x62>
     460:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     462:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     466:	8e 77       	andi	r24, 0x7E	; 126
     468:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     46c:	cd cf       	rjmp	.-102    	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
				TEMPLATE_TRANSFER_BYTE(DataStream);
     46e:	84 91       	lpm	r24, Z
				UEDATX = Data;
     470:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     474:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     476:	61 50       	subi	r22, 0x01	; 1
     478:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     47a:	2f 5f       	subi	r18, 0xFF	; 255
     47c:	3f 4f       	sbci	r19, 0xFF	; 255
     47e:	e6 cf       	rjmp	.-52     	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     480:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     484:	88 23       	and	r24, r24
     486:	41 f0       	breq	.+16     	; 0x498 <__FUSE_REGION_LENGTH__+0x98>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     488:	85 30       	cpi	r24, 0x05	; 5
     48a:	41 f0       	breq	.+16     	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     48c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
     490:	83 ff       	sbrs	r24, 3
     492:	bf cf       	rjmp	.-130    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
		  return ENDPOINT_RWCSTREAM_HostAborted;
     494:	81 e0       	ldi	r24, 0x01	; 1
}
     496:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     49c:	83 e0       	ldi	r24, 0x03	; 3
     49e:	08 95       	ret

000004a0 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     4a0:	98 2f       	mov	r25, r24
     4a2:	95 30       	cpi	r25, 0x05	; 5
     4a4:	28 f0       	brcs	.+10     	; 0x4b0 <Endpoint_ConfigureEndpoint_Prv+0x10>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     4a6:	8f 70       	andi	r24, 0x0F	; 15
     4a8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	08 95       	ret
     4b0:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			UECFG1XTemp = UECFG1XData;
     4b4:	24 2f       	mov	r18, r20
			UECFG0XTemp = UECFG0XData;
     4b6:	76 2f       	mov	r23, r22
			UEIENXTemp  = 0;
     4b8:	50 e0       	ldi	r21, 0x00	; 0
		if (EPNum == Number)
     4ba:	98 17       	cp	r25, r24
     4bc:	31 f0       	breq	.+12     	; 0x4ca <Endpoint_ConfigureEndpoint_Prv+0x2a>
			UECFG0XTemp = UECFG0X;
     4be:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
			UECFG1XTemp = UECFG1X;
     4c2:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
			UEIENXTemp  = UEIENX;
     4c6:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
		if (!(UECFG1XTemp & (1 << ALLOC)))
     4ca:	21 fd       	sbrc	r18, 1
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <Endpoint_ConfigureEndpoint_Prv+0x32>
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     4ce:	9f 5f       	subi	r25, 0xFF	; 255
     4d0:	e8 cf       	rjmp	.-48     	; 0x4a2 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     4d2:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     4d6:	3e 7f       	andi	r19, 0xFE	; 254
     4d8:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		UECFG1X &= ~(1 << ALLOC);
     4dc:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     4e0:	3d 7f       	andi	r19, 0xFD	; 253
     4e2:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
				UECONX |= (1 << EPEN);
     4e6:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     4ea:	31 60       	ori	r19, 0x01	; 1
     4ec:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		UECFG0X = UECFG0XTemp;
     4f0:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
		UECFG1X = UECFG1XTemp;
     4f4:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
		UEIENX  = UEIENXTemp;
     4f8:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     4fc:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
		if (!(Endpoint_IsConfigured()))
     500:	27 fd       	sbrc	r18, 7
     502:	e5 cf       	rjmp	.-54     	; 0x4ce <Endpoint_ConfigureEndpoint_Prv+0x2e>
		  return false;
     504:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
     506:	08 95       	ret

00000508 <Endpoint_ConfigureEndpointTable>:
{
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	06 2f       	mov	r16, r22
     512:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     514:	10 e0       	ldi	r17, 0x00	; 0
     516:	10 13       	cpse	r17, r16
     518:	02 c0       	rjmp	.+4      	; 0x51e <Endpoint_ConfigureEndpointTable+0x16>
	return true;
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	0f c0       	rjmp	.+30     	; 0x53c <Endpoint_ConfigureEndpointTable+0x34>
		if (!(Table[i].Address))
     51e:	28 81       	ld	r18, Y
     520:	21 11       	cpse	r18, r1
     522:	03 c0       	rjmp	.+6      	; 0x52a <Endpoint_ConfigureEndpointTable+0x22>
	for (uint8_t i = 0; i < Entries; i++)
     524:	1f 5f       	subi	r17, 0xFF	; 255
     526:	25 96       	adiw	r28, 0x05	; 5
     528:	f6 cf       	rjmp	.-20     	; 0x516 <Endpoint_ConfigureEndpointTable+0xe>
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     52a:	9c 81       	ldd	r25, Y+4	; 0x04
     52c:	a9 81       	ldd	r26, Y+1	; 0x01
     52e:	ba 81       	ldd	r27, Y+2	; 0x02
     530:	6b 81       	ldd	r22, Y+3	; 0x03
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     532:	82 2f       	mov	r24, r18
     534:	8f 70       	andi	r24, 0x0F	; 15
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     536:	85 30       	cpi	r24, 0x05	; 5
     538:	30 f0       	brcs	.+12     	; 0x546 <Endpoint_ConfigureEndpointTable+0x3e>
		  return false;
     53a:	80 e0       	ldi	r24, 0x00	; 0
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	08 95       	ret
				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoint_BytesToEPSizeMask(Size)));
     546:	42 e0       	ldi	r20, 0x02	; 2
     548:	92 30       	cpi	r25, 0x02	; 2
     54a:	08 f0       	brcs	.+2      	; 0x54e <Endpoint_ConfigureEndpointTable+0x46>
     54c:	46 e0       	ldi	r20, 0x06	; 6
				uint16_t CheckBytes = 8;
     54e:	e8 e0       	ldi	r30, 0x08	; 8
     550:	f0 e0       	ldi	r31, 0x00	; 0
				uint8_t  MaskVal    = 0;
     552:	90 e0       	ldi	r25, 0x00	; 0
				while (CheckBytes < Bytes)
     554:	ea 17       	cp	r30, r26
     556:	fb 07       	cpc	r31, r27
     558:	78 f0       	brcs	.+30     	; 0x578 <Endpoint_ConfigureEndpointTable+0x70>
				return (MaskVal << EPSIZE0);
     55a:	92 95       	swap	r25
     55c:	90 7f       	andi	r25, 0xF0	; 240
				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoint_BytesToEPSizeMask(Size)));
     55e:	49 2b       	or	r20, r25
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     560:	62 95       	swap	r22
     562:	66 0f       	add	r22, r22
     564:	66 0f       	add	r22, r22
     566:	60 7c       	andi	r22, 0xC0	; 192
     568:	22 1f       	adc	r18, r18
     56a:	22 27       	eor	r18, r18
     56c:	22 1f       	adc	r18, r18
     56e:	62 2b       	or	r22, r18
				return Endpoint_ConfigureEndpoint_Prv(Number,
     570:	97 df       	rcall	.-210    	; 0x4a0 <Endpoint_ConfigureEndpoint_Prv>
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     572:	81 11       	cpse	r24, r1
     574:	d7 cf       	rjmp	.-82     	; 0x524 <Endpoint_ConfigureEndpointTable+0x1c>
     576:	e1 cf       	rjmp	.-62     	; 0x53a <Endpoint_ConfigureEndpointTable+0x32>
					MaskVal++;
     578:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     57a:	ee 0f       	add	r30, r30
     57c:	ff 1f       	adc	r31, r31
     57e:	ea cf       	rjmp	.-44     	; 0x554 <Endpoint_ConfigureEndpointTable+0x4c>

00000580 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     580:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_ControlRequest>
     584:	87 ff       	sbrs	r24, 7
     586:	13 c0       	rjmp	.+38     	; 0x5ae <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     588:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     58c:	82 ff       	sbrs	r24, 2
     58e:	06 c0       	rjmp	.+12     	; 0x59c <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     590:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     594:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     596:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     59a:	04 c0       	rjmp	.+8      	; 0x5a4 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     59c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_DeviceState>
     5a0:	81 11       	cpse	r24, r1
     5a2:	f2 cf       	rjmp	.-28     	; 0x588 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
     5a4:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     5a6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_DeviceState>
     5aa:	88 23       	and	r24, r24
     5ac:	d9 f3       	breq	.-10     	; 0x5a4 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		while (!(Endpoint_IsINReady()))
     5b2:	80 ff       	sbrs	r24, 0
     5b4:	f8 cf       	rjmp	.-16     	; 0x5a6 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     5ba:	8e 77       	andi	r24, 0x7E	; 126
     5bc:	ec cf       	rjmp	.-40     	; 0x596 <Endpoint_ClearStatusStage+0x16>

000005be <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     5be:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     5c2:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
     5c6:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     5c8:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     5cc:	90 ff       	sbrs	r25, 0
     5ce:	06 c0       	rjmp	.+12     	; 0x5dc <Endpoint_WaitUntilReady+0x1e>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5d0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     5d4:	90 ff       	sbrs	r25, 0
     5d6:	06 c0       	rjmp	.+12     	; 0x5e4 <Endpoint_WaitUntilReady+0x26>
			  return ENDPOINT_READYWAIT_NoError;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5dc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     5e0:	92 fd       	sbrc	r25, 2
     5e2:	fa cf       	rjmp	.-12     	; 0x5d8 <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5e4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5e8:	99 23       	and	r25, r25
     5ea:	91 f0       	breq	.+36     	; 0x610 <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5ec:	95 30       	cpi	r25, 0x05	; 5
     5ee:	91 f0       	breq	.+36     	; 0x614 <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     5f0:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     5f4:	95 fd       	sbrc	r25, 5
     5f6:	10 c0       	rjmp	.+32     	; 0x618 <Endpoint_WaitUntilReady+0x5a>
     5f8:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     5fc:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     600:	24 17       	cp	r18, r20
     602:	35 07       	cpc	r19, r21
     604:	09 f3       	breq	.-62     	; 0x5c8 <Endpoint_WaitUntilReady+0xa>
     606:	81 50       	subi	r24, 0x01	; 1
     608:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     60a:	f1 f6       	brne	.-68     	; 0x5c8 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     60c:	84 e0       	ldi	r24, 0x04	; 4
     60e:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
     614:	83 e0       	ldi	r24, 0x03	; 3
     616:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
     618:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
     61a:	08 95       	ret

0000061c <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     61c:	40 d0       	rcall	.+128    	; 0x69e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     61e:	42 d0       	rcall	.+132    	; 0x6a4 <USB_INT_ClearAllInterrupts>
     620:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     624:	8f 77       	andi	r24, 0x7F	; 127
     626:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     62a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
     62e:	80 68       	ori	r24, 0x80	; 128
     630:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     634:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON &= ~(1 << FRZCLK);
     638:	8f 7d       	andi	r24, 0xDF	; 223
     63a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     63e:	19 bc       	out	0x29, r1	; 41
				PLLCSR = USB_PLL_PSC;
     640:	82 e0       	ldi	r24, 0x02	; 2
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     642:	89 bd       	out	0x29, r24	; 41
     644:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     646:	00 fe       	sbrs	r0, 0
     648:	fd cf       	rjmp	.-6      	; 0x644 <USB_ResetInterface+0x28>
     64a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     64e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     652:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     656:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     65a:	42 e0       	ldi	r20, 0x02	; 2
				return Endpoint_ConfigureEndpoint_Prv(Number,
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	1f df       	rcall	.-450    	; 0x4a0 <Endpoint_ConfigureEndpoint_Prv>
     662:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     666:	8e 7f       	andi	r24, 0xFE	; 254
     668:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     66c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << SUSPE);
     670:	81 60       	ori	r24, 0x01	; 1
     672:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     676:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << EORSTE);
     67a:	88 60       	ori	r24, 0x08	; 8
     67c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     680:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
				UDCON  &= ~(1 << DETACH);
     684:	8e 7f       	andi	r24, 0xFE	; 254
     686:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
     68a:	08 95       	ret

0000068c <USB_Init>:
}
     68c:	e3 e6       	ldi	r30, 0x63	; 99
				REGCR  &= ~(1 << REGDIS);
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	8e 7f       	andi	r24, 0xFE	; 254
     694:	80 83       	st	Z, r24
	USB_IsInitialized = true;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <USB_IsInitialized>
	USB_ResetInterface();
     69c:	bf cf       	rjmp	.-130    	; 0x61c <USB_ResetInterface>

0000069e <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     69e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
	#endif
}
     6a2:	08 95       	ret

000006a4 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     6a4:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#endif
}
     6a8:	08 95       	ret

000006aa <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     6aa:	1f 92       	push	r1
     6ac:	0f 92       	push	r0
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	0f 92       	push	r0
     6b2:	11 24       	eor	r1, r1
     6b4:	2f 93       	push	r18
     6b6:	3f 93       	push	r19
     6b8:	4f 93       	push	r20
     6ba:	5f 93       	push	r21
     6bc:	6f 93       	push	r22
     6be:	7f 93       	push	r23
     6c0:	8f 93       	push	r24
     6c2:	9f 93       	push	r25
     6c4:	af 93       	push	r26
     6c6:	bf 93       	push	r27
     6c8:	ef 93       	push	r30
     6ca:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     6cc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     6d0:	82 ff       	sbrs	r24, 2
     6d2:	0a c0       	rjmp	.+20     	; 0x6e8 <__vector_11+0x3e>
						return (UDIEN  & (1 << SOFE));
     6d4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     6d8:	82 ff       	sbrs	r24, 2
     6da:	06 c0       	rjmp	.+12     	; 0x6e8 <__vector_11+0x3e>
						UDINT  &= ~(1 << SOFI);
     6dc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     6e0:	8b 7f       	andi	r24, 0xFB	; 251
     6e2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     6e6:	20 d2       	rcall	.+1088   	; 0xb28 <USB_Event_Stub>
						return (UDINT  & (1 << SUSPI));
     6e8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     6ec:	80 ff       	sbrs	r24, 0
     6ee:	17 c0       	rjmp	.+46     	; 0x71e <__vector_11+0x74>
						return (UDIEN  & (1 << SUSPE));
     6f0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     6f4:	80 ff       	sbrs	r24, 0
     6f6:	13 c0       	rjmp	.+38     	; 0x71e <__vector_11+0x74>
						UDIEN  &= ~(1 << SUSPE);
     6f8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     6fc:	8e 7f       	andi	r24, 0xFE	; 254
     6fe:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << WAKEUPE);
     702:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     706:	80 61       	ori	r24, 0x10	; 16
     708:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     70c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     710:	80 62       	ori	r24, 0x20	; 32
     712:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				PLLCSR = 0;
     716:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     718:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
     71c:	38 dd       	rcall	.-1424   	; 0x18e <EVENT_USB_Device_Disconnect>
						return (UDINT  & (1 << WAKEUPI));
     71e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     722:	84 ff       	sbrs	r24, 4
     724:	27 c0       	rjmp	.+78     	; 0x774 <__vector_11+0xca>
						return (UDIEN  & (1 << WAKEUPE));
     726:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     72a:	84 ff       	sbrs	r24, 4
     72c:	23 c0       	rjmp	.+70     	; 0x774 <__vector_11+0xca>
				PLLCSR = USB_PLL_PSC;
     72e:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     734:	09 b4       	in	r0, 0x29	; 41
     736:	00 fe       	sbrs	r0, 0
     738:	fd cf       	rjmp	.-6      	; 0x734 <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     73a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     73e:	8f 7d       	andi	r24, 0xDF	; 223
     740:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						UDINT  &= ~(1 << WAKEUPI);
     744:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     748:	8f 7e       	andi	r24, 0xEF	; 239
     74a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						UDIEN  &= ~(1 << WAKEUPE);
     74e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     752:	8f 7e       	andi	r24, 0xEF	; 239
     754:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << SUSPE);
     758:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     75c:	81 60       	ori	r24, 0x01	; 1
     75e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     762:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <USB_Device_ConfigurationNumber>
     766:	88 23       	and	r24, r24
     768:	09 f4       	brne	.+2      	; 0x76c <__vector_11+0xc2>
     76a:	40 c0       	rjmp	.+128    	; 0x7ec <__vector_11+0x142>
		  USB_DeviceState = DEVICE_STATE_Configured;
     76c:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     76e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     772:	f8 dc       	rcall	.-1552   	; 0x164 <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << EORSTI));
     774:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     778:	83 ff       	sbrs	r24, 3
     77a:	27 c0       	rjmp	.+78     	; 0x7ca <__vector_11+0x120>
						return (UDIEN  & (1 << EORSTE));
     77c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     780:	83 ff       	sbrs	r24, 3
     782:	23 c0       	rjmp	.+70     	; 0x7ca <__vector_11+0x120>
						UDINT  &= ~(1 << EORSTI);
     784:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     788:	87 7f       	andi	r24, 0xF7	; 247
     78a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     794:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
     798:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     79c:	8e 7f       	andi	r24, 0xFE	; 254
     79e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						UDIEN  &= ~(1 << SUSPE);
     7a2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     7a6:	8e 7f       	andi	r24, 0xFE	; 254
     7a8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << WAKEUPE);
     7ac:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     7b0:	80 61       	ori	r24, 0x10	; 16
     7b2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7b6:	42 e0       	ldi	r20, 0x02	; 2
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	71 de       	rcall	.-798    	; 0x4a0 <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
     7be:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     7c2:	88 60       	ori	r24, 0x08	; 8
     7c4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     7c8:	af d1       	rcall	.+862    	; 0xb28 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     7ca:	ff 91       	pop	r31
     7cc:	ef 91       	pop	r30
     7ce:	bf 91       	pop	r27
     7d0:	af 91       	pop	r26
     7d2:	9f 91       	pop	r25
     7d4:	8f 91       	pop	r24
     7d6:	7f 91       	pop	r23
     7d8:	6f 91       	pop	r22
     7da:	5f 91       	pop	r21
     7dc:	4f 91       	pop	r20
     7de:	3f 91       	pop	r19
     7e0:	2f 91       	pop	r18
     7e2:	0f 90       	pop	r0
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	0f 90       	pop	r0
     7e8:	1f 90       	pop	r1
     7ea:	18 95       	reti
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     7ec:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     7f0:	87 fd       	sbrc	r24, 7
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <__vector_11+0x14e>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	bb cf       	rjmp	.-138    	; 0x76e <__vector_11+0xc4>
     7f8:	83 e0       	ldi	r24, 0x03	; 3
     7fa:	b9 cf       	rjmp	.-142    	; 0x76e <__vector_11+0xc4>

000007fc <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     7fc:	1f 92       	push	r1
     7fe:	0f 92       	push	r0
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	0f 92       	push	r0
     804:	11 24       	eor	r1, r1
     806:	2f 93       	push	r18
     808:	3f 93       	push	r19
     80a:	4f 93       	push	r20
     80c:	5f 93       	push	r21
     80e:	6f 93       	push	r22
     810:	7f 93       	push	r23
     812:	8f 93       	push	r24
     814:	9f 93       	push	r25
     816:	af 93       	push	r26
     818:	bf 93       	push	r27
     81a:	cf 93       	push	r28
     81c:	ef 93       	push	r30
     81e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     820:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     824:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     826:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     82a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						UEIENX &= ~(1 << RXSTPE);
     82e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     832:	87 7f       	andi	r24, 0xF7	; 247
     834:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     838:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     83a:	1b d0       	rcall	.+54     	; 0x872 <USB_Device_ProcessControlRequest>
     83c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						UEIENX |= (1 << RXSTPE);
     840:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     844:	88 60       	ori	r24, 0x08	; 8
     846:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     84a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     84e:	ff 91       	pop	r31
     850:	ef 91       	pop	r30
     852:	cf 91       	pop	r28
     854:	bf 91       	pop	r27
     856:	af 91       	pop	r26
     858:	9f 91       	pop	r25
     85a:	8f 91       	pop	r24
     85c:	7f 91       	pop	r23
     85e:	6f 91       	pop	r22
     860:	5f 91       	pop	r21
     862:	4f 91       	pop	r20
     864:	3f 91       	pop	r19
     866:	2f 91       	pop	r18
     868:	0f 90       	pop	r0
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	0f 90       	pop	r0
     86e:	1f 90       	pop	r1
     870:	18 95       	reti

00000872 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
     87c:	aa 97       	sbiw	r28, 0x2a	; 42
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
     888:	e0 e3       	ldi	r30, 0x30	; 48
     88a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     88c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     890:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     892:	21 e0       	ldi	r18, 0x01	; 1
     894:	e8 33       	cpi	r30, 0x38	; 56
     896:	f2 07       	cpc	r31, r18
     898:	c9 f7       	brne	.-14     	; 0x88c <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
     89a:	7d dc       	rcall	.-1798   	; 0x196 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     89c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
     8a0:	83 ff       	sbrs	r24, 3
     8a2:	10 c0       	rjmp	.+32     	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     8a4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     8a8:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <USB_ControlRequest+0x1>
     8ac:	95 30       	cpi	r25, 0x05	; 5
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <USB_Device_ProcessControlRequest+0x40>
     8b0:	d8 c0       	rjmp	.+432    	; 0xa62 <USB_Device_ProcessControlRequest+0x1f0>
     8b2:	00 f5       	brcc	.+64     	; 0x8f4 <USB_Device_ProcessControlRequest+0x82>
     8b4:	91 30       	cpi	r25, 0x01	; 1
     8b6:	09 f4       	brne	.+2      	; 0x8ba <USB_Device_ProcessControlRequest+0x48>
     8b8:	8b c0       	rjmp	.+278    	; 0x9d0 <USB_Device_ProcessControlRequest+0x15e>
     8ba:	08 f4       	brcc	.+2      	; 0x8be <USB_Device_ProcessControlRequest+0x4c>
     8bc:	61 c0       	rjmp	.+194    	; 0x980 <USB_Device_ProcessControlRequest+0x10e>
     8be:	93 30       	cpi	r25, 0x03	; 3
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
     8c2:	86 c0       	rjmp	.+268    	; 0x9d0 <USB_Device_ProcessControlRequest+0x15e>
     8c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     8c8:	83 ff       	sbrs	r24, 3
     8ca:	0a c0       	rjmp	.+20     	; 0x8e0 <USB_Device_ProcessControlRequest+0x6e>
				UEINTX &= ~(1 << RXSTPI);
     8cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     8d0:	87 7f       	andi	r24, 0xF7	; 247
     8d2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				UECONX |= (1 << STALLRQ);
     8d6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     8da:	80 62       	ori	r24, 0x20	; 32
     8dc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     8e0:	aa 96       	adiw	r28, 0x2a	; 42
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	de bf       	out	0x3e, r29	; 62
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	cd bf       	out	0x3d, r28	; 61
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	08 95       	ret
		switch (USB_ControlRequest.bRequest)
     8f4:	98 30       	cpi	r25, 0x08	; 8
     8f6:	09 f4       	brne	.+2      	; 0x8fa <USB_Device_ProcessControlRequest+0x88>
     8f8:	ec c0       	rjmp	.+472    	; 0xad2 <USB_Device_ProcessControlRequest+0x260>
     8fa:	99 30       	cpi	r25, 0x09	; 9
     8fc:	09 f4       	brne	.+2      	; 0x900 <USB_Device_ProcessControlRequest+0x8e>
     8fe:	f6 c0       	rjmp	.+492    	; 0xaec <USB_Device_ProcessControlRequest+0x27a>
     900:	96 30       	cpi	r25, 0x06	; 6
     902:	01 f7       	brne	.-64     	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     904:	80 58       	subi	r24, 0x80	; 128
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	e8 f6       	brcc	.-70     	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     90a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <USB_ControlRequest+0x2>
     90e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <USB_ControlRequest+0x3>
     912:	8c 3d       	cpi	r24, 0xDC	; 220
     914:	23 e0       	ldi	r18, 0x03	; 3
     916:	92 07       	cpc	r25, r18
     918:	09 f0       	breq	.+2      	; 0x91c <USB_Device_ProcessControlRequest+0xaa>
     91a:	c6 c0       	rjmp	.+396    	; 0xaa8 <USB_Device_ProcessControlRequest+0x236>
	SignatureDescriptor.Header.Type = DTYPE_String;
     91c:	83 e0       	ldi	r24, 0x03	; 3
     91e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     920:	8a e2       	ldi	r24, 0x2A	; 42
     922:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     924:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     926:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     928:	de 01       	movw	r26, r28
     92a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     92c:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     92e:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     930:	51 e2       	ldi	r21, 0x21	; 33
     932:	e3 2f       	mov	r30, r19
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
     93a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     93c:	20 ff       	sbrs	r18, 0
     93e:	03 c0       	rjmp	.+6      	; 0x946 <USB_Device_ProcessControlRequest+0xd4>
					{
						SerialByte >>= 4;
     940:	e2 95       	swap	r30
     942:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     944:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     946:	ef 70       	andi	r30, 0x0F	; 15
     948:	8e 2f       	mov	r24, r30
     94a:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     94c:	ea 30       	cpi	r30, 0x0A	; 10
     94e:	08 f4       	brcc	.+2      	; 0x952 <USB_Device_ProcessControlRequest+0xe0>
     950:	a9 c0       	rjmp	.+338    	; 0xaa4 <USB_Device_ProcessControlRequest+0x232>
     952:	c7 96       	adiw	r24, 0x37	; 55
     954:	8d 93       	st	X+, r24
     956:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     958:	2f 5f       	subi	r18, 0xFF	; 255
     95a:	24 31       	cpi	r18, 0x14	; 20
     95c:	51 f7       	brne	.-44     	; 0x932 <USB_Device_ProcessControlRequest+0xc0>
				SREG = GlobalIntState;
     95e:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
     960:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     964:	87 7f       	andi	r24, 0xF7	; 247
     966:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     96a:	6a e2       	ldi	r22, 0x2A	; 42
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	ce 01       	movw	r24, r28
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	dd dc       	rcall	.-1606   	; 0x32e <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     974:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     978:	8b 77       	andi	r24, 0x7B	; 123
     97a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     97e:	a2 cf       	rjmp	.-188    	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     980:	80 38       	cpi	r24, 0x80	; 128
     982:	99 f0       	breq	.+38     	; 0x9aa <USB_Device_ProcessControlRequest+0x138>
     984:	82 38       	cpi	r24, 0x82	; 130
     986:	09 f0       	breq	.+2      	; 0x98a <USB_Device_ProcessControlRequest+0x118>
     988:	9d cf       	rjmp	.-198    	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     98a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <USB_ControlRequest+0x4>
     98e:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     990:	85 30       	cpi	r24, 0x05	; 5
     992:	08 f0       	brcs	.+2      	; 0x996 <USB_Device_ProcessControlRequest+0x124>
     994:	97 cf       	rjmp	.-210    	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     996:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     99a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     99e:	85 fb       	bst	r24, 5
     9a0:	88 27       	eor	r24, r24
     9a2:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9a4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     9a8:	06 c0       	rjmp	.+12     	; 0x9b6 <USB_Device_ProcessControlRequest+0x144>
	uint8_t CurrentStatus = 0;
     9aa:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
     9ae:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <USB_Device_RemoteWakeupEnabled>
     9b2:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     9b4:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
     9b6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     9ba:	97 7f       	andi	r25, 0xF7	; 247
     9bc:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     9c0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
     9c4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     9cc:	8e 77       	andi	r24, 0x7E	; 126
     9ce:	32 c0       	rjmp	.+100    	; 0xa34 <USB_Device_ProcessControlRequest+0x1c2>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     9d0:	28 2f       	mov	r18, r24
     9d2:	2d 7f       	andi	r18, 0xFD	; 253
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <USB_Device_ProcessControlRequest+0x166>
     9d6:	76 cf       	rjmp	.-276    	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     9d8:	88 23       	and	r24, r24
     9da:	e9 f0       	breq	.+58     	; 0xa16 <USB_Device_ProcessControlRequest+0x1a4>
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	09 f0       	breq	.+2      	; 0x9e2 <USB_Device_ProcessControlRequest+0x170>
     9e0:	71 cf       	rjmp	.-286    	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     9e2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <USB_ControlRequest+0x2>
     9e6:	81 11       	cpse	r24, r1
     9e8:	20 c0       	rjmp	.+64     	; 0xa2a <USB_Device_ProcessControlRequest+0x1b8>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     9ea:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <USB_ControlRequest+0x4>
     9ee:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	28 0f       	add	r18, r24
     9f4:	24 30       	cpi	r18, 0x04	; 4
     9f6:	08 f0       	brcs	.+2      	; 0x9fa <USB_Device_ProcessControlRequest+0x188>
     9f8:	65 cf       	rjmp	.-310    	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9fa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
     9fe:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     a02:	20 ff       	sbrs	r18, 0
     a04:	12 c0       	rjmp	.+36     	; 0xa2a <USB_Device_ProcessControlRequest+0x1b8>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     a06:	93 30       	cpi	r25, 0x03	; 3
     a08:	c9 f4       	brne	.+50     	; 0xa3c <USB_Device_ProcessControlRequest+0x1ca>
				UECONX |= (1 << STALLRQ);
     a0a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     a0e:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
     a10:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     a14:	0a c0       	rjmp	.+20     	; 0xa2a <USB_Device_ProcessControlRequest+0x1b8>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a16:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <USB_ControlRequest+0x2>
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	09 f0       	breq	.+2      	; 0xa20 <USB_Device_ProcessControlRequest+0x1ae>
     a1e:	52 cf       	rjmp	.-348    	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a20:	93 30       	cpi	r25, 0x03	; 3
     a22:	09 f0       	breq	.+2      	; 0xa26 <USB_Device_ProcessControlRequest+0x1b4>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a2a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				UEINTX &= ~(1 << RXSTPI);
     a2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a32:	87 7f       	andi	r24, 0xF7	; 247
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a34:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearStatusStage();
     a38:	a3 dd       	rcall	.-1210   	; 0x580 <Endpoint_ClearStatusStage>
     a3a:	44 cf       	rjmp	.-376    	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
				UECONX |= (1 << STALLRQC);
     a3c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     a40:	90 61       	ori	r25, 0x10	; 16
     a42:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     a46:	21 e0       	ldi	r18, 0x01	; 1
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	01 c0       	rjmp	.+2      	; 0xa4e <USB_Device_ProcessControlRequest+0x1dc>
     a4c:	22 0f       	add	r18, r18
     a4e:	8a 95       	dec	r24
     a50:	ea f7       	brpl	.-6      	; 0xa4c <USB_Device_ProcessControlRequest+0x1da>
     a52:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
     a56:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UECONX |= (1 << RSTDT);
     a5a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     a5e:	88 60       	ori	r24, 0x08	; 8
     a60:	d7 cf       	rjmp	.-82     	; 0xa10 <USB_Device_ProcessControlRequest+0x19e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     a62:	81 11       	cpse	r24, r1
     a64:	2f cf       	rjmp	.-418    	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     a66:	10 91 32 01 	lds	r17, 0x0132	; 0x800132 <USB_ControlRequest+0x2>
     a6a:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     a6c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     a70:	80 78       	andi	r24, 0x80	; 128
     a72:	81 2b       	or	r24, r17
     a74:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
				UEINTX &= ~(1 << RXSTPI);
     a78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a7c:	87 7f       	andi	r24, 0xF7	; 247
     a7e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearStatusStage();
     a82:	7e dd       	rcall	.-1284   	; 0x580 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	while (!(Endpoint_IsINReady()));
     a88:	80 ff       	sbrs	r24, 0
     a8a:	fc cf       	rjmp	.-8      	; 0xa84 <USB_Device_ProcessControlRequest+0x212>
				UDADDR |= (1 << ADDEN);
     a8c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     a90:	80 68       	ori	r24, 0x80	; 128
     a92:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     a96:	83 e0       	ldi	r24, 0x03	; 3
     a98:	11 11       	cpse	r17, r1
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <USB_Device_ProcessControlRequest+0x22c>
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_DeviceState>
     aa2:	10 cf       	rjmp	.-480    	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     aa4:	c0 96       	adiw	r24, 0x30	; 48
     aa6:	56 cf       	rjmp	.-340    	; 0x954 <USB_Device_ProcessControlRequest+0xe2>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     aa8:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <USB_ControlRequest+0x4>
     aac:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <USB_ControlRequest+0x5>
     ab0:	ae 01       	movw	r20, r28
     ab2:	4f 5f       	subi	r20, 0xFF	; 255
     ab4:	5f 4f       	sbci	r21, 0xFF	; 255
     ab6:	0b dc       	rcall	.-2026   	; 0x2ce <CALLBACK_USB_GetDescriptor>
     ab8:	bc 01       	movw	r22, r24
     aba:	89 2b       	or	r24, r25
     abc:	09 f4       	brne	.+2      	; 0xac0 <USB_Device_ProcessControlRequest+0x24e>
     abe:	02 cf       	rjmp	.-508    	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
				UEINTX &= ~(1 << RXSTPI);
     ac0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ac4:	97 7f       	andi	r25, 0xF7	; 247
     ac6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	9a 81       	ldd	r25, Y+2	; 0x02
     ace:	8b dc       	rcall	.-1770   	; 0x3e6 <Endpoint_Write_Control_PStream_LE>
     ad0:	51 cf       	rjmp	.-350    	; 0x974 <USB_Device_ProcessControlRequest+0x102>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     ad2:	80 38       	cpi	r24, 0x80	; 128
     ad4:	09 f0       	breq	.+2      	; 0xad8 <USB_Device_ProcessControlRequest+0x266>
     ad6:	f6 ce       	rjmp	.-532    	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
     ad8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     adc:	87 7f       	andi	r24, 0xF7	; 247
     ade:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     ae2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <USB_Device_ConfigurationNumber>
				UEDATX = Data;
     ae6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     aea:	6e cf       	rjmp	.-292    	; 0x9c8 <USB_Device_ProcessControlRequest+0x156>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     aec:	81 11       	cpse	r24, r1
     aee:	ea ce       	rjmp	.-556    	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     af0:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <USB_ControlRequest+0x2>
     af4:	92 30       	cpi	r25, 0x02	; 2
     af6:	08 f0       	brcs	.+2      	; 0xafa <USB_Device_ProcessControlRequest+0x288>
     af8:	e5 ce       	rjmp	.-566    	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
				UEINTX &= ~(1 << RXSTPI);
     afa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     afe:	87 7f       	andi	r24, 0xF7	; 247
     b00:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     b04:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
     b08:	3b dd       	rcall	.-1418   	; 0x580 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
     b0a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <USB_Device_ConfigurationNumber>
     b0e:	88 23       	and	r24, r24
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     b10:	29 f0       	breq	.+10     	; 0xb1c <USB_Device_ProcessControlRequest+0x2aa>
     b12:	84 e0       	ldi	r24, 0x04	; 4
     b14:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
     b18:	3b db       	rcall	.-2442   	; 0x190 <EVENT_USB_Device_ConfigurationChanged>
     b1a:	d4 ce       	rjmp	.-600    	; 0x8c4 <USB_Device_ProcessControlRequest+0x52>
				return (UDADDR & (1 << ADDEN));
     b1c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     b20:	87 fd       	sbrc	r24, 7
     b22:	f7 cf       	rjmp	.-18     	; 0xb12 <USB_Device_ProcessControlRequest+0x2a0>
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	f6 cf       	rjmp	.-20     	; 0xb14 <USB_Device_ProcessControlRequest+0x2a2>

00000b28 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     b28:	08 95       	ret

00000b2a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     b2a:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     b2c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_DeviceState>
     b30:	88 23       	and	r24, r24
     b32:	91 f0       	breq	.+36     	; 0xb58 <USB_USBTask+0x2e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     b34:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     b38:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b3a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     b3e:	80 fd       	sbrc	r24, 0
     b40:	0d c0       	rjmp	.+26     	; 0xb5c <USB_USBTask+0x32>
     b42:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     b44:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b46:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     b4e:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     b50:	90 de       	rcall	.-736    	; 0x872 <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b52:	cf 70       	andi	r28, 0x0F	; 15
     b54:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
}
     b58:	cf 91       	pop	r28
     b5a:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b5c:	80 e8       	ldi	r24, 0x80	; 128
     b5e:	f2 cf       	rjmp	.-28     	; 0xb44 <USB_USBTask+0x1a>

00000b60 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     b66:	fc 01       	movw	r30, r24
     b68:	70 96       	adiw	r30, 0x10	; 16
     b6a:	8b e0       	ldi	r24, 0x0B	; 11
     b6c:	df 01       	movw	r26, r30
     b6e:	1d 92       	st	X+, r1
     b70:	8a 95       	dec	r24
     b72:	e9 f7       	brne	.-6      	; 0xb6e <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     b74:	82 e0       	ldi	r24, 0x02	; 2
     b76:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     b78:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     b7e:	61 e0       	ldi	r22, 0x01	; 1
     b80:	ce 01       	movw	r24, r28
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	c1 dc       	rcall	.-1662   	; 0x508 <Endpoint_ConfigureEndpointTable>
     b86:	88 23       	and	r24, r24
     b88:	61 f0       	breq	.+24     	; 0xba2 <CDC_Device_ConfigureEndpoints+0x42>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     b8a:	61 e0       	ldi	r22, 0x01	; 1
     b8c:	ce 01       	movw	r24, r28
     b8e:	06 96       	adiw	r24, 0x06	; 6
     b90:	bb dc       	rcall	.-1674   	; 0x508 <Endpoint_ConfigureEndpointTable>
     b92:	88 23       	and	r24, r24
     b94:	31 f0       	breq	.+12     	; 0xba2 <CDC_Device_ConfigureEndpoints+0x42>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     b96:	61 e0       	ldi	r22, 0x01	; 1
     b98:	ce 01       	movw	r24, r28
     b9a:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	return true;
}
     b9c:	df 91       	pop	r29
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     b9e:	cf 91       	pop	r28
     ba0:	b3 cc       	rjmp	.-1690   	; 0x508 <Endpoint_ConfigureEndpointTable>
}
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <CDC_Device_SendByte>:
	return Endpoint_Write_PStream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     baa:	cf 93       	push	r28
     bac:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     bae:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <USB_DeviceState>
     bb2:	24 30       	cpi	r18, 0x04	; 4
     bb4:	f9 f4       	brne	.+62     	; 0xbf4 <CDC_Device_SendByte+0x4a>
     bb6:	fc 01       	movw	r30, r24
     bb8:	44 89       	ldd	r20, Z+20	; 0x14
     bba:	55 89       	ldd	r21, Z+21	; 0x15
     bbc:	66 89       	ldd	r22, Z+22	; 0x16
     bbe:	77 89       	ldd	r23, Z+23	; 0x17
     bc0:	45 2b       	or	r20, r21
     bc2:	46 2b       	or	r20, r22
     bc4:	47 2b       	or	r20, r23
     bc6:	b1 f0       	breq	.+44     	; 0xbf4 <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bc8:	81 81       	ldd	r24, Z+1	; 0x01
     bca:	8f 70       	andi	r24, 0x0F	; 15
     bcc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     bd0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     bd4:	85 ff       	sbrs	r24, 5
     bd6:	05 c0       	rjmp	.+10     	; 0xbe2 <CDC_Device_SendByte+0x38>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bd8:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     bdc:	80 e0       	ldi	r24, 0x00	; 0
}
     bde:	cf 91       	pop	r28
     be0:	08 95       	ret
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     be2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     be6:	8e 77       	andi	r24, 0x7E	; 126
     be8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     bec:	e8 dc       	rcall	.-1584   	; 0x5be <Endpoint_WaitUntilReady>
     bee:	88 23       	and	r24, r24
     bf0:	99 f3       	breq	.-26     	; 0xbd8 <CDC_Device_SendByte+0x2e>
     bf2:	f5 cf       	rjmp	.-22     	; 0xbde <CDC_Device_SendByte+0x34>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     bf4:	82 e0       	ldi	r24, 0x02	; 2
     bf6:	f3 cf       	rjmp	.-26     	; 0xbde <CDC_Device_SendByte+0x34>

00000bf8 <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
     bf8:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
     bfa:	68 2f       	mov	r22, r24
     bfc:	84 85       	ldd	r24, Z+12	; 0x0c
     bfe:	95 85       	ldd	r25, Z+13	; 0x0d
     c00:	d4 df       	rcall	.-88     	; 0xbaa <CDC_Device_SendByte>
     c02:	21 e0       	ldi	r18, 0x01	; 1
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	81 11       	cpse	r24, r1
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <CDC_Device_putchar+0x16>
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	20 e0       	ldi	r18, 0x00	; 0
}
     c0e:	88 27       	eor	r24, r24
     c10:	99 27       	eor	r25, r25
     c12:	82 1b       	sub	r24, r18
     c14:	93 0b       	sbc	r25, r19
     c16:	08 95       	ret

00000c18 <CDC_Device_Flush>:
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     c18:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <USB_DeviceState>
     c1c:	24 30       	cpi	r18, 0x04	; 4
     c1e:	29 f5       	brne	.+74     	; 0xc6a <CDC_Device_Flush+0x52>
     c20:	fc 01       	movw	r30, r24
     c22:	44 89       	ldd	r20, Z+20	; 0x14
     c24:	55 89       	ldd	r21, Z+21	; 0x15
     c26:	66 89       	ldd	r22, Z+22	; 0x16
     c28:	77 89       	ldd	r23, Z+23	; 0x17
     c2a:	45 2b       	or	r20, r21
     c2c:	46 2b       	or	r20, r22
     c2e:	47 2b       	or	r20, r23
     c30:	e1 f0       	breq	.+56     	; 0xc6a <CDC_Device_Flush+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c32:	81 81       	ldd	r24, Z+1	; 0x01
     c34:	8f 70       	andi	r24, 0x0F	; 15
     c36:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
					return UEBCLX;
     c3a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
	if (!(Endpoint_BytesInEndpoint()))
     c3e:	81 11       	cpse	r24, r1
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <CDC_Device_Flush+0x2e>
	  return ENDPOINT_READYWAIT_NoError;
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	08 95       	ret
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c46:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     c4e:	8e 77       	andi	r24, 0x7E	; 126
     c50:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (BankFull)
     c54:	95 fd       	sbrc	r25, 5
     c56:	f5 cf       	rjmp	.-22     	; 0xc42 <CDC_Device_Flush+0x2a>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     c58:	b2 dc       	rcall	.-1692   	; 0x5be <Endpoint_WaitUntilReady>
     c5a:	81 11       	cpse	r24, r1
     c5c:	07 c0       	rjmp	.+14     	; 0xc6c <CDC_Device_Flush+0x54>
     c5e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     c62:	9e 77       	andi	r25, 0x7E	; 126
     c64:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     c68:	08 95       	ret
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     c6a:	82 e0       	ldi	r24, 0x02	; 2
}
     c6c:	08 95       	ret

00000c6e <CDC_Device_USBTask>:
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     c6e:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <USB_DeviceState>
     c72:	24 30       	cpi	r18, 0x04	; 4
     c74:	89 f4       	brne	.+34     	; 0xc98 <CDC_Device_USBTask+0x2a>
     c76:	fc 01       	movw	r30, r24
     c78:	44 89       	ldd	r20, Z+20	; 0x14
     c7a:	55 89       	ldd	r21, Z+21	; 0x15
     c7c:	66 89       	ldd	r22, Z+22	; 0x16
     c7e:	77 89       	ldd	r23, Z+23	; 0x17
     c80:	45 2b       	or	r20, r21
     c82:	46 2b       	or	r20, r22
     c84:	47 2b       	or	r20, r23
     c86:	41 f0       	breq	.+16     	; 0xc98 <CDC_Device_USBTask+0x2a>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c88:	21 81       	ldd	r18, Z+1	; 0x01
     c8a:	2f 70       	andi	r18, 0x0F	; 15
     c8c:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c90:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (Endpoint_IsINReady())
     c94:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
     c96:	c0 cf       	rjmp	.-128    	; 0xc18 <CDC_Device_Flush>
}
     c98:	08 95       	ret

00000c9a <CDC_Device_ReceiveByte>:
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     c9a:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <USB_DeviceState>
     c9e:	24 30       	cpi	r18, 0x04	; 4
     ca0:	19 f0       	breq	.+6      	; 0xca8 <CDC_Device_ReceiveByte+0xe>
	  return -1;
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	9f ef       	ldi	r25, 0xFF	; 255
     ca6:	08 95       	ret
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     ca8:	fc 01       	movw	r30, r24
     caa:	44 89       	ldd	r20, Z+20	; 0x14
     cac:	55 89       	ldd	r21, Z+21	; 0x15
     cae:	66 89       	ldd	r22, Z+22	; 0x16
     cb0:	77 89       	ldd	r23, Z+23	; 0x17
     cb2:	45 2b       	or	r20, r21
     cb4:	46 2b       	or	r20, r22
     cb6:	47 2b       	or	r20, r23
     cb8:	a1 f3       	breq	.-24     	; 0xca2 <CDC_Device_ReceiveByte+0x8>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cba:	86 81       	ldd	r24, Z+6	; 0x06
     cbc:	8f 70       	andi	r24, 0x0F	; 15
     cbe:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cc2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (Endpoint_IsOUTReceived())
     cc6:	82 ff       	sbrs	r24, 2
     cc8:	ec cf       	rjmp	.-40     	; 0xca2 <CDC_Device_ReceiveByte+0x8>
					return UEBCLX;
     cca:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
		if (Endpoint_BytesInEndpoint())
     cce:	88 23       	and	r24, r24
     cd0:	69 f0       	breq	.+26     	; 0xcec <CDC_Device_ReceiveByte+0x52>
				return UEDATX;
     cd2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
		  ReceivedByte = Endpoint_Read_8();
     cd6:	90 e0       	ldi	r25, 0x00	; 0
					return UEBCLX;
     cd8:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
		if (!(Endpoint_BytesInEndpoint()))
     cdc:	21 11       	cpse	r18, r1
     cde:	05 c0       	rjmp	.+10     	; 0xcea <CDC_Device_ReceiveByte+0x50>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ce0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ce4:	2b 77       	andi	r18, 0x7B	; 123
     ce6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
}
     cea:	08 95       	ret
	int16_t ReceivedByte = -1;
     cec:	8f ef       	ldi	r24, 0xFF	; 255
     cee:	9f ef       	ldi	r25, 0xFF	; 255
     cf0:	f3 cf       	rjmp	.-26     	; 0xcd8 <CDC_Device_ReceiveByte+0x3e>

00000cf2 <CDC_Device_getchar>:

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
     cf2:	fc 01       	movw	r30, r24
     cf4:	84 85       	ldd	r24, Z+12	; 0x0c
     cf6:	95 85       	ldd	r25, Z+13	; 0x0d
     cf8:	d0 df       	rcall	.-96     	; 0xc9a <CDC_Device_ReceiveByte>

	if (ReceivedByte < 0)
     cfa:	97 ff       	sbrs	r25, 7
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <CDC_Device_getchar+0x10>
	  return _FDEV_EOF;
     cfe:	8e ef       	ldi	r24, 0xFE	; 254
     d00:	9f ef       	ldi	r25, 0xFF	; 255

	return ReceivedByte;
}
     d02:	08 95       	ret

00000d04 <CDC_Device_CreateStream>:
{
     d04:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
     d06:	2e e0       	ldi	r18, 0x0E	; 14
     d08:	db 01       	movw	r26, r22
     d0a:	1d 92       	st	X+, r1
     d0c:	2a 95       	dec	r18
     d0e:	e9 f7       	brne	.-6      	; 0xd0a <CDC_Device_CreateStream+0x6>
     d10:	23 e0       	ldi	r18, 0x03	; 3
     d12:	23 83       	std	Z+3, r18	; 0x03
     d14:	2c ef       	ldi	r18, 0xFC	; 252
     d16:	35 e0       	ldi	r19, 0x05	; 5
     d18:	31 87       	std	Z+9, r19	; 0x09
     d1a:	20 87       	std	Z+8, r18	; 0x08
     d1c:	29 e7       	ldi	r18, 0x79	; 121
     d1e:	36 e0       	ldi	r19, 0x06	; 6
     d20:	33 87       	std	Z+11, r19	; 0x0b
     d22:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
     d24:	95 87       	std	Z+13, r25	; 0x0d
     d26:	84 87       	std	Z+12, r24	; 0x0c
}
     d28:	08 95       	ret

00000d2a <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
     d2a:	08 95       	ret

00000d2c <CDC_Device_ProcessControlRequest>:
{
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	ec 01       	movw	r28, r24
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (!(Endpoint_IsSETUPReceived()))
     d36:	83 ff       	sbrs	r24, 3
     d38:	10 c0       	rjmp	.+32     	; 0xd5a <CDC_Device_ProcessControlRequest+0x2e>
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     d3a:	28 81       	ld	r18, Y
     d3c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <USB_ControlRequest+0x4>
     d40:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <USB_ControlRequest+0x5>
     d44:	28 17       	cp	r18, r24
     d46:	19 06       	cpc	r1, r25
     d48:	41 f4       	brne	.+16     	; 0xd5a <CDC_Device_ProcessControlRequest+0x2e>
	switch (USB_ControlRequest.bRequest)
     d4a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_ControlRequest+0x1>
     d4e:	81 32       	cpi	r24, 0x21	; 33
     d50:	e1 f0       	breq	.+56     	; 0xd8a <CDC_Device_ProcessControlRequest+0x5e>
     d52:	30 f4       	brcc	.+12     	; 0xd60 <CDC_Device_ProcessControlRequest+0x34>
     d54:	80 32       	cpi	r24, 0x20	; 32
     d56:	09 f4       	brne	.+2      	; 0xd5a <CDC_Device_ProcessControlRequest+0x2e>
     d58:	4d c0       	rjmp	.+154    	; 0xdf4 <CDC_Device_ProcessControlRequest+0xc8>
}
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	08 95       	ret
	switch (USB_ControlRequest.bRequest)
     d60:	82 32       	cpi	r24, 0x22	; 34
     d62:	09 f4       	brne	.+2      	; 0xd66 <CDC_Device_ProcessControlRequest+0x3a>
     d64:	79 c0       	rjmp	.+242    	; 0xe58 <CDC_Device_ProcessControlRequest+0x12c>
     d66:	83 32       	cpi	r24, 0x23	; 35
     d68:	c1 f7       	brne	.-16     	; 0xd5a <CDC_Device_ProcessControlRequest+0x2e>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     d6a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_ControlRequest>
     d6e:	81 32       	cpi	r24, 0x21	; 33
     d70:	a1 f7       	brne	.-24     	; 0xd5a <CDC_Device_ProcessControlRequest+0x2e>
				UEINTX &= ~(1 << RXSTPI);
     d72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d76:	87 7f       	andi	r24, 0xF7	; 247
     d78:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_ClearStatusStage();
     d7c:	01 dc       	rcall	.-2046   	; 0x580 <Endpoint_ClearStatusStage>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     d7e:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <USB_ControlRequest+0x2>
     d82:	ce 01       	movw	r24, r28
}
     d84:	df 91       	pop	r29
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     d86:	cf 91       	pop	r28
     d88:	d0 cf       	rjmp	.-96     	; 0xd2a <CDC_Device_Event_Stub>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d8a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_ControlRequest>
     d8e:	81 3a       	cpi	r24, 0xA1	; 161
     d90:	21 f7       	brne	.-56     	; 0xd5a <CDC_Device_ProcessControlRequest+0x2e>
     d92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d96:	87 7f       	andi	r24, 0xF7	; 247
     d98:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				while (!(Endpoint_IsINReady()));
     da0:	80 ff       	sbrs	r24, 0
     da2:	fc cf       	rjmp	.-8      	; 0xd9c <CDC_Device_ProcessControlRequest+0x70>
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     da4:	8c 89       	ldd	r24, Y+20	; 0x14
     da6:	9d 89       	ldd	r25, Y+21	; 0x15
     da8:	ae 89       	ldd	r26, Y+22	; 0x16
     daa:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     dac:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
     db0:	49 2f       	mov	r20, r25
     db2:	5a 2f       	mov	r21, r26
     db4:	6b 2f       	mov	r22, r27
     db6:	77 27       	eor	r23, r23
     db8:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 16);
     dbc:	ad 01       	movw	r20, r26
     dbe:	66 27       	eor	r22, r22
     dc0:	77 27       	eor	r23, r23
     dc2:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 24);
     dc6:	8b 2f       	mov	r24, r27
     dc8:	99 27       	eor	r25, r25
     dca:	aa 27       	eor	r26, r26
     dcc:	bb 27       	eor	r27, r27
     dce:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     dd2:	88 8d       	ldd	r24, Y+24	; 0x18
				UEDATX = Data;
     dd4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     dd8:	89 8d       	ldd	r24, Y+25	; 0x19
     dda:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     dde:	8a 8d       	ldd	r24, Y+26	; 0x1a
     de0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     de4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     de8:	8e 77       	andi	r24, 0x7E	; 126
     dea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
}
     dee:	df 91       	pop	r29
				Endpoint_ClearStatusStage();
     df0:	cf 91       	pop	r28
     df2:	c6 cb       	rjmp	.-2164   	; 0x580 <Endpoint_ClearStatusStage>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     df4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_ControlRequest>
     df8:	81 32       	cpi	r24, 0x21	; 33
     dfa:	09 f0       	breq	.+2      	; 0xdfe <CDC_Device_ProcessControlRequest+0xd2>
     dfc:	ae cf       	rjmp	.-164    	; 0xd5a <CDC_Device_ProcessControlRequest+0x2e>
				UEINTX &= ~(1 << RXSTPI);
     dfe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e02:	87 7f       	andi	r24, 0xF7	; 247
     e04:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				while (!(Endpoint_IsOUTReceived()))
     e0c:	82 ff       	sbrs	r24, 2
     e0e:	1f c0       	rjmp	.+62     	; 0xe4e <CDC_Device_ProcessControlRequest+0x122>
				Data.Bytes[0] = UEDATX;
     e10:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[1] = UEDATX;
     e14:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[2] = UEDATX;
     e18:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[3] = UEDATX;
     e1c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     e20:	3c 8b       	std	Y+20, r19	; 0x14
     e22:	2d 8b       	std	Y+21, r18	; 0x15
     e24:	9e 8b       	std	Y+22, r25	; 0x16
     e26:	8f 8b       	std	Y+23, r24	; 0x17
				return UEDATX;
     e28:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     e2c:	88 8f       	std	Y+24, r24	; 0x18
     e2e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     e32:	89 8f       	std	Y+25, r24	; 0x19
     e34:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     e38:	8a 8f       	std	Y+26, r24	; 0x1a
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e3e:	8b 77       	andi	r24, 0x7B	; 123
     e40:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     e44:	9d db       	rcall	.-2246   	; 0x580 <Endpoint_ClearStatusStage>
}
     e46:	ce 01       	movw	r24, r28
     e48:	df 91       	pop	r29
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     e4a:	cf 91       	pop	r28
     e4c:	6e cf       	rjmp	.-292    	; 0xd2a <CDC_Device_Event_Stub>
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     e4e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_DeviceState>
     e52:	81 11       	cpse	r24, r1
     e54:	d9 cf       	rjmp	.-78     	; 0xe08 <CDC_Device_ProcessControlRequest+0xdc>
     e56:	81 cf       	rjmp	.-254    	; 0xd5a <CDC_Device_ProcessControlRequest+0x2e>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e58:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_ControlRequest>
     e5c:	81 32       	cpi	r24, 0x21	; 33
     e5e:	09 f0       	breq	.+2      	; 0xe62 <CDC_Device_ProcessControlRequest+0x136>
     e60:	7c cf       	rjmp	.-264    	; 0xd5a <CDC_Device_ProcessControlRequest+0x2e>
				UEINTX &= ~(1 << RXSTPI);
     e62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e66:	87 7f       	andi	r24, 0xF7	; 247
     e68:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_ClearStatusStage();
     e6c:	89 db       	rcall	.-2286   	; 0x580 <Endpoint_ClearStatusStage>
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     e6e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <USB_ControlRequest+0x2>
     e72:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <USB_ControlRequest+0x3>
     e76:	99 8b       	std	Y+17, r25	; 0x11
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     e78:	88 8b       	std	Y+16, r24	; 0x10
}
     e7a:	ce 01       	movw	r24, r28
     e7c:	df 91       	pop	r29
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     e7e:	cf 91       	pop	r28
     e80:	8d c9       	rjmp	.-3302   	; 0x19c <EVENT_CDC_Device_ControLineStateChanged>

00000e82 <ax_read_packet>:
	* empty the fifo if max is reached. */
    char pre;
    char len;
    char set;
    char data[]={0,0,0};
    SPI_RW_8(AX_REG_PWRMODE,PWRMODE_FULLRX,0);
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	69 e0       	ldi	r22, 0x09	; 9
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	82 e0       	ldi	r24, 0x02	; 2
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	8e d9       	rcall	.-3300   	; 0x1ac <SPI_RW_8>
    if(SPI_RW_8(AX_REG_FIFOSTAT,0x00,1) & (1<<8)){
     e90:	41 e0       	ldi	r20, 0x01	; 1
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	88 e2       	ldi	r24, 0x28	; 40
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	87 d9       	rcall	.-3314   	; 0x1ac <SPI_RW_8>
     e9e:	90 ff       	sbrs	r25, 0
     ea0:	33 c0       	rjmp	.+102    	; 0xf08 <ax_read_packet+0x86>
     ea2:	2f ef       	ldi	r18, 0xFF	; 255
     ea4:	80 e7       	ldi	r24, 0x70	; 112
     ea6:	92 e0       	ldi	r25, 0x02	; 2
     ea8:	21 50       	subi	r18, 0x01	; 1
     eaa:	80 40       	sbci	r24, 0x00	; 0
     eac:	90 40       	sbci	r25, 0x00	; 0
     eae:	e1 f7       	brne	.-8      	; 0xea8 <ax_read_packet+0x26>
     eb0:	00 c0       	rjmp	.+0      	; 0xeb2 <ax_read_packet+0x30>
     eb2:	00 00       	nop
        _delay_ms(100);
        pre = SPI_RW_8(AX_REG_FIFODATA,0x00,1);
     eb4:	41 e0       	ldi	r20, 0x01	; 1
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	89 e2       	ldi	r24, 0x29	; 41
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	75 d9       	rcall	.-3350   	; 0x1ac <SPI_RW_8>
        len = SPI_RW_8(AX_REG_FIFODATA,0x00,1);
     ec2:	41 e0       	ldi	r20, 0x01	; 1
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	89 e2       	ldi	r24, 0x29	; 41
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	6e d9       	rcall	.-3364   	; 0x1ac <SPI_RW_8>
        set = SPI_RW_8(AX_REG_FIFODATA,0x00,1);
     ed0:	41 e0       	ldi	r20, 0x01	; 1
     ed2:	50 e0       	ldi	r21, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	89 e2       	ldi	r24, 0x29	; 41
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	67 d9       	rcall	.-3378   	; 0x1ac <SPI_RW_8>
        data[0] = SPI_RW_8(AX_REG_FIFODATA,0x00,1);
     ede:	41 e0       	ldi	r20, 0x01	; 1
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	89 e2       	ldi	r24, 0x29	; 41
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	60 d9       	rcall	.-3392   	; 0x1ac <SPI_RW_8>
        data[1] = SPI_RW_8(AX_REG_FIFODATA,0x00,1);
     eec:	41 e0       	ldi	r20, 0x01	; 1
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	89 e2       	ldi	r24, 0x29	; 41
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	59 d9       	rcall	.-3406   	; 0x1ac <SPI_RW_8>
        data[2] = SPI_RW_8(AX_REG_FIFODATA,0x00,1);
     efa:	41 e0       	ldi	r20, 0x01	; 1
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	89 e2       	ldi	r24, 0x29	; 41
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	52 d9       	rcall	.-3420   	; 0x1ac <SPI_RW_8>
     f08:	90 e0       	ldi	r25, 0x00	; 0
        return data;
    }else{
        return data;
    }
}
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	08 95       	ret

00000f0e <ax_check_comms>:
     f0e:	50 e0       	ldi	r21, 0x00	; 0

int ax_check_comms() {
	uint8_t stat;
	stat = SPI_RW_8(AX_REG_SILICONREVISION,0x00,0);
     f10:	40 e0       	ldi	r20, 0x00	; 0
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	48 d9       	rcall	.-3440   	; 0x1ac <SPI_RW_8>
	if (stat == AX_REG_SILICONREVISION_DEFAULT) {
     f1c:	81 35       	cpi	r24, 0x51	; 81
     f1e:	11 f4       	brne	.+4      	; 0xf24 <ax_check_comms+0x16>
     f20:	99 27       	eor	r25, r25
		return stat;
	}
	else if (stat == 0x00 || stat == 0xFF) {
		return stat;
     f22:	08 95       	ret
	else if (stat == 0x00 || stat == 0xFF) {
     f24:	2f ef       	ldi	r18, 0xFF	; 255
     f26:	28 0f       	add	r18, r24
     f28:	2e 3f       	cpi	r18, 0xFE	; 254
     f2a:	d0 f7       	brcc	.-12     	; 0xf20 <ax_check_comms+0x12>
	}
}
     f2c:	08 95       	ret

00000f2e <ax_bootup>:
	//uint8_t status;
	//int count;
	//ax_sel(ax_driver_s);  /* Need to set the SEL and wait for 1us. MISO should go high when ready.  */
						  /* Need to delay a us.  */
	//ax_wr88reg(ax_driver_s, AX_REG_PWRMODE, AX_REG_PWRMODE_RST_MASK);  /* Puts the chip into RST mode. */
	PORTB |= (1<<DDB5); //SS high
     f2e:	2d 9a       	sbi	0x05, 5	; 5
	while(!(PINB & (1 << PB5)));
     f30:	1d 9b       	sbis	0x03, 5	; 3
     f32:	fe cf       	rjmp	.-4      	; 0xf30 <ax_bootup+0x2>
	SPI_RW_8(AX_REG_PWRMODE,AX_REG_PWRMODE_REST_MASK,0);
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	60 e8       	ldi	r22, 0x80	; 128
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	35 d9       	rcall	.-3478   	; 0x1ac <SPI_RW_8>
     f42:	2f ef       	ldi	r18, 0xFF	; 255
     f44:	80 e7       	ldi	r24, 0x70	; 112
     f46:	92 e0       	ldi	r25, 0x02	; 2
     f48:	21 50       	subi	r18, 0x01	; 1
     f4a:	80 40       	sbci	r24, 0x00	; 0
     f4c:	90 40       	sbci	r25, 0x00	; 0
     f4e:	e1 f7       	brne	.-8      	; 0xf48 <ax_bootup+0x1a>
     f50:	00 c0       	rjmp	.+0      	; 0xf52 <ax_bootup+0x24>
     f52:	00 00       	nop
	_delay_ms(100);																   /* Delay a bit here.  */
	//ax_wr88reg(ax_driver_s, AX_REG_PWRMODE, 0);  /* UGH. Magic numbers. This basically sets the chip into powerdown, and clears the RST bit. */
	SPI_RW_8(AX_REG_PWRMODE,AX_REG_PWRMODE_POWERDOWN_MASK,0);
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	25 d9       	rcall	.-3510   	; 0x1ac <SPI_RW_8>
     f62:	2f ef       	ldi	r18, 0xFF	; 255
     f64:	80 e7       	ldi	r24, 0x70	; 112
     f66:	92 e0       	ldi	r25, 0x02	; 2
     f68:	21 50       	subi	r18, 0x01	; 1
     f6a:	80 40       	sbci	r24, 0x00	; 0
     f6c:	90 40       	sbci	r25, 0x00	; 0
     f6e:	e1 f7       	brne	.-8      	; 0xf68 <ax_bootup+0x3a>
     f70:	00 c0       	rjmp	.+0      	; 0xf72 <ax_bootup+0x44>
     f72:	00 00       	nop
    /* Delay a bit here.  */
												 /* Should be able to set all the register contents here.
												 * In power down, the register file is still up. */
	/* In that case, it seems pretty legit.
	* Need to set up the osc. */
	SPI_RW_A16_R8(AX_REG_XTALOSC,0x04,0);
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	64 e0       	ldi	r22, 0x04	; 4
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	80 e1       	ldi	r24, 0x10	; 16
     f7e:	9f e0       	ldi	r25, 0x0F	; 15
     f80:	26 d9       	rcall	.-3508   	; 0x1ce <SPI_RW_A16_R8>
     f82:	8f ec       	ldi	r24, 0xCF	; 207
     f84:	97 e0       	ldi	r25, 0x07	; 7
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	f1 f7       	brne	.-4      	; 0xf86 <ax_bootup+0x58>
     f8a:	00 c0       	rjmp	.+0      	; 0xf8c <ax_bootup+0x5e>
     f8c:	00 00       	nop
    _delay_ms(1);
	SPI_RW_A16_R8(AX_REG_XTALAMPL,0x00,0);
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	81 e1       	ldi	r24, 0x11	; 17
     f98:	9f e0       	ldi	r25, 0x0F	; 15
     f9a:	19 d9       	rcall	.-3534   	; 0x1ce <SPI_RW_A16_R8>
     f9c:	8f ec       	ldi	r24, 0xCF	; 207
     f9e:	97 e0       	ldi	r25, 0x07	; 7
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <ax_bootup+0x72>
     fa4:	00 c0       	rjmp	.+0      	; 0xfa6 <ax_bootup+0x78>
     fa6:	00 00       	nop
    _delay_ms(1);
	SPI_RW_A16_R8(AX_REG_XTALCAP,0,0);
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	84 e8       	ldi	r24, 0x84	; 132
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	0c d9       	rcall	.-3560   	; 0x1ce <SPI_RW_A16_R8>
     fb6:	8f ec       	ldi	r24, 0xCF	; 207
     fb8:	97 e0       	ldi	r25, 0x07	; 7
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	f1 f7       	brne	.-4      	; 0xfba <ax_bootup+0x8c>
     fbe:	00 c0       	rjmp	.+0      	; 0xfc0 <ax_bootup+0x92>
     fc0:	00 00       	nop
     fc2:	8f ec       	ldi	r24, 0xCF	; 207
     fc4:	97 e0       	ldi	r25, 0x07	; 7
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <ax_bootup+0x98>
     fca:	00 c0       	rjmp	.+0      	; 0xfcc <ax_bootup+0x9e>
     fcc:	00 00       	nop
    _delay_ms(1);
	//SPI_RW_A16_R8(AX_REG_PWRMODE,PWRMODE_SYNTHTX,0);
    _delay_ms(1);
    SPI_RW_8(AX_REG_PWRMODE,PWRMODE_FIFOON,0);
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	67 e0       	ldi	r22, 0x07	; 7
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	e8 d8       	rcall	.-3632   	; 0x1ac <SPI_RW_8>
     fdc:	8f ec       	ldi	r24, 0xCF	; 207
     fde:	97 e0       	ldi	r25, 0x07	; 7
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <ax_bootup+0xb2>
     fe4:	00 c0       	rjmp	.+0      	; 0xfe6 <ax_bootup+0xb8>
     fe6:	00 00       	nop
	//ax_wr168reg(ax_driver_s, AX_REG_XTALOSC, 0x04);  /* Magic numbers. Came from DS.  */
	//ax_wr168reg(ax_driver_s, AX_REG_XTALAMPL, 0x00);  /* Once again, from DS. */
	//ax_wr88reg(ax_driver_s, AX_REG_XTALCAP, 0);  /* Set minimal XTAL load, 3pf */
	//ax_wr88reg(ax_driver_s, AX_REG_PWRMODE, AX_REG_PWRMODE_XTALEN_MASK); /* Enable the xtal osc. We need to wait until the xtal osc is up and running. */

}
     fe8:	08 95       	ret

00000fea <fputs>:
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	7b 01       	movw	r14, r22
     ff8:	db 01       	movw	r26, r22
     ffa:	13 96       	adiw	r26, 0x03	; 3
     ffc:	2c 91       	ld	r18, X
     ffe:	21 ff       	sbrs	r18, 1
    1000:	17 c0       	rjmp	.+46     	; 0x1030 <fputs+0x46>
    1002:	8c 01       	movw	r16, r24
    1004:	d0 e0       	ldi	r29, 0x00	; 0
    1006:	c0 e0       	ldi	r28, 0x00	; 0
    1008:	f8 01       	movw	r30, r16
    100a:	81 91       	ld	r24, Z+
    100c:	8f 01       	movw	r16, r30
    100e:	88 23       	and	r24, r24
    1010:	61 f0       	breq	.+24     	; 0x102a <fputs+0x40>
    1012:	d7 01       	movw	r26, r14
    1014:	18 96       	adiw	r26, 0x08	; 8
    1016:	ed 91       	ld	r30, X+
    1018:	fc 91       	ld	r31, X
    101a:	19 97       	sbiw	r26, 0x09	; 9
    101c:	b7 01       	movw	r22, r14
    101e:	09 95       	icall
    1020:	89 2b       	or	r24, r25
    1022:	91 f3       	breq	.-28     	; 0x1008 <fputs+0x1e>
    1024:	df ef       	ldi	r29, 0xFF	; 255
    1026:	cf ef       	ldi	r28, 0xFF	; 255
    1028:	ef cf       	rjmp	.-34     	; 0x1008 <fputs+0x1e>
    102a:	8d 2f       	mov	r24, r29
    102c:	9c 2f       	mov	r25, r28
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <fputs+0x4a>
    1030:	8f ef       	ldi	r24, 0xFF	; 255
    1032:	9f ef       	ldi	r25, 0xFF	; 255
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	e6 e0       	ldi	r30, 0x06	; 6
    103a:	0c c0       	rjmp	.+24     	; 0x1054 <__epilogue_restores__+0x18>

0000103c <__epilogue_restores__>:
    103c:	2a 88       	ldd	r2, Y+18	; 0x12
    103e:	39 88       	ldd	r3, Y+17	; 0x11
    1040:	48 88       	ldd	r4, Y+16	; 0x10
    1042:	5f 84       	ldd	r5, Y+15	; 0x0f
    1044:	6e 84       	ldd	r6, Y+14	; 0x0e
    1046:	7d 84       	ldd	r7, Y+13	; 0x0d
    1048:	8c 84       	ldd	r8, Y+12	; 0x0c
    104a:	9b 84       	ldd	r9, Y+11	; 0x0b
    104c:	aa 84       	ldd	r10, Y+10	; 0x0a
    104e:	b9 84       	ldd	r11, Y+9	; 0x09
    1050:	c8 84       	ldd	r12, Y+8	; 0x08
    1052:	df 80       	ldd	r13, Y+7	; 0x07
    1054:	ee 80       	ldd	r14, Y+6	; 0x06
    1056:	fd 80       	ldd	r15, Y+5	; 0x05
    1058:	0c 81       	ldd	r16, Y+4	; 0x04
    105a:	1b 81       	ldd	r17, Y+3	; 0x03
    105c:	aa 81       	ldd	r26, Y+2	; 0x02
    105e:	b9 81       	ldd	r27, Y+1	; 0x01
    1060:	ce 0f       	add	r28, r30
    1062:	d1 1d       	adc	r29, r1
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	cd bf       	out	0x3d, r28	; 61
    106e:	ed 01       	movw	r28, r26
    1070:	08 95       	ret

00001072 <_exit>:
    1072:	f8 94       	cli

00001074 <__stop_program>:
    1074:	ff cf       	rjmp	.-2      	; 0x1074 <__stop_program>
