
UTR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000fec  00001080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080011c  0080011c  0000109c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000066d2  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f7a  00000000  00000000  00007b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000360c  00000000  00000000  00009a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000990  00000000  00000000  0000d098  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002604  00000000  00000000  0000da28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e2a  00000000  00000000  0001002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000668  00000000  00000000  00013e56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7d c0       	rjmp	.+250    	; 0xfc <__ctors_end>
   2:	00 00       	nop
   4:	96 c0       	rjmp	.+300    	; 0x132 <__bad_interrupt>
   6:	00 00       	nop
   8:	94 c0       	rjmp	.+296    	; 0x132 <__bad_interrupt>
   a:	00 00       	nop
   c:	92 c0       	rjmp	.+292    	; 0x132 <__bad_interrupt>
   e:	00 00       	nop
  10:	90 c0       	rjmp	.+288    	; 0x132 <__bad_interrupt>
  12:	00 00       	nop
  14:	8e c0       	rjmp	.+284    	; 0x132 <__bad_interrupt>
  16:	00 00       	nop
  18:	8c c0       	rjmp	.+280    	; 0x132 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8a c0       	rjmp	.+276    	; 0x132 <__bad_interrupt>
  1e:	00 00       	nop
  20:	88 c0       	rjmp	.+272    	; 0x132 <__bad_interrupt>
  22:	00 00       	nop
  24:	86 c0       	rjmp	.+268    	; 0x132 <__bad_interrupt>
  26:	00 00       	nop
  28:	84 c0       	rjmp	.+264    	; 0x132 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	83 c3       	rjmp	.+1798   	; 0x734 <__vector_11>
  2e:	00 00       	nop
  30:	2a c4       	rjmp	.+2132   	; 0x886 <__vector_12>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__bad_interrupt>
  36:	00 00       	nop
  38:	7c c0       	rjmp	.+248    	; 0x132 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7a c0       	rjmp	.+244    	; 0x132 <__bad_interrupt>
  3e:	00 00       	nop
  40:	78 c0       	rjmp	.+240    	; 0x132 <__bad_interrupt>
  42:	00 00       	nop
  44:	76 c0       	rjmp	.+236    	; 0x132 <__bad_interrupt>
  46:	00 00       	nop
  48:	74 c0       	rjmp	.+232    	; 0x132 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	72 c0       	rjmp	.+228    	; 0x132 <__bad_interrupt>
  4e:	00 00       	nop
  50:	70 c0       	rjmp	.+224    	; 0x132 <__bad_interrupt>
  52:	00 00       	nop
  54:	e3 c0       	rjmp	.+454    	; 0x21c <__vector_21>
  56:	00 00       	nop
  58:	6c c0       	rjmp	.+216    	; 0x132 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6a c0       	rjmp	.+212    	; 0x132 <__bad_interrupt>
  5e:	00 00       	nop
  60:	68 c0       	rjmp	.+208    	; 0x132 <__bad_interrupt>
  62:	00 00       	nop
  64:	66 c0       	rjmp	.+204    	; 0x132 <__bad_interrupt>
  66:	00 00       	nop
  68:	64 c0       	rjmp	.+200    	; 0x132 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	62 c0       	rjmp	.+196    	; 0x132 <__bad_interrupt>
  6e:	00 00       	nop
  70:	60 c0       	rjmp	.+192    	; 0x132 <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	18 03 55 00 54 00 20 00 52 00 4f 00 43 00 4b 00     ..U.T. .R.O.C.K.
  84:	45 00 54 00 52 00 59 00 00 00                       E.T.R.Y...

0000008e <ManufacturerString>:
  8e:	18 03 55 00 54 00 20 00 52 00 4f 00 43 00 4b 00     ..U.T. .R.O.C.K.
  9e:	45 00 54 00 52 00 59 00 00 00                       E.T.R.Y...

000000a8 <LanguageString>:
  a8:	04 03 09 04                                         ....

000000ac <ConfigurationDescriptor>:
  ac:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  bc:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
  cc:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
  dc:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000ea <DeviceDescriptor>:
  ea:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
  fa:	dc 01                                               ..

000000fc <__ctors_end>:
  fc:	11 24       	eor	r1, r1
  fe:	1f be       	out	0x3f, r1	; 63
 100:	cf ef       	ldi	r28, 0xFF	; 255
 102:	d4 e0       	ldi	r29, 0x04	; 4
 104:	de bf       	out	0x3e, r29	; 62
 106:	cd bf       	out	0x3d, r28	; 61

00000108 <__do_copy_data>:
 108:	11 e0       	ldi	r17, 0x01	; 1
 10a:	a0 e0       	ldi	r26, 0x00	; 0
 10c:	b1 e0       	ldi	r27, 0x01	; 1
 10e:	ec ee       	ldi	r30, 0xEC	; 236
 110:	ff e0       	ldi	r31, 0x0F	; 15
 112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x10>
 114:	05 90       	lpm	r0, Z+
 116:	0d 92       	st	X+, r0
 118:	ac 31       	cpi	r26, 0x1C	; 28
 11a:	b1 07       	cpc	r27, r17
 11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0xc>

0000011e <__do_clear_bss>:
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	ac e1       	ldi	r26, 0x1C	; 28
 122:	b1 e0       	ldi	r27, 0x01	; 1
 124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
 126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
 128:	a8 33       	cpi	r26, 0x38	; 56
 12a:	b2 07       	cpc	r27, r18
 12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>
 12e:	a6 d0       	rcall	.+332    	; 0x27c <main>
 130:	5b c7       	rjmp	.+3766   	; 0xfe8 <_exit>

00000132 <__bad_interrupt>:
 132:	66 cf       	rjmp	.-308    	; 0x0 <__vectors>

00000134 <SetupHardware>:
	fputs(dataMSB, &USBSerialStream);
	fputs(dataLSB, &USBSerialStream);
	PORTD &= ~(1 << DDD0); //set PD0 low*/
}
void SetupHardware(void) {
	MCUSR &= ~(1 << WDRF);
 134:	84 b7       	in	r24, 0x34	; 52
 136:	87 7f       	andi	r24, 0xF7	; 247
 138:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	a8 95       	wdr
 140:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 144:	88 61       	ori	r24, 0x18	; 24
 146:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 14a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 14e:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 150:	80 e8       	ldi	r24, 0x80	; 128
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 15c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 160:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	clock_prescale_set(clock_div_1);
	USB_Init();
 162:	d9 c2       	rjmp	.+1458   	; 0x716 <USB_Init>

00000164 <EVENT_USB_Device_Connect>:
}
void EVENT_USB_Device_Connect(void) {
	PORTD |= (1 << DDD0); //set PD0 high
 164:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	80 e7       	ldi	r24, 0x70	; 112
 16a:	92 e0       	ldi	r25, 0x02	; 2
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <EVENT_USB_Device_Connect+0x8>
 174:	00 c0       	rjmp	.+0      	; 0x176 <EVENT_USB_Device_Connect+0x12>
 176:	00 00       	nop
	_delay_ms(100);
	PORTD &= ~(1 << DDD0); //set PD0 low
 178:	58 98       	cbi	0x0b, 0	; 11
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	80 e7       	ldi	r24, 0x70	; 112
 17e:	92 e0       	ldi	r25, 0x02	; 2
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <EVENT_USB_Device_Connect+0x1c>
 188:	00 c0       	rjmp	.+0      	; 0x18a <EVENT_USB_Device_Connect+0x26>
 18a:	00 00       	nop
	_delay_ms(100);
}
 18c:	08 95       	ret

0000018e <EVENT_USB_Device_Disconnect>:
 18e:	ea cf       	rjmp	.-44     	; 0x164 <EVENT_USB_Device_Connect>

00000190 <EVENT_USB_Device_ConfigurationChanged>:
	_delay_ms(100);
}

void EVENT_USB_Device_ConfigurationChanged(void) {
	bool ConfigSuccess = true;
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	2a c5       	rjmp	.+2644   	; 0xbea <CDC_Device_ConfigureEndpoints>

00000196 <EVENT_USB_Device_ControlRequest>:
}

void EVENT_USB_Device_ControlRequest(void) {
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	2d c6       	rjmp	.+3162   	; 0xdf6 <CDC_Device_ProcessControlRequest>

0000019c <EVENT_CDC_Device_ControLineStateChanged>:
}

void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t *const CDCInterfaceInfo) {
	bool HostReady = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR) != 0;
	if (HostReady) { transferData(); }
}
 19c:	08 95       	ret

0000019e <sendSerial>:

void sendSerial(char rec) {
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	1f 92       	push	r1
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
 1a8:	89 83       	std	Y+1, r24	; 0x01
	CDC_Device_SendString(&VirtualSerial_CDC_Interface, &rec);
 1aa:	be 01       	movw	r22, r28
 1ac:	6f 5f       	subi	r22, 0xFF	; 255
 1ae:	7f 4f       	sbci	r23, 0xFF	; 255
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	3f d5       	rcall	.+2686   	; 0xc34 <CDC_Device_SendString>
}
 1b6:	0f 90       	pop	r0
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <SPI_MasterInit>:
void SPI_MasterInit(void){
	DDRB |= (1<<DDB1)|(1<<DDB2)|(1<<DDB0);
 1be:	84 b1       	in	r24, 0x04	; 4
 1c0:	87 60       	ori	r24, 0x07	; 7
 1c2:	84 b9       	out	0x04, r24	; 4
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 1c4:	8c b5       	in	r24, 0x2c	; 44
 1c6:	81 65       	ori	r24, 0x51	; 81
 1c8:	8c bd       	out	0x2c, r24	; 44
}
 1ca:	08 95       	ret

000001cc <SPI_RW_8>:

adding 128 to an int sets register to write instead of read
*/

char SPI_RW_8(unsigned char reg_A,unsigned char reg_D, int read){
	PORTB &= ~(1<<DDB0); //SS low
 1cc:	28 98       	cbi	0x05, 0	; 5
	if(read==1){
 1ce:	41 30       	cpi	r20, 0x01	; 1
 1d0:	51 05       	cpc	r21, r1
 1d2:	59 f4       	brne	.+22     	; 0x1ea <SPI_RW_8+0x1e>
		SPDR = reg_A;
	}else{
		
		SPDR = reg_A | 0b1000000;
 1d4:	8e bd       	out	0x2e, r24	; 46
	}
	while(!(SPSR & (1<<SPIF)));
 1d6:	0d b4       	in	r0, 0x2d	; 45
 1d8:	07 fe       	sbrs	r0, 7
 1da:	fd cf       	rjmp	.-6      	; 0x1d6 <SPI_RW_8+0xa>
	SPDR = reg_D;
 1dc:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1<<SPIF)));
 1de:	0d b4       	in	r0, 0x2d	; 45
 1e0:	07 fe       	sbrs	r0, 7
 1e2:	fd cf       	rjmp	.-6      	; 0x1de <SPI_RW_8+0x12>
	PORTB |= (1<<DDB0); //SS high
 1e4:	28 9a       	sbi	0x05, 0	; 5
	return SPDR;
 1e6:	8e b5       	in	r24, 0x2e	; 46
}
 1e8:	08 95       	ret
		SPDR = reg_A | 0b1000000;
 1ea:	80 64       	ori	r24, 0x40	; 64
 1ec:	f3 cf       	rjmp	.-26     	; 0x1d4 <SPI_RW_8+0x8>

000001ee <SPI_RW_A16_R8>:
char SPI_RW_A16_R8(uint16_t reg_A,unsigned char reg_D, int read){
	uint8_t reg_A_upper = reg_A >> 8;
	uint8_t reg_A_lower = reg_A;
	if(read==1){
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	51 05       	cpc	r21, r1
 1f2:	51 f4       	brne	.+20     	; 0x208 <SPI_RW_A16_R8+0x1a>
		SPDR = reg_A_upper;
 1f4:	9e bd       	out	0x2e, r25	; 46
		while(!(SPSR & (1<<SPIF)));
 1f6:	0d b4       	in	r0, 0x2d	; 45
 1f8:	07 fe       	sbrs	r0, 7
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <SPI_RW_A16_R8+0x8>
		SPDR = reg_A_lower;
 1fc:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1<<SPIF)));
 1fe:	0d b4       	in	r0, 0x2d	; 45
 200:	07 fe       	sbrs	r0, 7
 202:	fd cf       	rjmp	.-6      	; 0x1fe <SPI_RW_A16_R8+0x10>
		while(!(SPSR & (1<<SPIF)));
		SPDR = reg_A_lower;
		while(!(SPSR & (1<<SPIF)));
	}

	return SPDR;
 204:	8e b5       	in	r24, 0x2e	; 46
}
 206:	08 95       	ret
		SPDR = reg_A_upper | 0x80;
 208:	90 68       	ori	r25, 0x80	; 128
 20a:	9e bd       	out	0x2e, r25	; 46
		while(!(SPSR & (1<<SPIF)));
 20c:	0d b4       	in	r0, 0x2d	; 45
 20e:	07 fe       	sbrs	r0, 7
 210:	fd cf       	rjmp	.-6      	; 0x20c <SPI_RW_A16_R8+0x1e>
		SPDR = reg_A_lower;
 212:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1<<SPIF)));
 214:	0d b4       	in	r0, 0x2d	; 45
 216:	07 fe       	sbrs	r0, 7
 218:	fd cf       	rjmp	.-6      	; 0x214 <SPI_RW_A16_R8+0x26>
 21a:	f4 cf       	rjmp	.-24     	; 0x204 <SPI_RW_A16_R8+0x16>

0000021c <__vector_21>:
ISR(TIMER0_OVF_vect) { //moved from main loop to timer .1 second / (8Mhz / 1024 prescale) = 12.8
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	2f 93       	push	r18
 228:	3f 93       	push	r19
 22a:	4f 93       	push	r20
 22c:	5f 93       	push	r21
 22e:	6f 93       	push	r22
 230:	7f 93       	push	r23
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
 236:	af 93       	push	r26
 238:	bf 93       	push	r27
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
					   /*HANDLE USB COMMUNICATIONS*/
	cli();
 23e:	f8 94       	cli
	USBint++;
 240:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	//if (USBint > 3){
	//USBint = 0;
	CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	8a d5       	rcall	.+2836   	; 0xd64 <CDC_Device_ReceiveByte>
	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	91 e0       	ldi	r25, 0x01	; 1
	USB_USBTask();
 254:	71 d5       	rcall	.+2786   	; 0xd38 <CDC_Device_USBTask>
 256:	ae d4       	rcall	.+2396   	; 0xbb4 <USB_USBTask>
	sei();
 258:	78 94       	sei
}
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	bf 91       	pop	r27
 260:	af 91       	pop	r26
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	7f 91       	pop	r23
 268:	6f 91       	pop	r22
 26a:	5f 91       	pop	r21
 26c:	4f 91       	pop	r20
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <main>:


int main(void){
	//INIT CODE 
	TCCR0B |= ((1 << CS02) | (1 << CS00)); //Table 15-9 clk/1024 prescale
 27c:	85 b5       	in	r24, 0x25	; 37
 27e:	85 60       	ori	r24, 0x05	; 5
 280:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0); //timer 0 overflow interrupt enable
 282:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
 286:	81 60       	ori	r24, 0x01	; 1
 288:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
	DDRB |= (1 << PB0); //set PB0 output
 28c:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= (1 << DDD0); //set PD0 output
 28e:	50 9a       	sbi	0x0a, 0	; 10
	PORTB |= (1 << PB0); //SS high
 290:	28 9a       	sbi	0x05, 0	; 5
	sei(); // Set interputs 
 292:	78 94       	sei
	SetupHardware(); //USB init 
 294:	4f df       	rcall	.-354    	; 0x134 <SetupHardware>
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream); //Init USB stream
 296:	6d e1       	ldi	r22, 0x1D	; 29
 298:	71 e0       	ldi	r23, 0x01	; 1
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	97 d5       	rcall	.+2862   	; 0xdce <CDC_Device_CreateStream>
	GlobalInterruptEnable();
	SPI_MasterInit(); // Turns AVR device into SPI Master
 2a0:	78 94       	sei
 2a2:	8d df       	rcall	.-230    	; 0x1be <SPI_MasterInit>
	//initRaido(0);//NEEDS freq 
	//END OF INIT CODE
    ax_bootup();
 2a4:	63 d6       	rcall	.+3270   	; 0xf6c <ax_bootup>
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	89 e6       	ldi	r24, 0x69	; 105
 2aa:	98 e1       	ldi	r25, 0x18	; 24
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	80 40       	sbci	r24, 0x00	; 0
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <main+0x30>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <main+0x3a>
	_delay_ms(1000);
	while(true){
		sendSerial(ax_check_comms());
 2b6:	00 00       	nop
 2b8:	49 d6       	rcall	.+3218   	; 0xf4c <ax_check_comms>
 2ba:	71 df       	rcall	.-286    	; 0x19e <sendSerial>
 2bc:	f4 cf       	rjmp	.-24     	; 0x2a6 <main+0x2a>

000002be <CALLBACK_USB_GetDescriptor>:
 2be:	29 2f       	mov	r18, r25
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 2c0:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 2c2:	22 30       	cpi	r18, 0x02	; 2
 2c4:	31 05       	cpc	r19, r1
 2c6:	71 f0       	breq	.+28     	; 0x2e4 <CALLBACK_USB_GetDescriptor+0x26>
 2c8:	23 30       	cpi	r18, 0x03	; 3
 2ca:	31 05       	cpc	r19, r1
 2cc:	81 f0       	breq	.+32     	; 0x2ee <CALLBACK_USB_GetDescriptor+0x30>
 2ce:	21 30       	cpi	r18, 0x01	; 1
 2d0:	31 05       	cpc	r19, r1
 2d2:	a1 f4       	brne	.+40     	; 0x2fc <CALLBACK_USB_GetDescriptor+0x3e>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 2d4:	82 e1       	ldi	r24, 0x12	; 18
 2d6:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
 2d8:	2a ee       	ldi	r18, 0xEA	; 234
 2da:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 2dc:	fa 01       	movw	r30, r20
 2de:	31 83       	std	Z+1, r19	; 0x01
 2e0:	20 83       	st	Z, r18
	return Size;
}
 2e2:	08 95       	ret
			Size    = sizeof(USB_Descriptor_Configuration_t);
 2e4:	8e e3       	ldi	r24, 0x3E	; 62
 2e6:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
 2e8:	2c ea       	ldi	r18, 0xAC	; 172
 2ea:	30 e0       	ldi	r19, 0x00	; 0
			break;
 2ec:	f7 cf       	rjmp	.-18     	; 0x2dc <CALLBACK_USB_GetDescriptor+0x1e>
			switch (DescriptorNumber)
 2ee:	99 27       	eor	r25, r25
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	91 05       	cpc	r25, r1
 2f4:	71 f0       	breq	.+28     	; 0x312 <CALLBACK_USB_GetDescriptor+0x54>
 2f6:	38 f0       	brcs	.+14     	; 0x306 <CALLBACK_USB_GetDescriptor+0x48>
 2f8:	02 97       	sbiw	r24, 0x02	; 2
 2fa:	71 f0       	breq	.+28     	; 0x318 <CALLBACK_USB_GetDescriptor+0x5a>
	uint16_t    Size    = NO_DESCRIPTOR;
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	80 e0       	ldi	r24, 0x00	; 0
	const void* Address = NULL;
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	eb cf       	rjmp	.-42     	; 0x2dc <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 306:	e8 ea       	ldi	r30, 0xA8	; 168
 308:	f0 e0       	ldi	r31, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
 30a:	84 91       	lpm	r24, Z
 30c:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
 30e:	9f 01       	movw	r18, r30
					break;
 310:	e5 cf       	rjmp	.-54     	; 0x2dc <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 312:	ee e8       	ldi	r30, 0x8E	; 142
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	f9 cf       	rjmp	.-14     	; 0x30a <CALLBACK_USB_GetDescriptor+0x4c>
					Size    = pgm_read_byte(&ProductString.Header.Size);
 318:	e4 e7       	ldi	r30, 0x74	; 116
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	f6 cf       	rjmp	.-20     	; 0x30a <CALLBACK_USB_GetDescriptor+0x4c>

0000031e <Endpoint_Write_Stream_LE>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 31e:	af 92       	push	r10
 320:	bf 92       	push	r11
 322:	cf 92       	push	r12
 324:	df 92       	push	r13
 326:	ff 92       	push	r15
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	6c 01       	movw	r12, r24
 332:	eb 01       	movw	r28, r22
 334:	8a 01       	movw	r16, r20
 336:	88 d1       	rcall	.+784    	; 0x648 <Endpoint_WaitUntilReady>
 338:	f8 2e       	mov	r15, r24
 33a:	81 11       	cpse	r24, r1
 33c:	23 c0       	rjmp	.+70     	; 0x384 <Endpoint_Write_Stream_LE+0x66>
 33e:	01 15       	cp	r16, r1
 340:	11 05       	cpc	r17, r1
 342:	39 f0       	breq	.+14     	; 0x352 <Endpoint_Write_Stream_LE+0x34>
 344:	f8 01       	movw	r30, r16
 346:	80 81       	ld	r24, Z
 348:	91 81       	ldd	r25, Z+1	; 0x01
 34a:	c8 1b       	sub	r28, r24
 34c:	d9 0b       	sbc	r29, r25
 34e:	c8 0e       	add	r12, r24
 350:	d9 1e       	adc	r13, r25
 352:	b1 2c       	mov	r11, r1
 354:	a1 2c       	mov	r10, r1
 356:	20 97       	sbiw	r28, 0x00	; 0
 358:	a9 f0       	breq	.+42     	; 0x384 <Endpoint_Write_Stream_LE+0x66>
 35a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 35e:	85 fd       	sbrc	r24, 5
 360:	21 c0       	rjmp	.+66     	; 0x3a4 <Endpoint_Write_Stream_LE+0x86>
 362:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 366:	8e 77       	andi	r24, 0x7E	; 126
 368:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 36c:	01 15       	cp	r16, r1
 36e:	11 05       	cpc	r17, r1
 370:	a1 f0       	breq	.+40     	; 0x39a <Endpoint_Write_Stream_LE+0x7c>
 372:	f8 01       	movw	r30, r16
 374:	80 81       	ld	r24, Z
 376:	91 81       	ldd	r25, Z+1	; 0x01
 378:	a8 0e       	add	r10, r24
 37a:	b9 1e       	adc	r11, r25
 37c:	b1 82       	std	Z+1, r11	; 0x01
 37e:	a0 82       	st	Z, r10
 380:	85 e0       	ldi	r24, 0x05	; 5
 382:	f8 2e       	mov	r15, r24
 384:	8f 2d       	mov	r24, r15
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	ff 90       	pop	r15
 390:	df 90       	pop	r13
 392:	cf 90       	pop	r12
 394:	bf 90       	pop	r11
 396:	af 90       	pop	r10
 398:	08 95       	ret
 39a:	56 d1       	rcall	.+684    	; 0x648 <Endpoint_WaitUntilReady>
 39c:	88 23       	and	r24, r24
 39e:	d9 f2       	breq	.-74     	; 0x356 <Endpoint_Write_Stream_LE+0x38>
 3a0:	f8 2e       	mov	r15, r24
 3a2:	f0 cf       	rjmp	.-32     	; 0x384 <Endpoint_Write_Stream_LE+0x66>
 3a4:	f6 01       	movw	r30, r12
 3a6:	81 91       	ld	r24, Z+
 3a8:	6f 01       	movw	r12, r30
 3aa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 3ae:	21 97       	sbiw	r28, 0x01	; 1
 3b0:	ff ef       	ldi	r31, 0xFF	; 255
 3b2:	af 1a       	sub	r10, r31
 3b4:	bf 0a       	sbc	r11, r31
 3b6:	cf cf       	rjmp	.-98     	; 0x356 <Endpoint_Write_Stream_LE+0x38>

000003b8 <Endpoint_Write_Control_Stream_LE>:
 3b8:	fc 01       	movw	r30, r24
 3ba:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <USB_ControlRequest+0x6>
 3be:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <USB_ControlRequest+0x7>
 3c2:	86 17       	cp	r24, r22
 3c4:	97 07       	cpc	r25, r23
 3c6:	a0 f0       	brcs	.+40     	; 0x3f0 <Endpoint_Write_Control_Stream_LE+0x38>
 3c8:	61 15       	cp	r22, r1
 3ca:	71 05       	cpc	r23, r1
 3cc:	29 f4       	brne	.+10     	; 0x3d8 <Endpoint_Write_Control_Stream_LE+0x20>
 3ce:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 3d2:	9e 77       	andi	r25, 0x7E	; 126
 3d4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	61 15       	cp	r22, r1
 3dc:	71 05       	cpc	r23, r1
 3de:	51 f4       	brne	.+20     	; 0x3f4 <Endpoint_Write_Control_Stream_LE+0x3c>
 3e0:	91 11       	cpse	r25, r1
 3e2:	08 c0       	rjmp	.+16     	; 0x3f4 <Endpoint_Write_Control_Stream_LE+0x3c>
 3e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 3e8:	82 ff       	sbrs	r24, 2
 3ea:	32 c0       	rjmp	.+100    	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	08 95       	ret
 3f0:	bc 01       	movw	r22, r24
 3f2:	f2 cf       	rjmp	.-28     	; 0x3d8 <Endpoint_Write_Control_Stream_LE+0x20>
 3f4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_DeviceState>
 3f8:	88 23       	and	r24, r24
 3fa:	b1 f1       	breq	.+108    	; 0x468 <__FUSE_REGION_LENGTH__+0x68>
 3fc:	85 30       	cpi	r24, 0x05	; 5
 3fe:	b1 f1       	breq	.+108    	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>
 400:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 404:	83 fd       	sbrc	r24, 3
 406:	2e c0       	rjmp	.+92     	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
 408:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 40c:	82 fd       	sbrc	r24, 2
 40e:	ea cf       	rjmp	.-44     	; 0x3e4 <Endpoint_Write_Control_Stream_LE+0x2c>
 410:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 414:	80 ff       	sbrs	r24, 0
 416:	e1 cf       	rjmp	.-62     	; 0x3da <Endpoint_Write_Control_Stream_LE+0x22>
 418:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	61 15       	cp	r22, r1
 420:	71 05       	cpc	r23, r1
 422:	19 f0       	breq	.+6      	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
 424:	28 30       	cpi	r18, 0x08	; 8
 426:	31 05       	cpc	r19, r1
 428:	58 f0       	brcs	.+22     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	28 30       	cpi	r18, 0x08	; 8
 42e:	31 05       	cpc	r19, r1
 430:	09 f0       	breq	.+2      	; 0x434 <__FUSE_REGION_LENGTH__+0x34>
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 438:	2e 77       	andi	r18, 0x7E	; 126
 43a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 43e:	cd cf       	rjmp	.-102    	; 0x3da <Endpoint_Write_Control_Stream_LE+0x22>
 440:	81 91       	ld	r24, Z+
 442:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 446:	61 50       	subi	r22, 0x01	; 1
 448:	71 09       	sbc	r23, r1
 44a:	2f 5f       	subi	r18, 0xFF	; 255
 44c:	3f 4f       	sbci	r19, 0xFF	; 255
 44e:	e7 cf       	rjmp	.-50     	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
 450:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_DeviceState>
 454:	88 23       	and	r24, r24
 456:	41 f0       	breq	.+16     	; 0x468 <__FUSE_REGION_LENGTH__+0x68>
 458:	85 30       	cpi	r24, 0x05	; 5
 45a:	41 f0       	breq	.+16     	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>
 45c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 460:	83 ff       	sbrs	r24, 3
 462:	c0 cf       	rjmp	.-128    	; 0x3e4 <Endpoint_Write_Control_Stream_LE+0x2c>
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	08 95       	ret
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	08 95       	ret
 46c:	83 e0       	ldi	r24, 0x03	; 3
 46e:	08 95       	ret

00000470 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 470:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 472:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <USB_ControlRequest+0x6>
 476:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <USB_ControlRequest+0x7>
 47a:	86 17       	cp	r24, r22
 47c:	97 07       	cpc	r25, r23
 47e:	a0 f0       	brcs	.+40     	; 0x4a8 <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 480:	61 15       	cp	r22, r1
 482:	71 05       	cpc	r23, r1
 484:	29 f4       	brne	.+10     	; 0x490 <Endpoint_Write_Control_PStream_LE+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 486:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 48a:	8e 77       	andi	r24, 0x7E	; 126
 48c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 490:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 492:	61 15       	cp	r22, r1
 494:	71 05       	cpc	r23, r1
 496:	51 f4       	brne	.+20     	; 0x4ac <Endpoint_Write_Control_PStream_LE+0x3c>
 498:	91 11       	cpse	r25, r1
 49a:	08 c0       	rjmp	.+16     	; 0x4ac <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 49c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 4a0:	82 ff       	sbrs	r24, 2
 4a2:	33 c0       	rjmp	.+102    	; 0x50a <__stack+0xb>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	08 95       	ret
 4a8:	bc 01       	movw	r22, r24
 4aa:	f2 cf       	rjmp	.-28     	; 0x490 <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 4ac:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 4b0:	88 23       	and	r24, r24
 4b2:	b9 f1       	breq	.+110    	; 0x522 <__stack+0x23>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 4b4:	85 30       	cpi	r24, 0x05	; 5
 4b6:	b9 f1       	breq	.+110    	; 0x526 <__stack+0x27>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 4b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
 4bc:	83 fd       	sbrc	r24, 3
 4be:	2f c0       	rjmp	.+94     	; 0x51e <__stack+0x1f>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsOUTReceived())
 4c4:	82 fd       	sbrc	r24, 2
 4c6:	ea cf       	rjmp	.-44     	; 0x49c <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsINReady())
 4cc:	80 ff       	sbrs	r24, 0
 4ce:	e1 cf       	rjmp	.-62     	; 0x492 <Endpoint_Write_Control_PStream_LE+0x22>
					return UEBCLX;
 4d0:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 4d4:	30 e0       	ldi	r19, 0x00	; 0
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4d6:	61 15       	cp	r22, r1
 4d8:	71 05       	cpc	r23, r1
 4da:	19 f0       	breq	.+6      	; 0x4e2 <Endpoint_Write_Control_PStream_LE+0x72>
 4dc:	28 30       	cpi	r18, 0x08	; 8
 4de:	31 05       	cpc	r19, r1
 4e0:	58 f0       	brcs	.+22     	; 0x4f8 <Endpoint_Write_Control_PStream_LE+0x88>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	28 30       	cpi	r18, 0x08	; 8
 4e6:	31 05       	cpc	r19, r1
 4e8:	09 f0       	breq	.+2      	; 0x4ec <Endpoint_Write_Control_PStream_LE+0x7c>
 4ea:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4f0:	8e 77       	andi	r24, 0x7E	; 126
 4f2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4f6:	cd cf       	rjmp	.-102    	; 0x492 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 4f8:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 4fa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 4fe:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 500:	61 50       	subi	r22, 0x01	; 1
 502:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 504:	2f 5f       	subi	r18, 0xFF	; 255
 506:	3f 4f       	sbci	r19, 0xFF	; 255
 508:	e6 cf       	rjmp	.-52     	; 0x4d6 <Endpoint_Write_Control_PStream_LE+0x66>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 50a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 50e:	88 23       	and	r24, r24
 510:	41 f0       	breq	.+16     	; 0x522 <__stack+0x23>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 512:	85 30       	cpi	r24, 0x05	; 5
 514:	41 f0       	breq	.+16     	; 0x526 <__stack+0x27>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 516:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
 51a:	83 ff       	sbrs	r24, 3
 51c:	bf cf       	rjmp	.-130    	; 0x49c <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
 51e:	81 e0       	ldi	r24, 0x01	; 1
}
 520:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 522:	82 e0       	ldi	r24, 0x02	; 2
 524:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 526:	83 e0       	ldi	r24, 0x03	; 3
 528:	08 95       	ret

0000052a <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 52a:	98 2f       	mov	r25, r24
 52c:	95 30       	cpi	r25, 0x05	; 5
 52e:	28 f0       	brcs	.+10     	; 0x53a <Endpoint_ConfigureEndpoint_Prv+0x10>
 530:	8f 70       	andi	r24, 0x0F	; 15
 532:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	08 95       	ret
 53a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 53e:	24 2f       	mov	r18, r20
 540:	76 2f       	mov	r23, r22
 542:	50 e0       	ldi	r21, 0x00	; 0
 544:	98 17       	cp	r25, r24
 546:	31 f0       	breq	.+12     	; 0x554 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 548:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 54c:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 550:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 554:	21 fd       	sbrc	r18, 1
 556:	02 c0       	rjmp	.+4      	; 0x55c <Endpoint_ConfigureEndpoint_Prv+0x32>
 558:	9f 5f       	subi	r25, 0xFF	; 255
 55a:	e8 cf       	rjmp	.-48     	; 0x52c <Endpoint_ConfigureEndpoint_Prv+0x2>
 55c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 560:	3e 7f       	andi	r19, 0xFE	; 254
 562:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 566:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 56a:	3d 7f       	andi	r19, 0xFD	; 253
 56c:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 570:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 574:	31 60       	ori	r19, 0x01	; 1
 576:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 57a:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 57e:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 582:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 586:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
 58a:	27 fd       	sbrc	r18, 7
 58c:	e5 cf       	rjmp	.-54     	; 0x558 <Endpoint_ConfigureEndpoint_Prv+0x2e>
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	08 95       	ret

00000592 <Endpoint_ConfigureEndpointTable>:
 592:	0f 93       	push	r16
 594:	1f 93       	push	r17
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	06 2f       	mov	r16, r22
 59c:	ec 01       	movw	r28, r24
 59e:	10 e0       	ldi	r17, 0x00	; 0
 5a0:	10 13       	cpse	r17, r16
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <Endpoint_ConfigureEndpointTable+0x16>
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	0f c0       	rjmp	.+30     	; 0x5c6 <Endpoint_ConfigureEndpointTable+0x34>
 5a8:	28 81       	ld	r18, Y
 5aa:	21 11       	cpse	r18, r1
 5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <Endpoint_ConfigureEndpointTable+0x22>
 5ae:	1f 5f       	subi	r17, 0xFF	; 255
 5b0:	25 96       	adiw	r28, 0x05	; 5
 5b2:	f6 cf       	rjmp	.-20     	; 0x5a0 <Endpoint_ConfigureEndpointTable+0xe>
 5b4:	9c 81       	ldd	r25, Y+4	; 0x04
 5b6:	a9 81       	ldd	r26, Y+1	; 0x01
 5b8:	ba 81       	ldd	r27, Y+2	; 0x02
 5ba:	6b 81       	ldd	r22, Y+3	; 0x03
 5bc:	82 2f       	mov	r24, r18
 5be:	8f 70       	andi	r24, 0x0F	; 15
 5c0:	85 30       	cpi	r24, 0x05	; 5
 5c2:	30 f0       	brcs	.+12     	; 0x5d0 <Endpoint_ConfigureEndpointTable+0x3e>
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	1f 91       	pop	r17
 5cc:	0f 91       	pop	r16
 5ce:	08 95       	ret
 5d0:	42 e0       	ldi	r20, 0x02	; 2
 5d2:	92 30       	cpi	r25, 0x02	; 2
 5d4:	08 f0       	brcs	.+2      	; 0x5d8 <Endpoint_ConfigureEndpointTable+0x46>
 5d6:	46 e0       	ldi	r20, 0x06	; 6
 5d8:	e8 e0       	ldi	r30, 0x08	; 8
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	ea 17       	cp	r30, r26
 5e0:	fb 07       	cpc	r31, r27
 5e2:	78 f0       	brcs	.+30     	; 0x602 <Endpoint_ConfigureEndpointTable+0x70>
 5e4:	92 95       	swap	r25
 5e6:	90 7f       	andi	r25, 0xF0	; 240
 5e8:	49 2b       	or	r20, r25
 5ea:	62 95       	swap	r22
 5ec:	66 0f       	add	r22, r22
 5ee:	66 0f       	add	r22, r22
 5f0:	60 7c       	andi	r22, 0xC0	; 192
 5f2:	22 1f       	adc	r18, r18
 5f4:	22 27       	eor	r18, r18
 5f6:	22 1f       	adc	r18, r18
 5f8:	62 2b       	or	r22, r18
 5fa:	97 df       	rcall	.-210    	; 0x52a <Endpoint_ConfigureEndpoint_Prv>
 5fc:	81 11       	cpse	r24, r1
 5fe:	d7 cf       	rjmp	.-82     	; 0x5ae <Endpoint_ConfigureEndpointTable+0x1c>
 600:	e1 cf       	rjmp	.-62     	; 0x5c4 <Endpoint_ConfigureEndpointTable+0x32>
 602:	9f 5f       	subi	r25, 0xFF	; 255
 604:	ee 0f       	add	r30, r30
 606:	ff 1f       	adc	r31, r31
 608:	ea cf       	rjmp	.-44     	; 0x5de <Endpoint_ConfigureEndpointTable+0x4c>

0000060a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 60a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_ControlRequest>
 60e:	87 ff       	sbrs	r24, 7
 610:	13 c0       	rjmp	.+38     	; 0x638 <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 612:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 616:	82 ff       	sbrs	r24, 2
 618:	06 c0       	rjmp	.+12     	; 0x626 <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 61a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 61e:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 620:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 624:	04 c0       	rjmp	.+8      	; 0x62e <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 626:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_DeviceState>
 62a:	81 11       	cpse	r24, r1
 62c:	f2 cf       	rjmp	.-28     	; 0x612 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
 62e:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 630:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_DeviceState>
 634:	88 23       	and	r24, r24
 636:	d9 f3       	breq	.-10     	; 0x62e <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 638:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		while (!(Endpoint_IsINReady()))
 63c:	80 ff       	sbrs	r24, 0
 63e:	f8 cf       	rjmp	.-16     	; 0x630 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 640:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 644:	8e 77       	andi	r24, 0x7E	; 126
 646:	ec cf       	rjmp	.-40     	; 0x620 <Endpoint_ClearStatusStage+0x16>

00000648 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 648:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
 64c:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
 650:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 652:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 656:	90 ff       	sbrs	r25, 0
 658:	06 c0       	rjmp	.+12     	; 0x666 <Endpoint_WaitUntilReady+0x1e>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 65a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 65e:	90 ff       	sbrs	r25, 0
 660:	06 c0       	rjmp	.+12     	; 0x66e <Endpoint_WaitUntilReady+0x26>
			  return ENDPOINT_READYWAIT_NoError;
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 666:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 66a:	92 fd       	sbrc	r25, 2
 66c:	fa cf       	rjmp	.-12     	; 0x662 <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 66e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 672:	99 23       	and	r25, r25
 674:	91 f0       	breq	.+36     	; 0x69a <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 676:	95 30       	cpi	r25, 0x05	; 5
 678:	91 f0       	breq	.+36     	; 0x69e <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 67a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 67e:	95 fd       	sbrc	r25, 5
 680:	10 c0       	rjmp	.+32     	; 0x6a2 <Endpoint_WaitUntilReady+0x5a>
 682:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
 686:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 68a:	24 17       	cp	r18, r20
 68c:	35 07       	cpc	r19, r21
 68e:	09 f3       	breq	.-62     	; 0x652 <Endpoint_WaitUntilReady+0xa>
 690:	81 50       	subi	r24, 0x01	; 1
 692:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 694:	f1 f6       	brne	.-68     	; 0x652 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 696:	84 e0       	ldi	r24, 0x04	; 4
 698:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 69a:	82 e0       	ldi	r24, 0x02	; 2
 69c:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
 69e:	83 e0       	ldi	r24, 0x03	; 3
 6a0:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
 6a2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
 6a4:	08 95       	ret

000006a6 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 6a6:	40 d0       	rcall	.+128    	; 0x728 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 6a8:	42 d0       	rcall	.+132    	; 0x72e <USB_INT_ClearAllInterrupts>
 6aa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 6ae:	8f 77       	andi	r24, 0x7F	; 127
 6b0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 6b4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
 6b8:	80 68       	ori	r24, 0x80	; 128
 6ba:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 6be:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON &= ~(1 << FRZCLK);
 6c2:	8f 7d       	andi	r24, 0xDF	; 223
 6c4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 6c8:	19 bc       	out	0x29, r1	; 41
				PLLCSR = USB_PLL_PSC;
 6ca:	82 e0       	ldi	r24, 0x02	; 2
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6cc:	89 bd       	out	0x29, r24	; 41
 6ce:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 6d0:	00 fe       	sbrs	r0, 0
 6d2:	fd cf       	rjmp	.-6      	; 0x6ce <USB_ResetInterface+0x28>
 6d4:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 6d8:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 6dc:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 6e0:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 6e4:	42 e0       	ldi	r20, 0x02	; 2
				return Endpoint_ConfigureEndpoint_Prv(Number,
 6e6:	60 e0       	ldi	r22, 0x00	; 0
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	1f df       	rcall	.-450    	; 0x52a <Endpoint_ConfigureEndpoint_Prv>
 6ec:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6f0:	8e 7f       	andi	r24, 0xFE	; 254
 6f2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 6f6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << SUSPE);
 6fa:	81 60       	ori	r24, 0x01	; 1
 6fc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 700:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << EORSTE);
 704:	88 60       	ori	r24, 0x08	; 8
 706:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 70a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
				UDCON  &= ~(1 << DETACH);
 70e:	8e 7f       	andi	r24, 0xFE	; 254
 710:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
 714:	08 95       	ret

00000716 <USB_Init>:
}
 716:	e3 e6       	ldi	r30, 0x63	; 99
				REGCR  &= ~(1 << REGDIS);
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	80 81       	ld	r24, Z
 71c:	8e 7f       	andi	r24, 0xFE	; 254
 71e:	80 83       	st	Z, r24
	USB_IsInitialized = true;
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <USB_IsInitialized>
	USB_ResetInterface();
 726:	bf cf       	rjmp	.-130    	; 0x6a6 <USB_ResetInterface>

00000728 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 728:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
	#endif
}
 72c:	08 95       	ret

0000072e <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 72e:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#endif
}
 732:	08 95       	ret

00000734 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 734:	1f 92       	push	r1
 736:	0f 92       	push	r0
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	0f 92       	push	r0
 73c:	11 24       	eor	r1, r1
 73e:	2f 93       	push	r18
 740:	3f 93       	push	r19
 742:	4f 93       	push	r20
 744:	5f 93       	push	r21
 746:	6f 93       	push	r22
 748:	7f 93       	push	r23
 74a:	8f 93       	push	r24
 74c:	9f 93       	push	r25
 74e:	af 93       	push	r26
 750:	bf 93       	push	r27
 752:	ef 93       	push	r30
 754:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 756:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 75a:	82 ff       	sbrs	r24, 2
 75c:	0a c0       	rjmp	.+20     	; 0x772 <__vector_11+0x3e>
						return (UDIEN  & (1 << SOFE));
 75e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 762:	82 ff       	sbrs	r24, 2
 764:	06 c0       	rjmp	.+12     	; 0x772 <__vector_11+0x3e>
						UDINT  &= ~(1 << SOFI);
 766:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 76a:	8b 7f       	andi	r24, 0xFB	; 251
 76c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 770:	20 d2       	rcall	.+1088   	; 0xbb2 <USB_Event_Stub>
						return (UDINT  & (1 << SUSPI));
 772:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 776:	80 ff       	sbrs	r24, 0
 778:	17 c0       	rjmp	.+46     	; 0x7a8 <__vector_11+0x74>
						return (UDIEN  & (1 << SUSPE));
 77a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 77e:	80 ff       	sbrs	r24, 0
 780:	13 c0       	rjmp	.+38     	; 0x7a8 <__vector_11+0x74>
						UDIEN  &= ~(1 << SUSPE);
 782:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 786:	8e 7f       	andi	r24, 0xFE	; 254
 788:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << WAKEUPE);
 78c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 790:	80 61       	ori	r24, 0x10	; 16
 792:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 796:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 79a:	80 62       	ori	r24, 0x20	; 32
 79c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				PLLCSR = 0;
 7a0:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 7a2:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
 7a6:	f3 dc       	rcall	.-1562   	; 0x18e <EVENT_USB_Device_Disconnect>
						return (UDINT  & (1 << WAKEUPI));
 7a8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 7ac:	84 ff       	sbrs	r24, 4
 7ae:	27 c0       	rjmp	.+78     	; 0x7fe <__vector_11+0xca>
						return (UDIEN  & (1 << WAKEUPE));
 7b0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 7b4:	84 ff       	sbrs	r24, 4
 7b6:	23 c0       	rjmp	.+70     	; 0x7fe <__vector_11+0xca>
				PLLCSR = USB_PLL_PSC;
 7b8:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 7ba:	82 e0       	ldi	r24, 0x02	; 2
 7bc:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 7be:	09 b4       	in	r0, 0x29	; 41
 7c0:	00 fe       	sbrs	r0, 0
 7c2:	fd cf       	rjmp	.-6      	; 0x7be <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 7c4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 7c8:	8f 7d       	andi	r24, 0xDF	; 223
 7ca:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						UDINT  &= ~(1 << WAKEUPI);
 7ce:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 7d2:	8f 7e       	andi	r24, 0xEF	; 239
 7d4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						UDIEN  &= ~(1 << WAKEUPE);
 7d8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 7dc:	8f 7e       	andi	r24, 0xEF	; 239
 7de:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << SUSPE);
 7e2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 7e6:	81 60       	ori	r24, 0x01	; 1
 7e8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 7ec:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <USB_Device_ConfigurationNumber>
 7f0:	88 23       	and	r24, r24
 7f2:	09 f4       	brne	.+2      	; 0x7f6 <__vector_11+0xc2>
 7f4:	40 c0       	rjmp	.+128    	; 0x876 <__vector_11+0x142>
		  USB_DeviceState = DEVICE_STATE_Configured;
 7f6:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 7f8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 7fc:	b3 dc       	rcall	.-1690   	; 0x164 <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << EORSTI));
 7fe:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 802:	83 ff       	sbrs	r24, 3
 804:	27 c0       	rjmp	.+78     	; 0x854 <__vector_11+0x120>
						return (UDIEN  & (1 << EORSTE));
 806:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 80a:	83 ff       	sbrs	r24, 3
 80c:	23 c0       	rjmp	.+70     	; 0x854 <__vector_11+0x120>
						UDINT  &= ~(1 << EORSTI);
 80e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 812:	87 7f       	andi	r24, 0xF7	; 247
 814:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 818:	82 e0       	ldi	r24, 0x02	; 2
 81a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 81e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
 822:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 826:	8e 7f       	andi	r24, 0xFE	; 254
 828:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						UDIEN  &= ~(1 << SUSPE);
 82c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 830:	8e 7f       	andi	r24, 0xFE	; 254
 832:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << WAKEUPE);
 836:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 83a:	80 61       	ori	r24, 0x10	; 16
 83c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 840:	42 e0       	ldi	r20, 0x02	; 2
 842:	60 e0       	ldi	r22, 0x00	; 0
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	71 de       	rcall	.-798    	; 0x52a <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
 848:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 84c:	88 60       	ori	r24, 0x08	; 8
 84e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 852:	af d1       	rcall	.+862    	; 0xbb2 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 854:	ff 91       	pop	r31
 856:	ef 91       	pop	r30
 858:	bf 91       	pop	r27
 85a:	af 91       	pop	r26
 85c:	9f 91       	pop	r25
 85e:	8f 91       	pop	r24
 860:	7f 91       	pop	r23
 862:	6f 91       	pop	r22
 864:	5f 91       	pop	r21
 866:	4f 91       	pop	r20
 868:	3f 91       	pop	r19
 86a:	2f 91       	pop	r18
 86c:	0f 90       	pop	r0
 86e:	0f be       	out	0x3f, r0	; 63
 870:	0f 90       	pop	r0
 872:	1f 90       	pop	r1
 874:	18 95       	reti
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 876:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 87a:	87 fd       	sbrc	r24, 7
 87c:	02 c0       	rjmp	.+4      	; 0x882 <__vector_11+0x14e>
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	bb cf       	rjmp	.-138    	; 0x7f8 <__vector_11+0xc4>
 882:	83 e0       	ldi	r24, 0x03	; 3
 884:	b9 cf       	rjmp	.-142    	; 0x7f8 <__vector_11+0xc4>

00000886 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 886:	1f 92       	push	r1
 888:	0f 92       	push	r0
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	0f 92       	push	r0
 88e:	11 24       	eor	r1, r1
 890:	2f 93       	push	r18
 892:	3f 93       	push	r19
 894:	4f 93       	push	r20
 896:	5f 93       	push	r21
 898:	6f 93       	push	r22
 89a:	7f 93       	push	r23
 89c:	8f 93       	push	r24
 89e:	9f 93       	push	r25
 8a0:	af 93       	push	r26
 8a2:	bf 93       	push	r27
 8a4:	cf 93       	push	r28
 8a6:	ef 93       	push	r30
 8a8:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 8aa:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 8ae:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 8b0:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 8b4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						UEIENX &= ~(1 << RXSTPE);
 8b8:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 8bc:	87 7f       	andi	r24, 0xF7	; 247
 8be:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 8c2:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 8c4:	1b d0       	rcall	.+54     	; 0x8fc <USB_Device_ProcessControlRequest>
 8c6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						UEIENX |= (1 << RXSTPE);
 8ca:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 8ce:	88 60       	ori	r24, 0x08	; 8
 8d0:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 8d4:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 8d8:	ff 91       	pop	r31
 8da:	ef 91       	pop	r30
 8dc:	cf 91       	pop	r28
 8de:	bf 91       	pop	r27
 8e0:	af 91       	pop	r26
 8e2:	9f 91       	pop	r25
 8e4:	8f 91       	pop	r24
 8e6:	7f 91       	pop	r23
 8e8:	6f 91       	pop	r22
 8ea:	5f 91       	pop	r21
 8ec:	4f 91       	pop	r20
 8ee:	3f 91       	pop	r19
 8f0:	2f 91       	pop	r18
 8f2:	0f 90       	pop	r0
 8f4:	0f be       	out	0x3f, r0	; 63
 8f6:	0f 90       	pop	r0
 8f8:	1f 90       	pop	r1
 8fa:	18 95       	reti

000008fc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 8fc:	1f 93       	push	r17
 8fe:	cf 93       	push	r28
 900:	df 93       	push	r29
 902:	cd b7       	in	r28, 0x3d	; 61
 904:	de b7       	in	r29, 0x3e	; 62
 906:	aa 97       	sbiw	r28, 0x2a	; 42
 908:	0f b6       	in	r0, 0x3f	; 63
 90a:	f8 94       	cli
 90c:	de bf       	out	0x3e, r29	; 62
 90e:	0f be       	out	0x3f, r0	; 63
 910:	cd bf       	out	0x3d, r28	; 61
 912:	e0 e3       	ldi	r30, 0x30	; 48
 914:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 916:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 91a:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 91c:	21 e0       	ldi	r18, 0x01	; 1
 91e:	e8 33       	cpi	r30, 0x38	; 56
 920:	f2 07       	cpc	r31, r18
 922:	c9 f7       	brne	.-14     	; 0x916 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
 924:	38 dc       	rcall	.-1936   	; 0x196 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 926:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
 92a:	83 ff       	sbrs	r24, 3
 92c:	10 c0       	rjmp	.+32     	; 0x94e <USB_Device_ProcessControlRequest+0x52>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 92e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 932:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <USB_ControlRequest+0x1>
 936:	95 30       	cpi	r25, 0x05	; 5
 938:	09 f4       	brne	.+2      	; 0x93c <USB_Device_ProcessControlRequest+0x40>
 93a:	d8 c0       	rjmp	.+432    	; 0xaec <USB_Device_ProcessControlRequest+0x1f0>
 93c:	00 f5       	brcc	.+64     	; 0x97e <USB_Device_ProcessControlRequest+0x82>
 93e:	91 30       	cpi	r25, 0x01	; 1
 940:	09 f4       	brne	.+2      	; 0x944 <USB_Device_ProcessControlRequest+0x48>
 942:	8b c0       	rjmp	.+278    	; 0xa5a <USB_Device_ProcessControlRequest+0x15e>
 944:	08 f4       	brcc	.+2      	; 0x948 <USB_Device_ProcessControlRequest+0x4c>
 946:	61 c0       	rjmp	.+194    	; 0xa0a <USB_Device_ProcessControlRequest+0x10e>
 948:	93 30       	cpi	r25, 0x03	; 3
 94a:	09 f4       	brne	.+2      	; 0x94e <USB_Device_ProcessControlRequest+0x52>
 94c:	86 c0       	rjmp	.+268    	; 0xa5a <USB_Device_ProcessControlRequest+0x15e>
 94e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 952:	83 ff       	sbrs	r24, 3
 954:	0a c0       	rjmp	.+20     	; 0x96a <USB_Device_ProcessControlRequest+0x6e>
				UEINTX &= ~(1 << RXSTPI);
 956:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 95a:	87 7f       	andi	r24, 0xF7	; 247
 95c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				UECONX |= (1 << STALLRQ);
 960:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 964:	80 62       	ori	r24, 0x20	; 32
 966:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 96a:	aa 96       	adiw	r28, 0x2a	; 42
 96c:	0f b6       	in	r0, 0x3f	; 63
 96e:	f8 94       	cli
 970:	de bf       	out	0x3e, r29	; 62
 972:	0f be       	out	0x3f, r0	; 63
 974:	cd bf       	out	0x3d, r28	; 61
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	1f 91       	pop	r17
 97c:	08 95       	ret
		switch (USB_ControlRequest.bRequest)
 97e:	98 30       	cpi	r25, 0x08	; 8
 980:	09 f4       	brne	.+2      	; 0x984 <USB_Device_ProcessControlRequest+0x88>
 982:	ec c0       	rjmp	.+472    	; 0xb5c <USB_Device_ProcessControlRequest+0x260>
 984:	99 30       	cpi	r25, 0x09	; 9
 986:	09 f4       	brne	.+2      	; 0x98a <USB_Device_ProcessControlRequest+0x8e>
 988:	f6 c0       	rjmp	.+492    	; 0xb76 <USB_Device_ProcessControlRequest+0x27a>
 98a:	96 30       	cpi	r25, 0x06	; 6
 98c:	01 f7       	brne	.-64     	; 0x94e <USB_Device_ProcessControlRequest+0x52>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 98e:	80 58       	subi	r24, 0x80	; 128
 990:	82 30       	cpi	r24, 0x02	; 2
 992:	e8 f6       	brcc	.-70     	; 0x94e <USB_Device_ProcessControlRequest+0x52>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 994:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <USB_ControlRequest+0x2>
 998:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <USB_ControlRequest+0x3>
 99c:	8c 3d       	cpi	r24, 0xDC	; 220
 99e:	23 e0       	ldi	r18, 0x03	; 3
 9a0:	92 07       	cpc	r25, r18
 9a2:	09 f0       	breq	.+2      	; 0x9a6 <USB_Device_ProcessControlRequest+0xaa>
 9a4:	c6 c0       	rjmp	.+396    	; 0xb32 <USB_Device_ProcessControlRequest+0x236>
	SignatureDescriptor.Header.Type = DTYPE_String;
 9a6:	83 e0       	ldi	r24, 0x03	; 3
 9a8:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 9aa:	8a e2       	ldi	r24, 0x2A	; 42
 9ac:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 9ae:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 9b0:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 9b2:	de 01       	movw	r26, r28
 9b4:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 9b6:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 9b8:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 9ba:	51 e2       	ldi	r21, 0x21	; 33
 9bc:	e3 2f       	mov	r30, r19
 9be:	f0 e0       	ldi	r31, 0x00	; 0
 9c0:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
 9c4:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 9c6:	20 ff       	sbrs	r18, 0
 9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <USB_Device_ProcessControlRequest+0xd4>
					{
						SerialByte >>= 4;
 9ca:	e2 95       	swap	r30
 9cc:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 9ce:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 9d0:	ef 70       	andi	r30, 0x0F	; 15
 9d2:	8e 2f       	mov	r24, r30
 9d4:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 9d6:	ea 30       	cpi	r30, 0x0A	; 10
 9d8:	08 f4       	brcc	.+2      	; 0x9dc <USB_Device_ProcessControlRequest+0xe0>
 9da:	a9 c0       	rjmp	.+338    	; 0xb2e <USB_Device_ProcessControlRequest+0x232>
 9dc:	c7 96       	adiw	r24, 0x37	; 55
 9de:	8d 93       	st	X+, r24
 9e0:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 9e2:	2f 5f       	subi	r18, 0xFF	; 255
 9e4:	24 31       	cpi	r18, 0x14	; 20
 9e6:	51 f7       	brne	.-44     	; 0x9bc <USB_Device_ProcessControlRequest+0xc0>
				SREG = GlobalIntState;
 9e8:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
 9ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 9ee:	87 7f       	andi	r24, 0xF7	; 247
 9f0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 9f4:	6a e2       	ldi	r22, 0x2A	; 42
 9f6:	70 e0       	ldi	r23, 0x00	; 0
 9f8:	ce 01       	movw	r24, r28
 9fa:	01 96       	adiw	r24, 0x01	; 1
 9fc:	dd dc       	rcall	.-1606   	; 0x3b8 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 9fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a02:	8b 77       	andi	r24, 0x7B	; 123
 a04:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a08:	a2 cf       	rjmp	.-188    	; 0x94e <USB_Device_ProcessControlRequest+0x52>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a0a:	80 38       	cpi	r24, 0x80	; 128
 a0c:	99 f0       	breq	.+38     	; 0xa34 <USB_Device_ProcessControlRequest+0x138>
 a0e:	82 38       	cpi	r24, 0x82	; 130
 a10:	09 f0       	breq	.+2      	; 0xa14 <USB_Device_ProcessControlRequest+0x118>
 a12:	9d cf       	rjmp	.-198    	; 0x94e <USB_Device_ProcessControlRequest+0x52>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a14:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <USB_ControlRequest+0x4>
 a18:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 a1a:	85 30       	cpi	r24, 0x05	; 5
 a1c:	08 f0       	brcs	.+2      	; 0xa20 <USB_Device_ProcessControlRequest+0x124>
 a1e:	97 cf       	rjmp	.-210    	; 0x94e <USB_Device_ProcessControlRequest+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a20:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a24:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 a28:	85 fb       	bst	r24, 5
 a2a:	88 27       	eor	r24, r24
 a2c:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a2e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 a32:	06 c0       	rjmp	.+12     	; 0xa40 <USB_Device_ProcessControlRequest+0x144>
	uint8_t CurrentStatus = 0;
 a34:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
 a38:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <USB_Device_RemoteWakeupEnabled>
 a3c:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a3e:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
 a40:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a44:	97 7f       	andi	r25, 0xF7	; 247
 a46:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a4a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
 a4e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a52:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a56:	8e 77       	andi	r24, 0x7E	; 126
 a58:	32 c0       	rjmp	.+100    	; 0xabe <USB_Device_ProcessControlRequest+0x1c2>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a5a:	28 2f       	mov	r18, r24
 a5c:	2d 7f       	andi	r18, 0xFD	; 253
 a5e:	09 f0       	breq	.+2      	; 0xa62 <USB_Device_ProcessControlRequest+0x166>
 a60:	76 cf       	rjmp	.-276    	; 0x94e <USB_Device_ProcessControlRequest+0x52>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a62:	88 23       	and	r24, r24
 a64:	e9 f0       	breq	.+58     	; 0xaa0 <USB_Device_ProcessControlRequest+0x1a4>
 a66:	82 30       	cpi	r24, 0x02	; 2
 a68:	09 f0       	breq	.+2      	; 0xa6c <USB_Device_ProcessControlRequest+0x170>
 a6a:	71 cf       	rjmp	.-286    	; 0x94e <USB_Device_ProcessControlRequest+0x52>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a6c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <USB_ControlRequest+0x2>
 a70:	81 11       	cpse	r24, r1
 a72:	20 c0       	rjmp	.+64     	; 0xab4 <USB_Device_ProcessControlRequest+0x1b8>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a74:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <USB_ControlRequest+0x4>
 a78:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 a7a:	2f ef       	ldi	r18, 0xFF	; 255
 a7c:	28 0f       	add	r18, r24
 a7e:	24 30       	cpi	r18, 0x04	; 4
 a80:	08 f0       	brcs	.+2      	; 0xa84 <USB_Device_ProcessControlRequest+0x188>
 a82:	65 cf       	rjmp	.-310    	; 0x94e <USB_Device_ProcessControlRequest+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a84:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
 a88:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a8c:	20 ff       	sbrs	r18, 0
 a8e:	12 c0       	rjmp	.+36     	; 0xab4 <USB_Device_ProcessControlRequest+0x1b8>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a90:	93 30       	cpi	r25, 0x03	; 3
 a92:	c9 f4       	brne	.+50     	; 0xac6 <USB_Device_ProcessControlRequest+0x1ca>
				UECONX |= (1 << STALLRQ);
 a94:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 a98:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
 a9a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 a9e:	0a c0       	rjmp	.+20     	; 0xab4 <USB_Device_ProcessControlRequest+0x1b8>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 aa0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <USB_ControlRequest+0x2>
 aa4:	81 30       	cpi	r24, 0x01	; 1
 aa6:	09 f0       	breq	.+2      	; 0xaaa <USB_Device_ProcessControlRequest+0x1ae>
 aa8:	52 cf       	rjmp	.-348    	; 0x94e <USB_Device_ProcessControlRequest+0x52>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 aaa:	93 30       	cpi	r25, 0x03	; 3
 aac:	09 f0       	breq	.+2      	; 0xab0 <USB_Device_ProcessControlRequest+0x1b4>
 aae:	80 e0       	ldi	r24, 0x00	; 0
 ab0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ab4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				UEINTX &= ~(1 << RXSTPI);
 ab8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 abc:	87 7f       	andi	r24, 0xF7	; 247
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 abe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearStatusStage();
 ac2:	a3 dd       	rcall	.-1210   	; 0x60a <Endpoint_ClearStatusStage>
 ac4:	44 cf       	rjmp	.-376    	; 0x94e <USB_Device_ProcessControlRequest+0x52>
				UECONX |= (1 << STALLRQC);
 ac6:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 aca:	90 61       	ori	r25, 0x10	; 16
 acc:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 ad0:	21 e0       	ldi	r18, 0x01	; 1
 ad2:	30 e0       	ldi	r19, 0x00	; 0
 ad4:	01 c0       	rjmp	.+2      	; 0xad8 <USB_Device_ProcessControlRequest+0x1dc>
 ad6:	22 0f       	add	r18, r18
 ad8:	8a 95       	dec	r24
 ada:	ea f7       	brpl	.-6      	; 0xad6 <USB_Device_ProcessControlRequest+0x1da>
 adc:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
 ae0:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UECONX |= (1 << RSTDT);
 ae4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 ae8:	88 60       	ori	r24, 0x08	; 8
 aea:	d7 cf       	rjmp	.-82     	; 0xa9a <USB_Device_ProcessControlRequest+0x19e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 aec:	81 11       	cpse	r24, r1
 aee:	2f cf       	rjmp	.-418    	; 0x94e <USB_Device_ProcessControlRequest+0x52>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 af0:	10 91 32 01 	lds	r17, 0x0132	; 0x800132 <USB_ControlRequest+0x2>
 af4:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 af6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 afa:	80 78       	andi	r24, 0x80	; 128
 afc:	81 2b       	or	r24, r17
 afe:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
				UEINTX &= ~(1 << RXSTPI);
 b02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b06:	87 7f       	andi	r24, 0xF7	; 247
 b08:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearStatusStage();
 b0c:	7e dd       	rcall	.-1284   	; 0x60a <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	while (!(Endpoint_IsINReady()));
 b12:	80 ff       	sbrs	r24, 0
 b14:	fc cf       	rjmp	.-8      	; 0xb0e <USB_Device_ProcessControlRequest+0x212>
				UDADDR |= (1 << ADDEN);
 b16:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 b1a:	80 68       	ori	r24, 0x80	; 128
 b1c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b20:	83 e0       	ldi	r24, 0x03	; 3
 b22:	11 11       	cpse	r17, r1
 b24:	01 c0       	rjmp	.+2      	; 0xb28 <USB_Device_ProcessControlRequest+0x22c>
 b26:	82 e0       	ldi	r24, 0x02	; 2
 b28:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_DeviceState>
 b2c:	10 cf       	rjmp	.-480    	; 0x94e <USB_Device_ProcessControlRequest+0x52>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b2e:	c0 96       	adiw	r24, 0x30	; 48
 b30:	56 cf       	rjmp	.-340    	; 0x9de <USB_Device_ProcessControlRequest+0xe2>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b32:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <USB_ControlRequest+0x4>
 b36:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <USB_ControlRequest+0x5>
 b3a:	ae 01       	movw	r20, r28
 b3c:	4f 5f       	subi	r20, 0xFF	; 255
 b3e:	5f 4f       	sbci	r21, 0xFF	; 255
 b40:	be db       	rcall	.-2180   	; 0x2be <CALLBACK_USB_GetDescriptor>
 b42:	bc 01       	movw	r22, r24
 b44:	89 2b       	or	r24, r25
 b46:	09 f4       	brne	.+2      	; 0xb4a <USB_Device_ProcessControlRequest+0x24e>
 b48:	02 cf       	rjmp	.-508    	; 0x94e <USB_Device_ProcessControlRequest+0x52>
				UEINTX &= ~(1 << RXSTPI);
 b4a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b4e:	97 7f       	andi	r25, 0xF7	; 247
 b50:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b54:	89 81       	ldd	r24, Y+1	; 0x01
 b56:	9a 81       	ldd	r25, Y+2	; 0x02
 b58:	8b dc       	rcall	.-1770   	; 0x470 <Endpoint_Write_Control_PStream_LE>
 b5a:	51 cf       	rjmp	.-350    	; 0x9fe <USB_Device_ProcessControlRequest+0x102>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b5c:	80 38       	cpi	r24, 0x80	; 128
 b5e:	09 f0       	breq	.+2      	; 0xb62 <USB_Device_ProcessControlRequest+0x266>
 b60:	f6 ce       	rjmp	.-532    	; 0x94e <USB_Device_ProcessControlRequest+0x52>
 b62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b66:	87 7f       	andi	r24, 0xF7	; 247
 b68:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 b6c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <USB_Device_ConfigurationNumber>
				UEDATX = Data;
 b70:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 b74:	6e cf       	rjmp	.-292    	; 0xa52 <USB_Device_ProcessControlRequest+0x156>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b76:	81 11       	cpse	r24, r1
 b78:	ea ce       	rjmp	.-556    	; 0x94e <USB_Device_ProcessControlRequest+0x52>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b7a:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <USB_ControlRequest+0x2>
 b7e:	92 30       	cpi	r25, 0x02	; 2
 b80:	08 f0       	brcs	.+2      	; 0xb84 <USB_Device_ProcessControlRequest+0x288>
 b82:	e5 ce       	rjmp	.-566    	; 0x94e <USB_Device_ProcessControlRequest+0x52>
				UEINTX &= ~(1 << RXSTPI);
 b84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b88:	87 7f       	andi	r24, 0xF7	; 247
 b8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b8e:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
 b92:	3b dd       	rcall	.-1418   	; 0x60a <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
 b94:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <USB_Device_ConfigurationNumber>
 b98:	88 23       	and	r24, r24
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b9a:	29 f0       	breq	.+10     	; 0xba6 <USB_Device_ProcessControlRequest+0x2aa>
 b9c:	84 e0       	ldi	r24, 0x04	; 4
 b9e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
 ba2:	f6 da       	rcall	.-2580   	; 0x190 <EVENT_USB_Device_ConfigurationChanged>
 ba4:	d4 ce       	rjmp	.-600    	; 0x94e <USB_Device_ProcessControlRequest+0x52>
				return (UDADDR & (1 << ADDEN));
 ba6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 baa:	87 fd       	sbrc	r24, 7
 bac:	f7 cf       	rjmp	.-18     	; 0xb9c <USB_Device_ProcessControlRequest+0x2a0>
 bae:	81 e0       	ldi	r24, 0x01	; 1
 bb0:	f6 cf       	rjmp	.-20     	; 0xb9e <USB_Device_ProcessControlRequest+0x2a2>

00000bb2 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 bb2:	08 95       	ret

00000bb4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 bb4:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 bb6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_DeviceState>
 bba:	88 23       	and	r24, r24
 bbc:	91 f0       	breq	.+36     	; 0xbe2 <USB_USBTask+0x2e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 bbe:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 bc2:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 bc4:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 bc8:	80 fd       	sbrc	r24, 0
 bca:	0d c0       	rjmp	.+26     	; 0xbe6 <USB_USBTask+0x32>
 bcc:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 bce:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bd0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bd4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 bd8:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 bda:	90 de       	rcall	.-736    	; 0x8fc <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bdc:	cf 70       	andi	r28, 0x0F	; 15
 bde:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
}
 be2:	cf 91       	pop	r28
 be4:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 be6:	80 e8       	ldi	r24, 0x80	; 128
 be8:	f2 cf       	rjmp	.-28     	; 0xbce <USB_USBTask+0x1a>

00000bea <CDC_Device_ConfigureEndpoints>:
void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
}
 bea:	cf 93       	push	r28
 bec:	df 93       	push	r29
 bee:	ec 01       	movw	r28, r24
 bf0:	fc 01       	movw	r30, r24
 bf2:	70 96       	adiw	r30, 0x10	; 16
 bf4:	8b e0       	ldi	r24, 0x0B	; 11
 bf6:	df 01       	movw	r26, r30
 bf8:	1d 92       	st	X+, r1
 bfa:	8a 95       	dec	r24
 bfc:	e9 f7       	brne	.-6      	; 0xbf8 <CDC_Device_ConfigureEndpoints+0xe>
 bfe:	82 e0       	ldi	r24, 0x02	; 2
 c00:	8c 83       	std	Y+4, r24	; 0x04
 c02:	89 87       	std	Y+9, r24	; 0x09
 c04:	83 e0       	ldi	r24, 0x03	; 3
 c06:	8e 87       	std	Y+14, r24	; 0x0e
 c08:	61 e0       	ldi	r22, 0x01	; 1
 c0a:	ce 01       	movw	r24, r28
 c0c:	01 96       	adiw	r24, 0x01	; 1
 c0e:	c1 dc       	rcall	.-1662   	; 0x592 <Endpoint_ConfigureEndpointTable>
 c10:	88 23       	and	r24, r24
 c12:	61 f0       	breq	.+24     	; 0xc2c <CDC_Device_ConfigureEndpoints+0x42>
 c14:	61 e0       	ldi	r22, 0x01	; 1
 c16:	ce 01       	movw	r24, r28
 c18:	06 96       	adiw	r24, 0x06	; 6
 c1a:	bb dc       	rcall	.-1674   	; 0x592 <Endpoint_ConfigureEndpointTable>
 c1c:	88 23       	and	r24, r24
 c1e:	31 f0       	breq	.+12     	; 0xc2c <CDC_Device_ConfigureEndpoints+0x42>
 c20:	61 e0       	ldi	r22, 0x01	; 1
 c22:	ce 01       	movw	r24, r28
 c24:	0b 96       	adiw	r24, 0x0b	; 11
 c26:	df 91       	pop	r29
 c28:	cf 91       	pop	r28
 c2a:	b3 cc       	rjmp	.-1690   	; 0x592 <Endpoint_ConfigureEndpointTable>
 c2c:	80 e0       	ldi	r24, 0x00	; 0
 c2e:	df 91       	pop	r29
 c30:	cf 91       	pop	r28
 c32:	08 95       	ret

00000c34 <CDC_Device_SendString>:
 c34:	db 01       	movw	r26, r22
 c36:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <USB_DeviceState>
 c3a:	24 30       	cpi	r18, 0x04	; 4
 c3c:	c9 f4       	brne	.+50     	; 0xc70 <CDC_Device_SendString+0x3c>
 c3e:	fc 01       	movw	r30, r24
 c40:	44 89       	ldd	r20, Z+20	; 0x14
 c42:	55 89       	ldd	r21, Z+21	; 0x15
 c44:	66 89       	ldd	r22, Z+22	; 0x16
 c46:	77 89       	ldd	r23, Z+23	; 0x17
 c48:	45 2b       	or	r20, r21
 c4a:	46 2b       	or	r20, r22
 c4c:	47 2b       	or	r20, r23
 c4e:	81 f0       	breq	.+32     	; 0xc70 <CDC_Device_SendString+0x3c>
 c50:	81 81       	ldd	r24, Z+1	; 0x01
 c52:	8f 70       	andi	r24, 0x0F	; 15
 c54:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 c58:	fd 01       	movw	r30, r26
 c5a:	01 90       	ld	r0, Z+
 c5c:	00 20       	and	r0, r0
 c5e:	e9 f7       	brne	.-6      	; 0xc5a <CDC_Device_SendString+0x26>
 c60:	31 97       	sbiw	r30, 0x01	; 1
 c62:	bf 01       	movw	r22, r30
 c64:	6a 1b       	sub	r22, r26
 c66:	7b 0b       	sbc	r23, r27
 c68:	50 e0       	ldi	r21, 0x00	; 0
 c6a:	40 e0       	ldi	r20, 0x00	; 0
 c6c:	cd 01       	movw	r24, r26
 c6e:	57 cb       	rjmp	.-2386   	; 0x31e <Endpoint_Write_Stream_LE>
 c70:	82 e0       	ldi	r24, 0x02	; 2
 c72:	08 95       	ret

00000c74 <CDC_Device_SendByte>:
 c74:	cf 93       	push	r28
 c76:	c6 2f       	mov	r28, r22
 c78:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <USB_DeviceState>
 c7c:	24 30       	cpi	r18, 0x04	; 4
 c7e:	f9 f4       	brne	.+62     	; 0xcbe <CDC_Device_SendByte+0x4a>
 c80:	fc 01       	movw	r30, r24
 c82:	44 89       	ldd	r20, Z+20	; 0x14
 c84:	55 89       	ldd	r21, Z+21	; 0x15
 c86:	66 89       	ldd	r22, Z+22	; 0x16
 c88:	77 89       	ldd	r23, Z+23	; 0x17
 c8a:	45 2b       	or	r20, r21
 c8c:	46 2b       	or	r20, r22
 c8e:	47 2b       	or	r20, r23
 c90:	b1 f0       	breq	.+44     	; 0xcbe <CDC_Device_SendByte+0x4a>
 c92:	81 81       	ldd	r24, Z+1	; 0x01
 c94:	8f 70       	andi	r24, 0x0F	; 15
 c96:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 c9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c9e:	85 ff       	sbrs	r24, 5
 ca0:	05 c0       	rjmp	.+10     	; 0xcac <CDC_Device_SendByte+0x38>
 ca2:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 ca6:	80 e0       	ldi	r24, 0x00	; 0
 ca8:	cf 91       	pop	r28
 caa:	08 95       	ret
 cac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 cb0:	8e 77       	andi	r24, 0x7E	; 126
 cb2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 cb6:	c8 dc       	rcall	.-1648   	; 0x648 <Endpoint_WaitUntilReady>
 cb8:	88 23       	and	r24, r24
 cba:	99 f3       	breq	.-26     	; 0xca2 <CDC_Device_SendByte+0x2e>
 cbc:	f5 cf       	rjmp	.-22     	; 0xca8 <CDC_Device_SendByte+0x34>
 cbe:	82 e0       	ldi	r24, 0x02	; 2
 cc0:	f3 cf       	rjmp	.-26     	; 0xca8 <CDC_Device_SendByte+0x34>

00000cc2 <CDC_Device_putchar>:
 cc2:	fb 01       	movw	r30, r22
 cc4:	68 2f       	mov	r22, r24
 cc6:	84 85       	ldd	r24, Z+12	; 0x0c
 cc8:	95 85       	ldd	r25, Z+13	; 0x0d
 cca:	d4 df       	rcall	.-88     	; 0xc74 <CDC_Device_SendByte>
 ccc:	21 e0       	ldi	r18, 0x01	; 1
 cce:	30 e0       	ldi	r19, 0x00	; 0
 cd0:	81 11       	cpse	r24, r1
 cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <CDC_Device_putchar+0x16>
 cd4:	30 e0       	ldi	r19, 0x00	; 0
 cd6:	20 e0       	ldi	r18, 0x00	; 0
 cd8:	88 27       	eor	r24, r24
 cda:	99 27       	eor	r25, r25
 cdc:	82 1b       	sub	r24, r18
 cde:	93 0b       	sbc	r25, r19
 ce0:	08 95       	ret

00000ce2 <CDC_Device_Flush>:
 ce2:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <USB_DeviceState>
 ce6:	24 30       	cpi	r18, 0x04	; 4
 ce8:	29 f5       	brne	.+74     	; 0xd34 <CDC_Device_Flush+0x52>
 cea:	fc 01       	movw	r30, r24
 cec:	44 89       	ldd	r20, Z+20	; 0x14
 cee:	55 89       	ldd	r21, Z+21	; 0x15
 cf0:	66 89       	ldd	r22, Z+22	; 0x16
 cf2:	77 89       	ldd	r23, Z+23	; 0x17
 cf4:	45 2b       	or	r20, r21
 cf6:	46 2b       	or	r20, r22
 cf8:	47 2b       	or	r20, r23
 cfa:	e1 f0       	breq	.+56     	; 0xd34 <CDC_Device_Flush+0x52>
 cfc:	81 81       	ldd	r24, Z+1	; 0x01
 cfe:	8f 70       	andi	r24, 0x0F	; 15
 d00:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 d04:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 d08:	81 11       	cpse	r24, r1
 d0a:	02 c0       	rjmp	.+4      	; 0xd10 <CDC_Device_Flush+0x2e>
 d0c:	80 e0       	ldi	r24, 0x00	; 0
 d0e:	08 95       	ret
 d10:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d18:	8e 77       	andi	r24, 0x7E	; 126
 d1a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d1e:	95 fd       	sbrc	r25, 5
 d20:	f5 cf       	rjmp	.-22     	; 0xd0c <CDC_Device_Flush+0x2a>
 d22:	92 dc       	rcall	.-1756   	; 0x648 <Endpoint_WaitUntilReady>
 d24:	81 11       	cpse	r24, r1
 d26:	07 c0       	rjmp	.+14     	; 0xd36 <CDC_Device_Flush+0x54>
 d28:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d2c:	9e 77       	andi	r25, 0x7E	; 126
 d2e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d32:	08 95       	ret
 d34:	82 e0       	ldi	r24, 0x02	; 2
 d36:	08 95       	ret

00000d38 <CDC_Device_USBTask>:
 d38:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <USB_DeviceState>
 d3c:	24 30       	cpi	r18, 0x04	; 4
 d3e:	89 f4       	brne	.+34     	; 0xd62 <CDC_Device_USBTask+0x2a>
 d40:	fc 01       	movw	r30, r24
 d42:	44 89       	ldd	r20, Z+20	; 0x14
 d44:	55 89       	ldd	r21, Z+21	; 0x15
 d46:	66 89       	ldd	r22, Z+22	; 0x16
 d48:	77 89       	ldd	r23, Z+23	; 0x17
 d4a:	45 2b       	or	r20, r21
 d4c:	46 2b       	or	r20, r22
 d4e:	47 2b       	or	r20, r23
 d50:	41 f0       	breq	.+16     	; 0xd62 <CDC_Device_USBTask+0x2a>
 d52:	21 81       	ldd	r18, Z+1	; 0x01
 d54:	2f 70       	andi	r18, 0x0F	; 15
 d56:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 d5a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d5e:	20 fd       	sbrc	r18, 0
 d60:	c0 cf       	rjmp	.-128    	; 0xce2 <CDC_Device_Flush>
 d62:	08 95       	ret

00000d64 <CDC_Device_ReceiveByte>:
 d64:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <USB_DeviceState>
 d68:	24 30       	cpi	r18, 0x04	; 4
 d6a:	19 f0       	breq	.+6      	; 0xd72 <CDC_Device_ReceiveByte+0xe>
 d6c:	8f ef       	ldi	r24, 0xFF	; 255
 d6e:	9f ef       	ldi	r25, 0xFF	; 255
 d70:	08 95       	ret
 d72:	fc 01       	movw	r30, r24
 d74:	44 89       	ldd	r20, Z+20	; 0x14
 d76:	55 89       	ldd	r21, Z+21	; 0x15
 d78:	66 89       	ldd	r22, Z+22	; 0x16
 d7a:	77 89       	ldd	r23, Z+23	; 0x17
 d7c:	45 2b       	or	r20, r21
 d7e:	46 2b       	or	r20, r22
 d80:	47 2b       	or	r20, r23
 d82:	a1 f3       	breq	.-24     	; 0xd6c <CDC_Device_ReceiveByte+0x8>
 d84:	86 81       	ldd	r24, Z+6	; 0x06
 d86:	8f 70       	andi	r24, 0x0F	; 15
 d88:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 d8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d90:	82 ff       	sbrs	r24, 2
 d92:	ec cf       	rjmp	.-40     	; 0xd6c <CDC_Device_ReceiveByte+0x8>
 d94:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 d98:	88 23       	and	r24, r24
 d9a:	69 f0       	breq	.+26     	; 0xdb6 <CDC_Device_ReceiveByte+0x52>
 d9c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 da0:	90 e0       	ldi	r25, 0x00	; 0
 da2:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 da6:	21 11       	cpse	r18, r1
 da8:	05 c0       	rjmp	.+10     	; 0xdb4 <CDC_Device_ReceiveByte+0x50>
 daa:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 dae:	2b 77       	andi	r18, 0x7B	; 123
 db0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 db4:	08 95       	ret
 db6:	8f ef       	ldi	r24, 0xFF	; 255
 db8:	9f ef       	ldi	r25, 0xFF	; 255
 dba:	f3 cf       	rjmp	.-26     	; 0xda2 <CDC_Device_ReceiveByte+0x3e>

00000dbc <CDC_Device_getchar>:
 dbc:	fc 01       	movw	r30, r24
 dbe:	84 85       	ldd	r24, Z+12	; 0x0c
 dc0:	95 85       	ldd	r25, Z+13	; 0x0d
 dc2:	d0 df       	rcall	.-96     	; 0xd64 <CDC_Device_ReceiveByte>
 dc4:	97 ff       	sbrs	r25, 7
 dc6:	02 c0       	rjmp	.+4      	; 0xdcc <CDC_Device_getchar+0x10>
 dc8:	8e ef       	ldi	r24, 0xFE	; 254
 dca:	9f ef       	ldi	r25, 0xFF	; 255
 dcc:	08 95       	ret

00000dce <CDC_Device_CreateStream>:
 dce:	fb 01       	movw	r30, r22
 dd0:	2e e0       	ldi	r18, 0x0E	; 14
 dd2:	db 01       	movw	r26, r22
 dd4:	1d 92       	st	X+, r1
 dd6:	2a 95       	dec	r18
 dd8:	e9 f7       	brne	.-6      	; 0xdd4 <CDC_Device_CreateStream+0x6>
 dda:	23 e0       	ldi	r18, 0x03	; 3
 ddc:	23 83       	std	Z+3, r18	; 0x03
 dde:	21 e6       	ldi	r18, 0x61	; 97
 de0:	36 e0       	ldi	r19, 0x06	; 6
 de2:	31 87       	std	Z+9, r19	; 0x09
 de4:	20 87       	std	Z+8, r18	; 0x08
 de6:	2e ed       	ldi	r18, 0xDE	; 222
 de8:	36 e0       	ldi	r19, 0x06	; 6
 dea:	33 87       	std	Z+11, r19	; 0x0b
 dec:	22 87       	std	Z+10, r18	; 0x0a
 dee:	95 87       	std	Z+13, r25	; 0x0d
 df0:	84 87       	std	Z+12, r24	; 0x0c
 df2:	08 95       	ret

00000df4 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
 df4:	08 95       	ret

00000df6 <CDC_Device_ProcessControlRequest>:
{
 df6:	cf 93       	push	r28
 df8:	df 93       	push	r29
 dfa:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 dfc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (!(Endpoint_IsSETUPReceived()))
 e00:	83 ff       	sbrs	r24, 3
 e02:	10 c0       	rjmp	.+32     	; 0xe24 <CDC_Device_ProcessControlRequest+0x2e>
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 e04:	28 81       	ld	r18, Y
 e06:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <USB_ControlRequest+0x4>
 e0a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <USB_ControlRequest+0x5>
 e0e:	28 17       	cp	r18, r24
 e10:	19 06       	cpc	r1, r25
 e12:	41 f4       	brne	.+16     	; 0xe24 <CDC_Device_ProcessControlRequest+0x2e>
	switch (USB_ControlRequest.bRequest)
 e14:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_ControlRequest+0x1>
 e18:	81 32       	cpi	r24, 0x21	; 33
 e1a:	e1 f0       	breq	.+56     	; 0xe54 <CDC_Device_ProcessControlRequest+0x5e>
 e1c:	30 f4       	brcc	.+12     	; 0xe2a <CDC_Device_ProcessControlRequest+0x34>
 e1e:	80 32       	cpi	r24, 0x20	; 32
 e20:	09 f4       	brne	.+2      	; 0xe24 <CDC_Device_ProcessControlRequest+0x2e>
 e22:	4d c0       	rjmp	.+154    	; 0xebe <CDC_Device_ProcessControlRequest+0xc8>
}
 e24:	df 91       	pop	r29
 e26:	cf 91       	pop	r28
 e28:	08 95       	ret
	switch (USB_ControlRequest.bRequest)
 e2a:	82 32       	cpi	r24, 0x22	; 34
 e2c:	09 f4       	brne	.+2      	; 0xe30 <CDC_Device_ProcessControlRequest+0x3a>
 e2e:	79 c0       	rjmp	.+242    	; 0xf22 <CDC_Device_ProcessControlRequest+0x12c>
 e30:	83 32       	cpi	r24, 0x23	; 35
 e32:	c1 f7       	brne	.-16     	; 0xe24 <CDC_Device_ProcessControlRequest+0x2e>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 e34:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_ControlRequest>
 e38:	81 32       	cpi	r24, 0x21	; 33
 e3a:	a1 f7       	brne	.-24     	; 0xe24 <CDC_Device_ProcessControlRequest+0x2e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 e40:	87 7f       	andi	r24, 0xF7	; 247
 e42:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_ClearStatusStage();
 e46:	e1 db       	rcall	.-2110   	; 0x60a <Endpoint_ClearStatusStage>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 e48:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <USB_ControlRequest+0x2>
 e4c:	ce 01       	movw	r24, r28
}
 e4e:	df 91       	pop	r29
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 e50:	cf 91       	pop	r28
 e52:	d0 cf       	rjmp	.-96     	; 0xdf4 <CDC_Device_Event_Stub>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 e54:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_ControlRequest>
 e58:	81 3a       	cpi	r24, 0xA1	; 161
 e5a:	21 f7       	brne	.-56     	; 0xe24 <CDC_Device_ProcessControlRequest+0x2e>
 e5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 e60:	87 7f       	andi	r24, 0xF7	; 247
 e62:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 e66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				while (!(Endpoint_IsINReady()));
 e6a:	80 ff       	sbrs	r24, 0
 e6c:	fc cf       	rjmp	.-8      	; 0xe66 <CDC_Device_ProcessControlRequest+0x70>
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 e6e:	8c 89       	ldd	r24, Y+20	; 0x14
 e70:	9d 89       	ldd	r25, Y+21	; 0x15
 e72:	ae 89       	ldd	r26, Y+22	; 0x16
 e74:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 e76:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
 e7a:	49 2f       	mov	r20, r25
 e7c:	5a 2f       	mov	r21, r26
 e7e:	6b 2f       	mov	r22, r27
 e80:	77 27       	eor	r23, r23
 e82:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 16);
 e86:	ad 01       	movw	r20, r26
 e88:	66 27       	eor	r22, r22
 e8a:	77 27       	eor	r23, r23
 e8c:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 24);
 e90:	8b 2f       	mov	r24, r27
 e92:	99 27       	eor	r25, r25
 e94:	aa 27       	eor	r26, r26
 e96:	bb 27       	eor	r27, r27
 e98:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 e9c:	88 8d       	ldd	r24, Y+24	; 0x18
				UEDATX = Data;
 e9e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 ea2:	89 8d       	ldd	r24, Y+25	; 0x19
 ea4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 ea8:	8a 8d       	ldd	r24, Y+26	; 0x1a
 eaa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 eae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 eb2:	8e 77       	andi	r24, 0x7E	; 126
 eb4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
}
 eb8:	df 91       	pop	r29
				Endpoint_ClearStatusStage();
 eba:	cf 91       	pop	r28
 ebc:	a6 cb       	rjmp	.-2228   	; 0x60a <Endpoint_ClearStatusStage>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ebe:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_ControlRequest>
 ec2:	81 32       	cpi	r24, 0x21	; 33
 ec4:	09 f0       	breq	.+2      	; 0xec8 <CDC_Device_ProcessControlRequest+0xd2>
 ec6:	ae cf       	rjmp	.-164    	; 0xe24 <CDC_Device_ProcessControlRequest+0x2e>
				UEINTX &= ~(1 << RXSTPI);
 ec8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 ecc:	87 7f       	andi	r24, 0xF7	; 247
 ece:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 ed2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				while (!(Endpoint_IsOUTReceived()))
 ed6:	82 ff       	sbrs	r24, 2
 ed8:	1f c0       	rjmp	.+62     	; 0xf18 <CDC_Device_ProcessControlRequest+0x122>
				Data.Bytes[0] = UEDATX;
 eda:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[1] = UEDATX;
 ede:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[2] = UEDATX;
 ee2:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[3] = UEDATX;
 ee6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 eea:	3c 8b       	std	Y+20, r19	; 0x14
 eec:	2d 8b       	std	Y+21, r18	; 0x15
 eee:	9e 8b       	std	Y+22, r25	; 0x16
 ef0:	8f 8b       	std	Y+23, r24	; 0x17
				return UEDATX;
 ef2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 ef6:	88 8f       	std	Y+24, r24	; 0x18
 ef8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 efc:	89 8f       	std	Y+25, r24	; 0x19
 efe:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 f02:	8a 8f       	std	Y+26, r24	; 0x1a
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 f04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 f08:	8b 77       	andi	r24, 0x7B	; 123
 f0a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 f0e:	7d db       	rcall	.-2310   	; 0x60a <Endpoint_ClearStatusStage>
}
 f10:	ce 01       	movw	r24, r28
 f12:	df 91       	pop	r29
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 f14:	cf 91       	pop	r28
 f16:	6e cf       	rjmp	.-292    	; 0xdf4 <CDC_Device_Event_Stub>
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 f18:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_DeviceState>
 f1c:	81 11       	cpse	r24, r1
 f1e:	d9 cf       	rjmp	.-78     	; 0xed2 <CDC_Device_ProcessControlRequest+0xdc>
 f20:	81 cf       	rjmp	.-254    	; 0xe24 <CDC_Device_ProcessControlRequest+0x2e>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f22:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_ControlRequest>
 f26:	81 32       	cpi	r24, 0x21	; 33
 f28:	09 f0       	breq	.+2      	; 0xf2c <CDC_Device_ProcessControlRequest+0x136>
 f2a:	7c cf       	rjmp	.-264    	; 0xe24 <CDC_Device_ProcessControlRequest+0x2e>
				UEINTX &= ~(1 << RXSTPI);
 f2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 f30:	87 7f       	andi	r24, 0xF7	; 247
 f32:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_ClearStatusStage();
 f36:	69 db       	rcall	.-2350   	; 0x60a <Endpoint_ClearStatusStage>
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 f38:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <USB_ControlRequest+0x2>
 f3c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <USB_ControlRequest+0x3>
 f40:	99 8b       	std	Y+17, r25	; 0x11
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 f42:	88 8b       	std	Y+16, r24	; 0x10
}
 f44:	ce 01       	movw	r24, r28
 f46:	df 91       	pop	r29
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 f48:	cf 91       	pop	r28
 f4a:	28 c9       	rjmp	.-3504   	; 0x19c <EVENT_CDC_Device_ControLineStateChanged>

00000f4c <ax_check_comms>:
	* empty the fifo if max is reached. */
}

int ax_check_comms() {
	uint8_t stat;
	stat = SPI_RW_8(AX_REG_SILICONREVISION,0,1);
 f4c:	41 e0       	ldi	r20, 0x01	; 1
 f4e:	50 e0       	ldi	r21, 0x00	; 0
 f50:	70 e0       	ldi	r23, 0x00	; 0
 f52:	60 e0       	ldi	r22, 0x00	; 0
 f54:	90 e0       	ldi	r25, 0x00	; 0
 f56:	80 e0       	ldi	r24, 0x00	; 0
 f58:	39 d9       	rcall	.-3470   	; 0x1cc <SPI_RW_8>
	if (stat == AX_REG_SILICONREVISION_DEFAULT) {
		return 1;
	}
	else if (stat == 0x00 || stat == 0xFF) {
 f5a:	2f ef       	ldi	r18, 0xFF	; 255
 f5c:	28 0f       	add	r18, r24
 f5e:	81 e0       	ldi	r24, 0x01	; 1
 f60:	90 e0       	ldi	r25, 0x00	; 0
 f62:	2e 3f       	cpi	r18, 0xFE	; 254
 f64:	10 f0       	brcs	.+4      	; 0xf6a <ax_check_comms+0x1e>
 f66:	90 e0       	ldi	r25, 0x00	; 0
 f68:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	else {
		return 1;
	}
}
 f6a:	08 95       	ret

00000f6c <ax_bootup>:
	uint8_t status;
	int count;
	//ax_sel(ax_driver_s);  /* Need to set the SEL and wait for 1us. MISO should go high when ready.  */
						  /* Need to delay a us.  */
	//ax_wr88reg(ax_driver_s, AX_REG_PWRMODE, AX_REG_PWRMODE_RST_MASK);  /* Puts the chip into RST mode. */
	PORTB |= (1<<DDB0); //SS high
 f6c:	28 9a       	sbi	0x05, 0	; 5
 f6e:	8f ec       	ldi	r24, 0xCF	; 207
 f70:	97 e0       	ldi	r25, 0x07	; 7
 f72:	01 97       	sbiw	r24, 0x01	; 1
 f74:	f1 f7       	brne	.-4      	; 0xf72 <ax_bootup+0x6>
 f76:	00 c0       	rjmp	.+0      	; 0xf78 <ax_bootup+0xc>
 f78:	00 00       	nop
	_delay_ms(1);
	while((PINB & (1 << PB4))) _delay_ms(2);
 f7a:	1c 99       	sbic	0x03, 4	; 3
 f7c:	30 c0       	rjmp	.+96     	; 0xfde <ax_bootup+0x72>
	SPI_RW_8(AX_REG_PWRMODE,AX_REG_PWRMODE_REST_MASK,0);
 f7e:	50 e0       	ldi	r21, 0x00	; 0
 f80:	40 e0       	ldi	r20, 0x00	; 0
 f82:	60 e8       	ldi	r22, 0x80	; 128
 f84:	70 e0       	ldi	r23, 0x00	; 0
 f86:	82 e0       	ldi	r24, 0x02	; 2
 f88:	90 e0       	ldi	r25, 0x00	; 0
 f8a:	20 d9       	rcall	.-3520   	; 0x1cc <SPI_RW_8>
 f8c:	8f e6       	ldi	r24, 0x6F	; 111
 f8e:	97 e1       	ldi	r25, 0x17	; 23
 f90:	01 97       	sbiw	r24, 0x01	; 1
 f92:	f1 f7       	brne	.-4      	; 0xf90 <ax_bootup+0x24>
 f94:	00 c0       	rjmp	.+0      	; 0xf96 <ax_bootup+0x2a>
 f96:	00 00       	nop
	_delay_ms(3);																   /* Delay a bit here.  */
	//ax_wr88reg(ax_driver_s, AX_REG_PWRMODE, 0);  /* UGH. Magic numbers. This basically sets the chip into powerdown, and clears the RST bit. */
	SPI_RW_8(AX_REG_PWRMODE,AX_REG_PWRMODE_POWERDOWN_MASK,0);											 /* Delay a bit here.  */
 f98:	50 e0       	ldi	r21, 0x00	; 0
 f9a:	40 e0       	ldi	r20, 0x00	; 0
 f9c:	70 e0       	ldi	r23, 0x00	; 0
 f9e:	60 e0       	ldi	r22, 0x00	; 0
 fa0:	82 e0       	ldi	r24, 0x02	; 2
 fa2:	90 e0       	ldi	r25, 0x00	; 0
 fa4:	13 d9       	rcall	.-3546   	; 0x1cc <SPI_RW_8>
												 /* Should be able to set all the register contents here.
												 * In power down, the register file is still up. */
	/* In that case, it seems pretty legit.
	* Need to set up the osc. */
	SPI_RW_A16_R8(AX_REG_XTALOSC,0x04,0);
 fa6:	50 e0       	ldi	r21, 0x00	; 0
 fa8:	40 e0       	ldi	r20, 0x00	; 0
 faa:	64 e0       	ldi	r22, 0x04	; 4
 fac:	70 e0       	ldi	r23, 0x00	; 0
 fae:	80 e1       	ldi	r24, 0x10	; 16
 fb0:	9f e0       	ldi	r25, 0x0F	; 15
 fb2:	1d d9       	rcall	.-3526   	; 0x1ee <SPI_RW_A16_R8>
	SPI_RW_A16_R8(AX_REG_XTALAMPL,0x00,0);
 fb4:	50 e0       	ldi	r21, 0x00	; 0
 fb6:	40 e0       	ldi	r20, 0x00	; 0
 fb8:	70 e0       	ldi	r23, 0x00	; 0
 fba:	60 e0       	ldi	r22, 0x00	; 0
 fbc:	81 e1       	ldi	r24, 0x11	; 17
 fbe:	9f e0       	ldi	r25, 0x0F	; 15
 fc0:	16 d9       	rcall	.-3540   	; 0x1ee <SPI_RW_A16_R8>
	SPI_RW_A16_R8(AX_REG_XTALCAP,0,0);
 fc2:	50 e0       	ldi	r21, 0x00	; 0
 fc4:	40 e0       	ldi	r20, 0x00	; 0
 fc6:	70 e0       	ldi	r23, 0x00	; 0
 fc8:	60 e0       	ldi	r22, 0x00	; 0
 fca:	84 e8       	ldi	r24, 0x84	; 132
 fcc:	91 e0       	ldi	r25, 0x01	; 1
 fce:	0f d9       	rcall	.-3554   	; 0x1ee <SPI_RW_A16_R8>
	SPI_RW_A16_R8(AX_REG_PWRMODE,0x0C,0);
 fd0:	50 e0       	ldi	r21, 0x00	; 0
 fd2:	40 e0       	ldi	r20, 0x00	; 0
 fd4:	6c e0       	ldi	r22, 0x0C	; 12
 fd6:	70 e0       	ldi	r23, 0x00	; 0
 fd8:	82 e0       	ldi	r24, 0x02	; 2
 fda:	90 e0       	ldi	r25, 0x00	; 0
 fdc:	08 c9       	rjmp	.-3568   	; 0x1ee <SPI_RW_A16_R8>
 fde:	8f e9       	ldi	r24, 0x9F	; 159
 fe0:	9f e0       	ldi	r25, 0x0F	; 15
 fe2:	01 97       	sbiw	r24, 0x01	; 1
 fe4:	f1 f7       	brne	.-4      	; 0xfe2 <ax_bootup+0x76>
 fe6:	c7 cf       	rjmp	.-114    	; 0xf76 <ax_bootup+0xa>

00000fe8 <_exit>:
 fe8:	f8 94       	cli

00000fea <__stop_program>:
 fea:	ff cf       	rjmp	.-2      	; 0xfea <__stop_program>
