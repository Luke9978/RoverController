
UTR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00001244  000012d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001244  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800134  00800134  0000130c  2**0
                  ALLOC
  3 .comment      00000033  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e11  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f99  00000000  00000000  00008501  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000386b  00000000  00000000  0000a49a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a04  00000000  00000000  0000dd08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002751  00000000  00000000  0000e70c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000433f  00000000  00000000  00010e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000670  00000000  00000000  0001519c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7d c0       	rjmp	.+250    	; 0xfc <__ctors_end>
       2:	00 00       	nop
       4:	97 c0       	rjmp	.+302    	; 0x134 <__bad_interrupt>
       6:	00 00       	nop
       8:	95 c0       	rjmp	.+298    	; 0x134 <__bad_interrupt>
       a:	00 00       	nop
       c:	93 c0       	rjmp	.+294    	; 0x134 <__bad_interrupt>
       e:	00 00       	nop
      10:	91 c0       	rjmp	.+290    	; 0x134 <__bad_interrupt>
      12:	00 00       	nop
      14:	8f c0       	rjmp	.+286    	; 0x134 <__bad_interrupt>
      16:	00 00       	nop
      18:	8d c0       	rjmp	.+282    	; 0x134 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8b c0       	rjmp	.+278    	; 0x134 <__bad_interrupt>
      1e:	00 00       	nop
      20:	89 c0       	rjmp	.+274    	; 0x134 <__bad_interrupt>
      22:	00 00       	nop
      24:	87 c0       	rjmp	.+270    	; 0x134 <__bad_interrupt>
      26:	00 00       	nop
      28:	85 c0       	rjmp	.+266    	; 0x134 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bc c3       	rjmp	.+1912   	; 0x7a6 <__vector_11>
      2e:	00 00       	nop
      30:	63 c4       	rjmp	.+2246   	; 0x8f8 <__vector_12>
      32:	00 00       	nop
      34:	7f c0       	rjmp	.+254    	; 0x134 <__bad_interrupt>
      36:	00 00       	nop
      38:	7d c0       	rjmp	.+250    	; 0x134 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7b c0       	rjmp	.+246    	; 0x134 <__bad_interrupt>
      3e:	00 00       	nop
      40:	79 c0       	rjmp	.+242    	; 0x134 <__bad_interrupt>
      42:	00 00       	nop
      44:	77 c0       	rjmp	.+238    	; 0x134 <__bad_interrupt>
      46:	00 00       	nop
      48:	75 c0       	rjmp	.+234    	; 0x134 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	73 c0       	rjmp	.+230    	; 0x134 <__bad_interrupt>
      4e:	00 00       	nop
      50:	71 c0       	rjmp	.+226    	; 0x134 <__bad_interrupt>
      52:	00 00       	nop
      54:	da c0       	rjmp	.+436    	; 0x20a <__vector_21>
      56:	00 00       	nop
      58:	6d c0       	rjmp	.+218    	; 0x134 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6b c0       	rjmp	.+214    	; 0x134 <__bad_interrupt>
      5e:	00 00       	nop
      60:	69 c0       	rjmp	.+210    	; 0x134 <__bad_interrupt>
      62:	00 00       	nop
      64:	67 c0       	rjmp	.+206    	; 0x134 <__bad_interrupt>
      66:	00 00       	nop
      68:	65 c0       	rjmp	.+202    	; 0x134 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	63 c0       	rjmp	.+198    	; 0x134 <__bad_interrupt>
      6e:	00 00       	nop
      70:	61 c0       	rjmp	.+194    	; 0x134 <__bad_interrupt>
      72:	00 00       	nop

00000074 <ProductString>:
      74:	18 03 55 00 54 00 20 00 52 00 4f 00 43 00 4b 00     ..U.T. .R.O.C.K.
      84:	45 00 54 00 52 00 59 00 00 00                       E.T.R.Y...

0000008e <ManufacturerString>:
      8e:	18 03 55 00 54 00 20 00 52 00 4f 00 43 00 4b 00     ..U.T. .R.O.C.K.
      9e:	45 00 54 00 52 00 59 00 00 00                       E.T.R.Y...

000000a8 <LanguageString>:
      a8:	04 03 09 04                                         ....

000000ac <ConfigurationDescriptor>:
      ac:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      bc:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      cc:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      dc:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000ea <DeviceDescriptor>:
      ea:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
      fa:	dc 01                                               ..

000000fc <__ctors_end>:
      fc:	11 24       	eor	r1, r1
      fe:	1f be       	out	0x3f, r1	; 63
     100:	cf ef       	ldi	r28, 0xFF	; 255
     102:	d4 e0       	ldi	r29, 0x04	; 4
     104:	de bf       	out	0x3e, r29	; 62
     106:	cd bf       	out	0x3d, r28	; 61

00000108 <__do_copy_data>:
     108:	11 e0       	ldi	r17, 0x01	; 1
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	e4 e4       	ldi	r30, 0x44	; 68
     110:	f2 e1       	ldi	r31, 0x12	; 18
     112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x10>
     114:	05 90       	lpm	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	a4 33       	cpi	r26, 0x34	; 52
     11a:	b1 07       	cpc	r27, r17
     11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0xc>

0000011e <__do_clear_bss>:
     11e:	21 e0       	ldi	r18, 0x01	; 1
     120:	a4 e3       	ldi	r26, 0x34	; 52
     122:	b1 e0       	ldi	r27, 0x01	; 1
     124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
     126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
     128:	a0 35       	cpi	r26, 0x50	; 80
     12a:	b2 07       	cpc	r27, r18
     12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>
     12e:	03 d1       	rcall	.+518    	; 0x336 <main>
     130:	0c 94 20 09 	jmp	0x1240	; 0x1240 <_exit>

00000134 <__bad_interrupt>:
     134:	65 cf       	rjmp	.-310    	; 0x0 <__vectors>

00000136 <SetupHardware>:
	fputs(dataMSB, &USBSerialStream);
	fputs(dataLSB, &USBSerialStream);
	PORTD &= ~(1 << DDD0); //set PD0 low*/
}
void SetupHardware(void) {
	MCUSR &= ~(1 << WDRF);
     136:	84 b7       	in	r24, 0x34	; 52
     138:	87 7f       	andi	r24, 0xF7	; 247
     13a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     13c:	0f b6       	in	r0, 0x3f	; 63
     13e:	f8 94       	cli
     140:	a8 95       	wdr
     142:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     146:	88 61       	ori	r24, 0x18	; 24
     148:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     14c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     150:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     152:	80 e8       	ldi	r24, 0x80	; 128
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     15e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     162:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	clock_prescale_set(clock_div_1);
	USB_Init();
     164:	11 c3       	rjmp	.+1570   	; 0x788 <USB_Init>

00000166 <EVENT_USB_Device_Connect>:
}
void EVENT_USB_Device_Connect(void) {
	PORTD |= (1 << DDD0); //set PD0 high
     166:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     168:	2f ef       	ldi	r18, 0xFF	; 255
     16a:	80 e7       	ldi	r24, 0x70	; 112
     16c:	92 e0       	ldi	r25, 0x02	; 2
     16e:	21 50       	subi	r18, 0x01	; 1
     170:	80 40       	sbci	r24, 0x00	; 0
     172:	90 40       	sbci	r25, 0x00	; 0
     174:	e1 f7       	brne	.-8      	; 0x16e <EVENT_USB_Device_Connect+0x8>
     176:	00 c0       	rjmp	.+0      	; 0x178 <EVENT_USB_Device_Connect+0x12>
     178:	00 00       	nop
	_delay_ms(100);
	PORTD &= ~(1 << DDD0); //set PD0 low
     17a:	58 98       	cbi	0x0b, 0	; 11
     17c:	2f ef       	ldi	r18, 0xFF	; 255
     17e:	80 e7       	ldi	r24, 0x70	; 112
     180:	92 e0       	ldi	r25, 0x02	; 2
     182:	21 50       	subi	r18, 0x01	; 1
     184:	80 40       	sbci	r24, 0x00	; 0
     186:	90 40       	sbci	r25, 0x00	; 0
     188:	e1 f7       	brne	.-8      	; 0x182 <EVENT_USB_Device_Connect+0x1c>
     18a:	00 c0       	rjmp	.+0      	; 0x18c <EVENT_USB_Device_Connect+0x26>
     18c:	00 00       	nop
	_delay_ms(100);
}
     18e:	08 95       	ret

00000190 <EVENT_USB_Device_Disconnect>:
     190:	ea cf       	rjmp	.-44     	; 0x166 <EVENT_USB_Device_Connect>

00000192 <EVENT_USB_Device_ConfigurationChanged>:
	_delay_ms(100);
}

void EVENT_USB_Device_ConfigurationChanged(void) {
	bool ConfigSuccess = true;
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	62 c5       	rjmp	.+2756   	; 0xc5c <CDC_Device_ConfigureEndpoints>

00000198 <EVENT_USB_Device_ControlRequest>:
}

void EVENT_USB_Device_ControlRequest(void) {
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	91 e0       	ldi	r25, 0x01	; 1
     19c:	45 c6       	rjmp	.+3210   	; 0xe28 <CDC_Device_ProcessControlRequest>

0000019e <EVENT_CDC_Device_ControLineStateChanged>:
}

void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t *const CDCInterfaceInfo) {
	bool HostReady = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR) != 0;
	if (HostReady) { transferData(); }
}
     19e:	08 95       	ret

000001a0 <SPI_MasterInit>:

void sendSerial(char rec) {
	CDC_Device_SendString(&VirtualSerial_CDC_Interface, &rec);
}
void SPI_MasterInit(void){
	DDRB |= (1<<DDB1)|(1<<DDB2)|(1<<DDB0);
     1a0:	84 b1       	in	r24, 0x04	; 4
     1a2:	87 60       	ori	r24, 0x07	; 7
     1a4:	84 b9       	out	0x04, r24	; 4
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     1a6:	8c b5       	in	r24, 0x2c	; 44
     1a8:	81 65       	ori	r24, 0x51	; 81
     1aa:	8c bd       	out	0x2c, r24	; 44
}
     1ac:	08 95       	ret

000001ae <SPI_RW_8>:

adding 128 to an int sets register to write instead of read
*/

char SPI_RW_8(unsigned char reg_A,unsigned char reg_D, int read){
	PORTB &= ~(1<<DDB5); //SS low
     1ae:	2d 98       	cbi	0x05, 5	; 5
	if(read==1){
     1b0:	41 30       	cpi	r20, 0x01	; 1
     1b2:	51 05       	cpc	r21, r1
     1b4:	59 f4       	brne	.+22     	; 0x1cc <SPI_RW_8+0x1e>
		SPDR = reg_A;
	}else{
		
		SPDR = reg_A | 0b1000000;
     1b6:	8e bd       	out	0x2e, r24	; 46
	}
	while(!(SPSR & (1<<SPIF)));
     1b8:	0d b4       	in	r0, 0x2d	; 45
     1ba:	07 fe       	sbrs	r0, 7
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <SPI_RW_8+0xa>
	SPDR = reg_D;
     1be:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1<<SPIF)));
     1c0:	0d b4       	in	r0, 0x2d	; 45
     1c2:	07 fe       	sbrs	r0, 7
     1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <SPI_RW_8+0x12>
	PORTB |= (1<<DDB5); //SS high
     1c6:	2d 9a       	sbi	0x05, 5	; 5
	return SPDR;
     1c8:	8e b5       	in	r24, 0x2e	; 46
}
     1ca:	08 95       	ret
		SPDR = reg_A | 0b1000000;
     1cc:	80 64       	ori	r24, 0x40	; 64
     1ce:	f3 cf       	rjmp	.-26     	; 0x1b6 <SPI_RW_8+0x8>

000001d0 <SPI_RW_A16_R8>:
char SPI_RW_A16_R8(uint16_t reg_A,unsigned char reg_D, int read){
	uint8_t reg_A_upper = reg_A >> 8;
	uint8_t reg_A_lower = reg_A;
    PORTB &= ~(1<<DDB5); //SS low
     1d0:	2d 98       	cbi	0x05, 5	; 5
	if(read==1){
     1d2:	41 30       	cpi	r20, 0x01	; 1
     1d4:	51 05       	cpc	r21, r1
     1d6:	79 f4       	brne	.+30     	; 0x1f6 <SPI_RW_A16_R8+0x26>
		SPDR = reg_A_upper;
     1d8:	9e bd       	out	0x2e, r25	; 46
		while(!(SPSR & (1<<SPIF)));
     1da:	0d b4       	in	r0, 0x2d	; 45
     1dc:	07 fe       	sbrs	r0, 7
     1de:	fd cf       	rjmp	.-6      	; 0x1da <SPI_RW_A16_R8+0xa>
		SPDR = reg_A_lower;
     1e0:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1<<SPIF)));
     1e2:	0d b4       	in	r0, 0x2d	; 45
     1e4:	07 fe       	sbrs	r0, 7
     1e6:	fd cf       	rjmp	.-6      	; 0x1e2 <SPI_RW_A16_R8+0x12>
		SPDR = reg_A_upper | 0x80;
		while(!(SPSR & (1<<SPIF)));
		SPDR = reg_A_lower;
		while(!(SPSR & (1<<SPIF)));
	}
	SPDR = reg_D;
     1e8:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1<<SPIF)));
     1ea:	0d b4       	in	r0, 0x2d	; 45
     1ec:	07 fe       	sbrs	r0, 7
     1ee:	fd cf       	rjmp	.-6      	; 0x1ea <SPI_RW_A16_R8+0x1a>
    PORTB |= (1<<DDB5); //SS high
     1f0:	2d 9a       	sbi	0x05, 5	; 5
	return SPDR;
     1f2:	8e b5       	in	r24, 0x2e	; 46
}
     1f4:	08 95       	ret
		SPDR = reg_A_upper | 0x80;
     1f6:	90 68       	ori	r25, 0x80	; 128
     1f8:	9e bd       	out	0x2e, r25	; 46
		while(!(SPSR & (1<<SPIF)));
     1fa:	0d b4       	in	r0, 0x2d	; 45
     1fc:	07 fe       	sbrs	r0, 7
     1fe:	fd cf       	rjmp	.-6      	; 0x1fa <SPI_RW_A16_R8+0x2a>
		SPDR = reg_A_lower;
     200:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1<<SPIF)));
     202:	0d b4       	in	r0, 0x2d	; 45
     204:	07 fe       	sbrs	r0, 7
     206:	fd cf       	rjmp	.-6      	; 0x202 <SPI_RW_A16_R8+0x32>
     208:	ef cf       	rjmp	.-34     	; 0x1e8 <SPI_RW_A16_R8+0x18>

0000020a <__vector_21>:
ISR(TIMER0_OVF_vect) { //moved from main loop to timer .1 second / (8Mhz / 1024 prescale) = 12.8
     20a:	1f 92       	push	r1
     20c:	0f 92       	push	r0
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	0f 92       	push	r0
     212:	11 24       	eor	r1, r1
     214:	2f 93       	push	r18
     216:	3f 93       	push	r19
     218:	4f 93       	push	r20
     21a:	5f 93       	push	r21
     21c:	6f 93       	push	r22
     21e:	7f 93       	push	r23
     220:	8f 93       	push	r24
     222:	9f 93       	push	r25
     224:	af 93       	push	r26
     226:	bf 93       	push	r27
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
					   /*HANDLE USB COMMUNICATIONS*/
	cli();
     22c:	f8 94       	cli
	USBint++;
     22e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     232:	8f 5f       	subi	r24, 0xFF	; 255
     234:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
	//if (USBint > 3){
	//USBint = 0;
	CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	ac d5       	rcall	.+2904   	; 0xd96 <CDC_Device_ReceiveByte>
	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	91 e0       	ldi	r25, 0x01	; 1
	USB_USBTask();
     242:	93 d5       	rcall	.+2854   	; 0xd6a <CDC_Device_USBTask>
     244:	f0 d4       	rcall	.+2528   	; 0xc26 <USB_USBTask>
	sei();
     246:	78 94       	sei
}
     248:	ff 91       	pop	r31
     24a:	ef 91       	pop	r30
     24c:	bf 91       	pop	r27
     24e:	af 91       	pop	r26
     250:	9f 91       	pop	r25
     252:	8f 91       	pop	r24
     254:	7f 91       	pop	r23
     256:	6f 91       	pop	r22
     258:	5f 91       	pop	r21
     25a:	4f 91       	pop	r20
     25c:	3f 91       	pop	r19
     25e:	2f 91       	pop	r18
     260:	0f 90       	pop	r0
     262:	0f be       	out	0x3f, r0	; 63
     264:	0f 90       	pop	r0
     266:	1f 90       	pop	r1
     268:	18 95       	reti

0000026a <lufaPrintInt>:

void lufaPrintInt(unsigned int c){
     26a:	0f 93       	push	r16
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	2a 97       	sbiw	r28, 0x0a	; 10
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
    char buffer[10] = {};
     282:	8e 01       	movw	r16, r28
     284:	0f 5f       	subi	r16, 0xFF	; 255
     286:	1f 4f       	sbci	r17, 0xFF	; 255
     288:	2a e0       	ldi	r18, 0x0A	; 10
     28a:	f8 01       	movw	r30, r16
     28c:	11 92       	st	Z+, r1
     28e:	2a 95       	dec	r18
     290:	e9 f7       	brne	.-6      	; 0x28c <lufaPrintInt+0x22>
    itoa(c, buffer, 10);
     292:	4a e0       	ldi	r20, 0x0A	; 10
     294:	50 e0       	ldi	r21, 0x00	; 0
     296:	b8 01       	movw	r22, r16
     298:	22 d7       	rcall	.+3652   	; 0x10de <itoa>
    fputs(buffer, &USBSerialStream);
     29a:	65 e3       	ldi	r22, 0x35	; 53
     29c:	71 e0       	ldi	r23, 0x01	; 1
     29e:	c8 01       	movw	r24, r16
     2a0:	7b d7       	rcall	.+3830   	; 0x1198 <fputs>
    fputs("\n", &USBSerialStream);
     2a2:	65 e3       	ldi	r22, 0x35	; 53
     2a4:	71 e0       	ldi	r23, 0x01	; 1
     2a6:	8a e0       	ldi	r24, 0x0A	; 10
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	46 d7       	rcall	.+3724   	; 0x1138 <fputc>
}
     2ac:	2a 96       	adiw	r28, 0x0a	; 10
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	f8 94       	cli
     2b2:	de bf       	out	0x3e, r29	; 62
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
     2c0:	08 95       	ret

000002c2 <lufaPrintUint20_t>:
void lufaPrintUint20_t(uint32_t c) {
     2c2:	8f 92       	push	r8
     2c4:	9f 92       	push	r9
     2c6:	af 92       	push	r10
     2c8:	bf 92       	push	r11
     2ca:	cf 92       	push	r12
     2cc:	df 92       	push	r13
     2ce:	ef 92       	push	r14
     2d0:	ff 92       	push	r15
     2d2:	6b 01       	movw	r12, r22
     2d4:	7c 01       	movw	r14, r24
  int temp = c / 10000;
     2d6:	20 e1       	ldi	r18, 0x10	; 16
     2d8:	37 e2       	ldi	r19, 0x27	; 39
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	dd d6       	rcall	.+3514   	; 0x109a <__udivmodsi4>
     2e0:	49 01       	movw	r8, r18
  lufaPrintInt(temp);
     2e2:	c9 01       	movw	r24, r18
     2e4:	c2 df       	rcall	.-124    	; 0x26a <lufaPrintInt>
  c -= temp * 10000;
     2e6:	c4 01       	movw	r24, r8
     2e8:	60 e1       	ldi	r22, 0x10	; 16
     2ea:	77 e2       	ldi	r23, 0x27	; 39
     2ec:	c5 d6       	rcall	.+3466   	; 0x1078 <__mulhi3>
     2ee:	09 2e       	mov	r0, r25
     2f0:	00 0c       	add	r0, r0
     2f2:	aa 0b       	sbc	r26, r26
     2f4:	bb 0b       	sbc	r27, r27
     2f6:	a7 01       	movw	r20, r14
     2f8:	96 01       	movw	r18, r12
     2fa:	28 1b       	sub	r18, r24
     2fc:	39 0b       	sbc	r19, r25
     2fe:	4a 0b       	sbc	r20, r26
     300:	5b 0b       	sbc	r21, r27
     302:	da 01       	movw	r26, r20
     304:	c9 01       	movw	r24, r18
  if (c == 0) {
     306:	00 97       	sbiw	r24, 0x00	; 0
     308:	a1 05       	cpc	r26, r1
     30a:	b1 05       	cpc	r27, r1
     30c:	91 f4       	brne	.+36     	; 0x332 <lufaPrintUint20_t+0x70>
    fputs("0000", & USBSerialStream);
     30e:	65 e3       	ldi	r22, 0x35	; 53
     310:	71 e0       	ldi	r23, 0x01	; 1
     312:	8b e1       	ldi	r24, 0x1B	; 27
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	40 d7       	rcall	.+3712   	; 0x1198 <fputs>
  } else {
    lufaPrintInt(c);
  }
  fputs("\n", & USBSerialStream);
     318:	65 e3       	ldi	r22, 0x35	; 53
     31a:	71 e0       	ldi	r23, 0x01	; 1
     31c:	8a e0       	ldi	r24, 0x0A	; 10
     31e:	90 e0       	ldi	r25, 0x00	; 0
}
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	df 90       	pop	r13
     326:	cf 90       	pop	r12
     328:	bf 90       	pop	r11
     32a:	af 90       	pop	r10
  fputs("\n", & USBSerialStream);
     32c:	9f 90       	pop	r9
     32e:	8f 90       	pop	r8
    lufaPrintInt(c);
     330:	03 c7       	rjmp	.+3590   	; 0x1138 <fputc>
     332:	9b df       	rcall	.-202    	; 0x26a <lufaPrintInt>
     334:	f1 cf       	rjmp	.-30     	; 0x318 <lufaPrintUint20_t+0x56>

00000336 <main>:
int main(void){
	//INIT CODE 
	TCCR0B |= ((1 << CS02) | (1 << CS00)); //Table 15-9 clk/1024 prescale
     336:	85 b5       	in	r24, 0x25	; 37
     338:	85 60       	ori	r24, 0x05	; 5
     33a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0); //timer 0 overflow interrupt enable
     33c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     340:	81 60       	ori	r24, 0x01	; 1
     342:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
	DDRB |= (1 << AX_SS_PIN); //set PB0 output
     346:	25 9a       	sbi	0x04, 5	; 4
	DDRD |= (1 << DDD5); //set PD0 output
     348:	55 9a       	sbi	0x0a, 5	; 10
	PORTB |= (1 << AX_SS_PIN); //SS high
     34a:	2d 9a       	sbi	0x05, 5	; 5
	sei(); // Set interputs 
     34c:	78 94       	sei
	SetupHardware(); //USB init 
     34e:	f3 de       	rcall	.-538    	; 0x136 <SetupHardware>
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream); //Init USB stream
     350:	65 e3       	ldi	r22, 0x35	; 53
     352:	71 e0       	ldi	r23, 0x01	; 1
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	53 d5       	rcall	.+2726   	; 0xe00 <CDC_Device_CreateStream>
     35a:	2f ef       	ldi	r18, 0xFF	; 255
     35c:	8d e3       	ldi	r24, 0x3D	; 61
     35e:	99 e4       	ldi	r25, 0x49	; 73
     360:	21 50       	subi	r18, 0x01	; 1
     362:	80 40       	sbci	r24, 0x00	; 0
     364:	90 40       	sbci	r25, 0x00	; 0
     366:	e1 f7       	brne	.-8      	; 0x360 <main+0x2a>
     368:	00 c0       	rjmp	.+0      	; 0x36a <main+0x34>
     36a:	00 00       	nop
    _delay_ms(3000);
    fputs('b',&USBSerialStream);
     36c:	65 e3       	ldi	r22, 0x35	; 53
     36e:	71 e0       	ldi	r23, 0x01	; 1
     370:	82 e6       	ldi	r24, 0x62	; 98
     372:	90 e0       	ldi	r25, 0x00	; 0
	GlobalInterruptEnable();
	SPI_MasterInit(); // Turns AVR device into SPI Master
     374:	11 d7       	rcall	.+3618   	; 0x1198 <fputs>
     376:	78 94       	sei
    ax_bootup();
     378:	13 df       	rcall	.-474    	; 0x1a0 <SPI_MasterInit>
     37a:	23 d6       	rcall	.+3142   	; 0xfc2 <ax_bootup>
	//END OF INIT CODE
    if(ax_check_comms()==0){ fputs("Shit broke..",&USBSerialStream);}
     37c:	00 d6       	rcall	.+3072   	; 0xf7e <ax_check_comms>
     37e:	89 2b       	or	r24, r25
     380:	29 f4       	brne	.+10     	; 0x38c <main+0x56>
     382:	65 e3       	ldi	r22, 0x35	; 53
     384:	71 e0       	ldi	r23, 0x01	; 1
     386:	80 e2       	ldi	r24, 0x20	; 32
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	06 d7       	rcall	.+3596   	; 0x1198 <fputs>
    fputs('i',&USBSerialStream);
     38c:	65 e3       	ldi	r22, 0x35	; 53
     38e:	71 e0       	ldi	r23, 0x01	; 1
     390:	89 e6       	ldi	r24, 0x69	; 105
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	01 d7       	rcall	.+3586   	; 0x1198 <fputs>
     396:	2f ef       	ldi	r18, 0xFF	; 255
     398:	89 e6       	ldi	r24, 0x69	; 105
     39a:	98 e1       	ldi	r25, 0x18	; 24
     39c:	21 50       	subi	r18, 0x01	; 1
     39e:	80 40       	sbci	r24, 0x00	; 0
     3a0:	90 40       	sbci	r25, 0x00	; 0
     3a2:	e1 f7       	brne	.-8      	; 0x39c <main+0x66>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <main+0x70>
	_delay_ms(1000);
	
    while(true){
       //ax_send_data();
	   uint16_t status = AX_getStatusBits();
     3a6:	00 00       	nop
     3a8:	fd d5       	rcall	.+3066   	; 0xfa4 <AX_getStatusBits>
       fputs("Data: ",&USBSerialStream);
     3aa:	ec 01       	movw	r28, r24
     3ac:	65 e3       	ldi	r22, 0x35	; 53
     3ae:	71 e0       	ldi	r23, 0x01	; 1
     3b0:	8d e2       	ldi	r24, 0x2D	; 45
     3b2:	91 e0       	ldi	r25, 0x01	; 1
	   lufaPrintUint20_t(status);
     3b4:	f1 d6       	rcall	.+3554   	; 0x1198 <fputs>
     3b6:	be 01       	movw	r22, r28
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	82 df       	rcall	.-252    	; 0x2c2 <lufaPrintUint20_t>
	   fputs("\n",&USBSerialStream);
     3be:	65 e3       	ldi	r22, 0x35	; 53
     3c0:	71 e0       	ldi	r23, 0x01	; 1
     3c2:	8a e0       	ldi	r24, 0x0A	; 10
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	b8 d6       	rcall	.+3440   	; 0x1138 <fputc>
     3c8:	e6 cf       	rjmp	.-52     	; 0x396 <main+0x60>

000003ca <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     3ca:	29 2f       	mov	r18, r25
     3cc:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     3ce:	22 30       	cpi	r18, 0x02	; 2
     3d0:	31 05       	cpc	r19, r1
     3d2:	71 f0       	breq	.+28     	; 0x3f0 <CALLBACK_USB_GetDescriptor+0x26>
     3d4:	23 30       	cpi	r18, 0x03	; 3
     3d6:	31 05       	cpc	r19, r1
     3d8:	81 f0       	breq	.+32     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x30>
     3da:	21 30       	cpi	r18, 0x01	; 1
     3dc:	31 05       	cpc	r19, r1
     3de:	a1 f4       	brne	.+40     	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     3e0:	82 e1       	ldi	r24, 0x12	; 18
     3e2:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
     3e4:	2a ee       	ldi	r18, 0xEA	; 234
     3e6:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     3e8:	fa 01       	movw	r30, r20
     3ea:	31 83       	std	Z+1, r19	; 0x01
     3ec:	20 83       	st	Z, r18
	return Size;
}
     3ee:	08 95       	ret
			Size    = sizeof(USB_Descriptor_Configuration_t);
     3f0:	8e e3       	ldi	r24, 0x3E	; 62
     3f2:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
     3f4:	2c ea       	ldi	r18, 0xAC	; 172
     3f6:	30 e0       	ldi	r19, 0x00	; 0
			break;
     3f8:	f7 cf       	rjmp	.-18     	; 0x3e8 <CALLBACK_USB_GetDescriptor+0x1e>
			switch (DescriptorNumber)
     3fa:	99 27       	eor	r25, r25
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	91 05       	cpc	r25, r1
     400:	71 f0       	breq	.+28     	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
     402:	38 f0       	brcs	.+14     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
     404:	02 97       	sbiw	r24, 0x02	; 2
     406:	71 f0       	breq	.+28     	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
	uint16_t    Size    = NO_DESCRIPTOR;
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	80 e0       	ldi	r24, 0x00	; 0
	const void* Address = NULL;
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	20 e0       	ldi	r18, 0x00	; 0
     410:	eb cf       	rjmp	.-42     	; 0x3e8 <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     412:	e8 ea       	ldi	r30, 0xA8	; 168
     414:	f0 e0       	ldi	r31, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
     416:	84 91       	lpm	r24, Z
     418:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
     41a:	9f 01       	movw	r18, r30
					break;
     41c:	e5 cf       	rjmp	.-54     	; 0x3e8 <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     41e:	ee e8       	ldi	r30, 0x8E	; 142
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	f9 cf       	rjmp	.-14     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
					Size    = pgm_read_byte(&ProductString.Header.Size);
     424:	e4 e7       	ldi	r30, 0x74	; 116
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	f6 cf       	rjmp	.-20     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>

0000042a <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     42a:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     42c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <USB_ControlRequest+0x6>
     430:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <USB_ControlRequest+0x7>
     434:	86 17       	cp	r24, r22
     436:	97 07       	cpc	r25, r23
     438:	a0 f0       	brcs	.+40     	; 0x462 <Endpoint_Write_Control_Stream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     43a:	61 15       	cp	r22, r1
     43c:	71 05       	cpc	r23, r1
     43e:	29 f4       	brne	.+10     	; 0x44a <Endpoint_Write_Control_Stream_LE+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     440:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     444:	9e 77       	andi	r25, 0x7E	; 126
     446:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     44a:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     44c:	61 15       	cp	r22, r1
     44e:	71 05       	cpc	r23, r1
     450:	51 f4       	brne	.+20     	; 0x466 <Endpoint_Write_Control_Stream_LE+0x3c>
     452:	91 11       	cpse	r25, r1
     454:	08 c0       	rjmp	.+16     	; 0x466 <Endpoint_Write_Control_Stream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     456:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     45a:	82 ff       	sbrs	r24, 2
     45c:	32 c0       	rjmp	.+100    	; 0x4c2 <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	08 95       	ret
     462:	bc 01       	movw	r22, r24
     464:	f2 cf       	rjmp	.-28     	; 0x44a <Endpoint_Write_Control_Stream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     466:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     46a:	88 23       	and	r24, r24
     46c:	b1 f1       	breq	.+108    	; 0x4da <Endpoint_Write_Control_Stream_LE+0xb0>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     46e:	85 30       	cpi	r24, 0x05	; 5
     470:	b1 f1       	breq	.+108    	; 0x4de <Endpoint_Write_Control_Stream_LE+0xb4>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     472:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
     476:	83 fd       	sbrc	r24, 3
     478:	2e c0       	rjmp	.+92     	; 0x4d6 <Endpoint_Write_Control_Stream_LE+0xac>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     47a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsOUTReceived())
     47e:	82 fd       	sbrc	r24, 2
     480:	ea cf       	rjmp	.-44     	; 0x456 <Endpoint_Write_Control_Stream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     482:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsINReady())
     486:	80 ff       	sbrs	r24, 0
     488:	e1 cf       	rjmp	.-62     	; 0x44c <Endpoint_Write_Control_Stream_LE+0x22>
					return UEBCLX;
     48a:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     48e:	30 e0       	ldi	r19, 0x00	; 0
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     490:	61 15       	cp	r22, r1
     492:	71 05       	cpc	r23, r1
     494:	19 f0       	breq	.+6      	; 0x49c <Endpoint_Write_Control_Stream_LE+0x72>
     496:	28 30       	cpi	r18, 0x08	; 8
     498:	31 05       	cpc	r19, r1
     49a:	58 f0       	brcs	.+22     	; 0x4b2 <Endpoint_Write_Control_Stream_LE+0x88>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	28 30       	cpi	r18, 0x08	; 8
     4a0:	31 05       	cpc	r19, r1
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <Endpoint_Write_Control_Stream_LE+0x7c>
     4a4:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4a6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     4aa:	2e 77       	andi	r18, 0x7E	; 126
     4ac:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     4b0:	cd cf       	rjmp	.-102    	; 0x44c <Endpoint_Write_Control_Stream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
     4b2:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     4b4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Length--;
     4b8:	61 50       	subi	r22, 0x01	; 1
     4ba:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     4bc:	2f 5f       	subi	r18, 0xFF	; 255
     4be:	3f 4f       	sbci	r19, 0xFF	; 255
     4c0:	e7 cf       	rjmp	.-50     	; 0x490 <Endpoint_Write_Control_Stream_LE+0x66>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4c2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4c6:	88 23       	and	r24, r24
     4c8:	41 f0       	breq	.+16     	; 0x4da <Endpoint_Write_Control_Stream_LE+0xb0>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4ca:	85 30       	cpi	r24, 0x05	; 5
     4cc:	41 f0       	breq	.+16     	; 0x4de <Endpoint_Write_Control_Stream_LE+0xb4>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
     4d2:	83 ff       	sbrs	r24, 3
     4d4:	c0 cf       	rjmp	.-128    	; 0x456 <Endpoint_Write_Control_Stream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
     4d6:	81 e0       	ldi	r24, 0x01	; 1
}
     4d8:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     4de:	83 e0       	ldi	r24, 0x03	; 3
     4e0:	08 95       	ret

000004e2 <Endpoint_Write_Control_PStream_LE>:
{
     4e2:	fc 01       	movw	r30, r24
	if (Length > USB_ControlRequest.wLength)
     4e4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <USB_ControlRequest+0x6>
     4e8:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <USB_ControlRequest+0x7>
     4ec:	86 17       	cp	r24, r22
     4ee:	97 07       	cpc	r25, r23
     4f0:	a0 f0       	brcs	.+40     	; 0x51a <__stack+0x1b>
	else if (!(Length))
     4f2:	61 15       	cp	r22, r1
     4f4:	71 05       	cpc	r23, r1
     4f6:	29 f4       	brne	.+10     	; 0x502 <__stack+0x3>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     4fc:	8e 77       	andi	r24, 0x7E	; 126
     4fe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     502:	90 e0       	ldi	r25, 0x00	; 0
	while (Length || LastPacketFull)
     504:	61 15       	cp	r22, r1
     506:	71 05       	cpc	r23, r1
     508:	51 f4       	brne	.+20     	; 0x51e <__stack+0x1f>
     50a:	91 11       	cpse	r25, r1
     50c:	08 c0       	rjmp	.+16     	; 0x51e <__stack+0x1f>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     50e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	while (!(Endpoint_IsOUTReceived()))
     512:	82 ff       	sbrs	r24, 2
     514:	33 c0       	rjmp	.+102    	; 0x57c <__stack+0x7d>
	return ENDPOINT_RWCSTREAM_NoError;
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	08 95       	ret
     51a:	bc 01       	movw	r22, r24
     51c:	f2 cf       	rjmp	.-28     	; 0x502 <__stack+0x3>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     51e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     522:	88 23       	and	r24, r24
     524:	b9 f1       	breq	.+110    	; 0x594 <__stack+0x95>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     526:	85 30       	cpi	r24, 0x05	; 5
     528:	b9 f1       	breq	.+110    	; 0x598 <__stack+0x99>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     52a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
     52e:	83 fd       	sbrc	r24, 3
     530:	2f c0       	rjmp	.+94     	; 0x590 <__stack+0x91>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     532:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsOUTReceived())
     536:	82 fd       	sbrc	r24, 2
     538:	ea cf       	rjmp	.-44     	; 0x50e <__stack+0xf>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     53a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsINReady())
     53e:	80 ff       	sbrs	r24, 0
     540:	e1 cf       	rjmp	.-62     	; 0x504 <__stack+0x5>
					return UEBCLX;
     542:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     546:	30 e0       	ldi	r19, 0x00	; 0
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     548:	61 15       	cp	r22, r1
     54a:	71 05       	cpc	r23, r1
     54c:	19 f0       	breq	.+6      	; 0x554 <__stack+0x55>
     54e:	28 30       	cpi	r18, 0x08	; 8
     550:	31 05       	cpc	r19, r1
     552:	58 f0       	brcs	.+22     	; 0x56a <__stack+0x6b>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	28 30       	cpi	r18, 0x08	; 8
     558:	31 05       	cpc	r19, r1
     55a:	09 f0       	breq	.+2      	; 0x55e <__stack+0x5f>
     55c:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     55e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     562:	8e 77       	andi	r24, 0x7E	; 126
     564:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     568:	cd cf       	rjmp	.-102    	; 0x504 <__stack+0x5>
				TEMPLATE_TRANSFER_BYTE(DataStream);
     56a:	84 91       	lpm	r24, Z
				UEDATX = Data;
     56c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     570:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     572:	61 50       	subi	r22, 0x01	; 1
     574:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     576:	2f 5f       	subi	r18, 0xFF	; 255
     578:	3f 4f       	sbci	r19, 0xFF	; 255
     57a:	e6 cf       	rjmp	.-52     	; 0x548 <__stack+0x49>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     57c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     580:	88 23       	and	r24, r24
     582:	41 f0       	breq	.+16     	; 0x594 <__stack+0x95>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     584:	85 30       	cpi	r24, 0x05	; 5
     586:	41 f0       	breq	.+16     	; 0x598 <__stack+0x99>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     588:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
     58c:	83 ff       	sbrs	r24, 3
     58e:	bf cf       	rjmp	.-130    	; 0x50e <__stack+0xf>
		  return ENDPOINT_RWCSTREAM_HostAborted;
     590:	81 e0       	ldi	r24, 0x01	; 1
}
     592:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     594:	82 e0       	ldi	r24, 0x02	; 2
     596:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     598:	83 e0       	ldi	r24, 0x03	; 3
     59a:	08 95       	ret

0000059c <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     59c:	98 2f       	mov	r25, r24
     59e:	95 30       	cpi	r25, 0x05	; 5
     5a0:	28 f0       	brcs	.+10     	; 0x5ac <Endpoint_ConfigureEndpoint_Prv+0x10>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5a2:	8f 70       	andi	r24, 0x0F	; 15
     5a4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	08 95       	ret
     5ac:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			UECFG1XTemp = UECFG1XData;
     5b0:	24 2f       	mov	r18, r20
			UECFG0XTemp = UECFG0XData;
     5b2:	76 2f       	mov	r23, r22
			UEIENXTemp  = 0;
     5b4:	50 e0       	ldi	r21, 0x00	; 0
		if (EPNum == Number)
     5b6:	98 17       	cp	r25, r24
     5b8:	31 f0       	breq	.+12     	; 0x5c6 <Endpoint_ConfigureEndpoint_Prv+0x2a>
			UECFG0XTemp = UECFG0X;
     5ba:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
			UECFG1XTemp = UECFG1X;
     5be:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
			UEIENXTemp  = UEIENX;
     5c2:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
		if (!(UECFG1XTemp & (1 << ALLOC)))
     5c6:	21 fd       	sbrc	r18, 1
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <Endpoint_ConfigureEndpoint_Prv+0x32>
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     5ca:	9f 5f       	subi	r25, 0xFF	; 255
     5cc:	e8 cf       	rjmp	.-48     	; 0x59e <Endpoint_ConfigureEndpoint_Prv+0x2>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     5ce:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     5d2:	3e 7f       	andi	r19, 0xFE	; 254
     5d4:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		UECFG1X &= ~(1 << ALLOC);
     5d8:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     5dc:	3d 7f       	andi	r19, 0xFD	; 253
     5de:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
				UECONX |= (1 << EPEN);
     5e2:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     5e6:	31 60       	ori	r19, 0x01	; 1
     5e8:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		UECFG0X = UECFG0XTemp;
     5ec:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
		UECFG1X = UECFG1XTemp;
     5f0:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
		UEIENX  = UEIENXTemp;
     5f4:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     5f8:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
		if (!(Endpoint_IsConfigured()))
     5fc:	27 fd       	sbrc	r18, 7
     5fe:	e5 cf       	rjmp	.-54     	; 0x5ca <Endpoint_ConfigureEndpoint_Prv+0x2e>
		  return false;
     600:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
     602:	08 95       	ret

00000604 <Endpoint_ConfigureEndpointTable>:
{
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	06 2f       	mov	r16, r22
     60e:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     610:	10 e0       	ldi	r17, 0x00	; 0
     612:	10 13       	cpse	r17, r16
     614:	02 c0       	rjmp	.+4      	; 0x61a <Endpoint_ConfigureEndpointTable+0x16>
	return true;
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	0f c0       	rjmp	.+30     	; 0x638 <Endpoint_ConfigureEndpointTable+0x34>
		if (!(Table[i].Address))
     61a:	28 81       	ld	r18, Y
     61c:	21 11       	cpse	r18, r1
     61e:	03 c0       	rjmp	.+6      	; 0x626 <Endpoint_ConfigureEndpointTable+0x22>
	for (uint8_t i = 0; i < Entries; i++)
     620:	1f 5f       	subi	r17, 0xFF	; 255
     622:	25 96       	adiw	r28, 0x05	; 5
     624:	f6 cf       	rjmp	.-20     	; 0x612 <Endpoint_ConfigureEndpointTable+0xe>
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     626:	9c 81       	ldd	r25, Y+4	; 0x04
     628:	a9 81       	ldd	r26, Y+1	; 0x01
     62a:	ba 81       	ldd	r27, Y+2	; 0x02
     62c:	6b 81       	ldd	r22, Y+3	; 0x03
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     62e:	82 2f       	mov	r24, r18
     630:	8f 70       	andi	r24, 0x0F	; 15
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     632:	85 30       	cpi	r24, 0x05	; 5
     634:	30 f0       	brcs	.+12     	; 0x642 <Endpoint_ConfigureEndpointTable+0x3e>
		  return false;
     636:	80 e0       	ldi	r24, 0x00	; 0
}
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	08 95       	ret
				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoint_BytesToEPSizeMask(Size)));
     642:	42 e0       	ldi	r20, 0x02	; 2
     644:	92 30       	cpi	r25, 0x02	; 2
     646:	08 f0       	brcs	.+2      	; 0x64a <Endpoint_ConfigureEndpointTable+0x46>
     648:	46 e0       	ldi	r20, 0x06	; 6
				uint16_t CheckBytes = 8;
     64a:	e8 e0       	ldi	r30, 0x08	; 8
     64c:	f0 e0       	ldi	r31, 0x00	; 0
				uint8_t  MaskVal    = 0;
     64e:	90 e0       	ldi	r25, 0x00	; 0
				while (CheckBytes < Bytes)
     650:	ea 17       	cp	r30, r26
     652:	fb 07       	cpc	r31, r27
     654:	78 f0       	brcs	.+30     	; 0x674 <Endpoint_ConfigureEndpointTable+0x70>
				return (MaskVal << EPSIZE0);
     656:	92 95       	swap	r25
     658:	90 7f       	andi	r25, 0xF0	; 240
				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoint_BytesToEPSizeMask(Size)));
     65a:	49 2b       	or	r20, r25
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     65c:	62 95       	swap	r22
     65e:	66 0f       	add	r22, r22
     660:	66 0f       	add	r22, r22
     662:	60 7c       	andi	r22, 0xC0	; 192
     664:	22 1f       	adc	r18, r18
     666:	22 27       	eor	r18, r18
     668:	22 1f       	adc	r18, r18
     66a:	62 2b       	or	r22, r18
				return Endpoint_ConfigureEndpoint_Prv(Number,
     66c:	97 df       	rcall	.-210    	; 0x59c <Endpoint_ConfigureEndpoint_Prv>
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     66e:	81 11       	cpse	r24, r1
     670:	d7 cf       	rjmp	.-82     	; 0x620 <Endpoint_ConfigureEndpointTable+0x1c>
     672:	e1 cf       	rjmp	.-62     	; 0x636 <Endpoint_ConfigureEndpointTable+0x32>
					MaskVal++;
     674:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     676:	ee 0f       	add	r30, r30
     678:	ff 1f       	adc	r31, r31
     67a:	ea cf       	rjmp	.-44     	; 0x650 <Endpoint_ConfigureEndpointTable+0x4c>

0000067c <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     67c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <USB_ControlRequest>
     680:	87 ff       	sbrs	r24, 7
     682:	13 c0       	rjmp	.+38     	; 0x6aa <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     684:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     688:	82 ff       	sbrs	r24, 2
     68a:	06 c0       	rjmp	.+12     	; 0x698 <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     68c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     690:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     692:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     696:	04 c0       	rjmp	.+8      	; 0x6a0 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     698:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <USB_DeviceState>
     69c:	81 11       	cpse	r24, r1
     69e:	f2 cf       	rjmp	.-28     	; 0x684 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
     6a0:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6a2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <USB_DeviceState>
     6a6:	88 23       	and	r24, r24
     6a8:	d9 f3       	breq	.-10     	; 0x6a0 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		while (!(Endpoint_IsINReady()))
     6ae:	80 ff       	sbrs	r24, 0
     6b0:	f8 cf       	rjmp	.-16     	; 0x6a2 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     6b6:	8e 77       	andi	r24, 0x7E	; 126
     6b8:	ec cf       	rjmp	.-40     	; 0x692 <Endpoint_ClearStatusStage+0x16>

000006ba <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     6ba:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     6be:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
     6c2:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     6c4:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     6c8:	90 ff       	sbrs	r25, 0
     6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <Endpoint_WaitUntilReady+0x1e>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6cc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     6d0:	90 ff       	sbrs	r25, 0
     6d2:	06 c0       	rjmp	.+12     	; 0x6e0 <Endpoint_WaitUntilReady+0x26>
			  return ENDPOINT_READYWAIT_NoError;
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6d8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     6dc:	92 fd       	sbrc	r25, 2
     6de:	fa cf       	rjmp	.-12     	; 0x6d4 <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     6e0:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     6e4:	99 23       	and	r25, r25
     6e6:	91 f0       	breq	.+36     	; 0x70c <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     6e8:	95 30       	cpi	r25, 0x05	; 5
     6ea:	91 f0       	breq	.+36     	; 0x710 <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     6ec:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     6f0:	95 fd       	sbrc	r25, 5
     6f2:	10 c0       	rjmp	.+32     	; 0x714 <Endpoint_WaitUntilReady+0x5a>
     6f4:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     6f8:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     6fc:	24 17       	cp	r18, r20
     6fe:	35 07       	cpc	r19, r21
     700:	09 f3       	breq	.-62     	; 0x6c4 <Endpoint_WaitUntilReady+0xa>
     702:	81 50       	subi	r24, 0x01	; 1
     704:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     706:	f1 f6       	brne	.-68     	; 0x6c4 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     708:	84 e0       	ldi	r24, 0x04	; 4
     70a:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     70c:	82 e0       	ldi	r24, 0x02	; 2
     70e:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
     710:	83 e0       	ldi	r24, 0x03	; 3
     712:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
     714:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
     716:	08 95       	ret

00000718 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     718:	40 d0       	rcall	.+128    	; 0x79a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     71a:	42 d0       	rcall	.+132    	; 0x7a0 <USB_INT_ClearAllInterrupts>
     71c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     720:	8f 77       	andi	r24, 0x7F	; 127
     722:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     726:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
     72a:	80 68       	ori	r24, 0x80	; 128
     72c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     730:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON &= ~(1 << FRZCLK);
     734:	8f 7d       	andi	r24, 0xDF	; 223
     736:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     73a:	19 bc       	out	0x29, r1	; 41
				PLLCSR = USB_PLL_PSC;
     73c:	82 e0       	ldi	r24, 0x02	; 2
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     73e:	89 bd       	out	0x29, r24	; 41
     740:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     742:	00 fe       	sbrs	r0, 0
     744:	fd cf       	rjmp	.-6      	; 0x740 <USB_ResetInterface+0x28>
     746:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     74a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     74e:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     752:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     756:	42 e0       	ldi	r20, 0x02	; 2
				return Endpoint_ConfigureEndpoint_Prv(Number,
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	1f df       	rcall	.-450    	; 0x59c <Endpoint_ConfigureEndpoint_Prv>
     75e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     762:	8e 7f       	andi	r24, 0xFE	; 254
     764:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     768:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << SUSPE);
     76c:	81 60       	ori	r24, 0x01	; 1
     76e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     772:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << EORSTE);
     776:	88 60       	ori	r24, 0x08	; 8
     778:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     77c:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
				UDCON  &= ~(1 << DETACH);
     780:	8e 7f       	andi	r24, 0xFE	; 254
     782:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
     786:	08 95       	ret

00000788 <USB_Init>:
}
     788:	e3 e6       	ldi	r30, 0x63	; 99
				REGCR  &= ~(1 << REGDIS);
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	80 81       	ld	r24, Z
     78e:	8e 7f       	andi	r24, 0xFE	; 254
     790:	80 83       	st	Z, r24
	USB_IsInitialized = true;
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <USB_IsInitialized>
	USB_ResetInterface();
     798:	bf cf       	rjmp	.-130    	; 0x718 <USB_ResetInterface>

0000079a <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     79a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
	#endif
}
     79e:	08 95       	ret

000007a0 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     7a0:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#endif
}
     7a4:	08 95       	ret

000007a6 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     7a6:	1f 92       	push	r1
     7a8:	0f 92       	push	r0
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	0f 92       	push	r0
     7ae:	11 24       	eor	r1, r1
     7b0:	2f 93       	push	r18
     7b2:	3f 93       	push	r19
     7b4:	4f 93       	push	r20
     7b6:	5f 93       	push	r21
     7b8:	6f 93       	push	r22
     7ba:	7f 93       	push	r23
     7bc:	8f 93       	push	r24
     7be:	9f 93       	push	r25
     7c0:	af 93       	push	r26
     7c2:	bf 93       	push	r27
     7c4:	ef 93       	push	r30
     7c6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     7c8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     7cc:	82 ff       	sbrs	r24, 2
     7ce:	0a c0       	rjmp	.+20     	; 0x7e4 <__vector_11+0x3e>
						return (UDIEN  & (1 << SOFE));
     7d0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     7d4:	82 ff       	sbrs	r24, 2
     7d6:	06 c0       	rjmp	.+12     	; 0x7e4 <__vector_11+0x3e>
						UDINT  &= ~(1 << SOFI);
     7d8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     7dc:	8b 7f       	andi	r24, 0xFB	; 251
     7de:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     7e2:	20 d2       	rcall	.+1088   	; 0xc24 <USB_Event_Stub>
						return (UDINT  & (1 << SUSPI));
     7e4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     7e8:	80 ff       	sbrs	r24, 0
     7ea:	17 c0       	rjmp	.+46     	; 0x81a <__vector_11+0x74>
						return (UDIEN  & (1 << SUSPE));
     7ec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     7f0:	80 ff       	sbrs	r24, 0
     7f2:	13 c0       	rjmp	.+38     	; 0x81a <__vector_11+0x74>
						UDIEN  &= ~(1 << SUSPE);
     7f4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     7f8:	8e 7f       	andi	r24, 0xFE	; 254
     7fa:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << WAKEUPE);
     7fe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     802:	80 61       	ori	r24, 0x10	; 16
     804:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     808:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     80c:	80 62       	ori	r24, 0x20	; 32
     80e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				PLLCSR = 0;
     812:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     814:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
     818:	bb dc       	rcall	.-1674   	; 0x190 <EVENT_USB_Device_Disconnect>
						return (UDINT  & (1 << WAKEUPI));
     81a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     81e:	84 ff       	sbrs	r24, 4
     820:	27 c0       	rjmp	.+78     	; 0x870 <__vector_11+0xca>
						return (UDIEN  & (1 << WAKEUPE));
     822:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     826:	84 ff       	sbrs	r24, 4
     828:	23 c0       	rjmp	.+70     	; 0x870 <__vector_11+0xca>
				PLLCSR = USB_PLL_PSC;
     82a:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     82c:	82 e0       	ldi	r24, 0x02	; 2
     82e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     830:	09 b4       	in	r0, 0x29	; 41
     832:	00 fe       	sbrs	r0, 0
     834:	fd cf       	rjmp	.-6      	; 0x830 <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     836:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     83a:	8f 7d       	andi	r24, 0xDF	; 223
     83c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						UDINT  &= ~(1 << WAKEUPI);
     840:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     844:	8f 7e       	andi	r24, 0xEF	; 239
     846:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						UDIEN  &= ~(1 << WAKEUPE);
     84a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     84e:	8f 7e       	andi	r24, 0xEF	; 239
     850:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << SUSPE);
     854:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     858:	81 60       	ori	r24, 0x01	; 1
     85a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     85e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <USB_Device_ConfigurationNumber>
     862:	88 23       	and	r24, r24
     864:	09 f4       	brne	.+2      	; 0x868 <__vector_11+0xc2>
     866:	40 c0       	rjmp	.+128    	; 0x8e8 <__vector_11+0x142>
		  USB_DeviceState = DEVICE_STATE_Configured;
     868:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     86a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     86e:	7b dc       	rcall	.-1802   	; 0x166 <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << EORSTI));
     870:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     874:	83 ff       	sbrs	r24, 3
     876:	27 c0       	rjmp	.+78     	; 0x8c6 <__vector_11+0x120>
						return (UDIEN  & (1 << EORSTE));
     878:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     87c:	83 ff       	sbrs	r24, 3
     87e:	23 c0       	rjmp	.+70     	; 0x8c6 <__vector_11+0x120>
						UDINT  &= ~(1 << EORSTI);
     880:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     884:	87 7f       	andi	r24, 0xF7	; 247
     886:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     88a:	82 e0       	ldi	r24, 0x02	; 2
     88c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     890:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
     894:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     898:	8e 7f       	andi	r24, 0xFE	; 254
     89a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						UDIEN  &= ~(1 << SUSPE);
     89e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     8a2:	8e 7f       	andi	r24, 0xFE	; 254
     8a4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << WAKEUPE);
     8a8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     8ac:	80 61       	ori	r24, 0x10	; 16
     8ae:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     8b2:	42 e0       	ldi	r20, 0x02	; 2
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	71 de       	rcall	.-798    	; 0x59c <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
     8ba:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     8be:	88 60       	ori	r24, 0x08	; 8
     8c0:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     8c4:	af d1       	rcall	.+862    	; 0xc24 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     8c6:	ff 91       	pop	r31
     8c8:	ef 91       	pop	r30
     8ca:	bf 91       	pop	r27
     8cc:	af 91       	pop	r26
     8ce:	9f 91       	pop	r25
     8d0:	8f 91       	pop	r24
     8d2:	7f 91       	pop	r23
     8d4:	6f 91       	pop	r22
     8d6:	5f 91       	pop	r21
     8d8:	4f 91       	pop	r20
     8da:	3f 91       	pop	r19
     8dc:	2f 91       	pop	r18
     8de:	0f 90       	pop	r0
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	0f 90       	pop	r0
     8e4:	1f 90       	pop	r1
     8e6:	18 95       	reti
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     8e8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     8ec:	87 fd       	sbrc	r24, 7
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <__vector_11+0x14e>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	bb cf       	rjmp	.-138    	; 0x86a <__vector_11+0xc4>
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	b9 cf       	rjmp	.-142    	; 0x86a <__vector_11+0xc4>

000008f8 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	2f 93       	push	r18
     904:	3f 93       	push	r19
     906:	4f 93       	push	r20
     908:	5f 93       	push	r21
     90a:	6f 93       	push	r22
     90c:	7f 93       	push	r23
     90e:	8f 93       	push	r24
     910:	9f 93       	push	r25
     912:	af 93       	push	r26
     914:	bf 93       	push	r27
     916:	cf 93       	push	r28
     918:	ef 93       	push	r30
     91a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     91c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     920:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     922:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     926:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						UEIENX &= ~(1 << RXSTPE);
     92a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     92e:	87 7f       	andi	r24, 0xF7	; 247
     930:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     934:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     936:	1b d0       	rcall	.+54     	; 0x96e <USB_Device_ProcessControlRequest>
     938:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						UEIENX |= (1 << RXSTPE);
     93c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     940:	88 60       	ori	r24, 0x08	; 8
     942:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     946:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     94a:	ff 91       	pop	r31
     94c:	ef 91       	pop	r30
     94e:	cf 91       	pop	r28
     950:	bf 91       	pop	r27
     952:	af 91       	pop	r26
     954:	9f 91       	pop	r25
     956:	8f 91       	pop	r24
     958:	7f 91       	pop	r23
     95a:	6f 91       	pop	r22
     95c:	5f 91       	pop	r21
     95e:	4f 91       	pop	r20
     960:	3f 91       	pop	r19
     962:	2f 91       	pop	r18
     964:	0f 90       	pop	r0
     966:	0f be       	out	0x3f, r0	; 63
     968:	0f 90       	pop	r0
     96a:	1f 90       	pop	r1
     96c:	18 95       	reti

0000096e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	aa 97       	sbiw	r28, 0x2a	; 42
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
     984:	e8 e4       	ldi	r30, 0x48	; 72
     986:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     988:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     98c:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     98e:	21 e0       	ldi	r18, 0x01	; 1
     990:	e0 35       	cpi	r30, 0x50	; 80
     992:	f2 07       	cpc	r31, r18
     994:	c9 f7       	brne	.-14     	; 0x988 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
     996:	00 dc       	rcall	.-2048   	; 0x198 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     998:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
     99c:	83 ff       	sbrs	r24, 3
     99e:	10 c0       	rjmp	.+32     	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     9a0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     9a4:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <USB_ControlRequest+0x1>
     9a8:	95 30       	cpi	r25, 0x05	; 5
     9aa:	09 f4       	brne	.+2      	; 0x9ae <USB_Device_ProcessControlRequest+0x40>
     9ac:	d8 c0       	rjmp	.+432    	; 0xb5e <USB_Device_ProcessControlRequest+0x1f0>
     9ae:	00 f5       	brcc	.+64     	; 0x9f0 <USB_Device_ProcessControlRequest+0x82>
     9b0:	91 30       	cpi	r25, 0x01	; 1
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <USB_Device_ProcessControlRequest+0x48>
     9b4:	8b c0       	rjmp	.+278    	; 0xacc <USB_Device_ProcessControlRequest+0x15e>
     9b6:	08 f4       	brcc	.+2      	; 0x9ba <USB_Device_ProcessControlRequest+0x4c>
     9b8:	61 c0       	rjmp	.+194    	; 0xa7c <USB_Device_ProcessControlRequest+0x10e>
     9ba:	93 30       	cpi	r25, 0x03	; 3
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
     9be:	86 c0       	rjmp	.+268    	; 0xacc <USB_Device_ProcessControlRequest+0x15e>
     9c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     9c4:	83 ff       	sbrs	r24, 3
     9c6:	0a c0       	rjmp	.+20     	; 0x9dc <USB_Device_ProcessControlRequest+0x6e>
				UEINTX &= ~(1 << RXSTPI);
     9c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     9cc:	87 7f       	andi	r24, 0xF7	; 247
     9ce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				UECONX |= (1 << STALLRQ);
     9d2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     9d6:	80 62       	ori	r24, 0x20	; 32
     9d8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     9dc:	aa 96       	adiw	r28, 0x2a	; 42
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	08 95       	ret
		switch (USB_ControlRequest.bRequest)
     9f0:	98 30       	cpi	r25, 0x08	; 8
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <USB_Device_ProcessControlRequest+0x88>
     9f4:	ec c0       	rjmp	.+472    	; 0xbce <USB_Device_ProcessControlRequest+0x260>
     9f6:	99 30       	cpi	r25, 0x09	; 9
     9f8:	09 f4       	brne	.+2      	; 0x9fc <USB_Device_ProcessControlRequest+0x8e>
     9fa:	f6 c0       	rjmp	.+492    	; 0xbe8 <USB_Device_ProcessControlRequest+0x27a>
     9fc:	96 30       	cpi	r25, 0x06	; 6
     9fe:	01 f7       	brne	.-64     	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a00:	80 58       	subi	r24, 0x80	; 128
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	e8 f6       	brcc	.-70     	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     a06:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <USB_ControlRequest+0x2>
     a0a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <USB_ControlRequest+0x3>
     a0e:	8c 3d       	cpi	r24, 0xDC	; 220
     a10:	23 e0       	ldi	r18, 0x03	; 3
     a12:	92 07       	cpc	r25, r18
     a14:	09 f0       	breq	.+2      	; 0xa18 <USB_Device_ProcessControlRequest+0xaa>
     a16:	c6 c0       	rjmp	.+396    	; 0xba4 <USB_Device_ProcessControlRequest+0x236>
	SignatureDescriptor.Header.Type = DTYPE_String;
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     a1c:	8a e2       	ldi	r24, 0x2A	; 42
     a1e:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     a20:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     a22:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     a24:	de 01       	movw	r26, r28
     a26:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     a28:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     a2a:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     a2c:	51 e2       	ldi	r21, 0x21	; 33
     a2e:	e3 2f       	mov	r30, r19
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
     a36:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     a38:	20 ff       	sbrs	r18, 0
     a3a:	03 c0       	rjmp	.+6      	; 0xa42 <USB_Device_ProcessControlRequest+0xd4>
					{
						SerialByte >>= 4;
     a3c:	e2 95       	swap	r30
     a3e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     a40:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     a42:	ef 70       	andi	r30, 0x0F	; 15
     a44:	8e 2f       	mov	r24, r30
     a46:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     a48:	ea 30       	cpi	r30, 0x0A	; 10
     a4a:	08 f4       	brcc	.+2      	; 0xa4e <USB_Device_ProcessControlRequest+0xe0>
     a4c:	a9 c0       	rjmp	.+338    	; 0xba0 <USB_Device_ProcessControlRequest+0x232>
     a4e:	c7 96       	adiw	r24, 0x37	; 55
     a50:	8d 93       	st	X+, r24
     a52:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     a54:	2f 5f       	subi	r18, 0xFF	; 255
     a56:	24 31       	cpi	r18, 0x14	; 20
     a58:	51 f7       	brne	.-44     	; 0xa2e <USB_Device_ProcessControlRequest+0xc0>
				SREG = GlobalIntState;
     a5a:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
     a5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a60:	87 7f       	andi	r24, 0xF7	; 247
     a62:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     a66:	6a e2       	ldi	r22, 0x2A	; 42
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	ce 01       	movw	r24, r28
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	dd dc       	rcall	.-1606   	; 0x42a <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a70:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a74:	8b 77       	andi	r24, 0x7B	; 123
     a76:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a7a:	a2 cf       	rjmp	.-188    	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a7c:	80 38       	cpi	r24, 0x80	; 128
     a7e:	99 f0       	breq	.+38     	; 0xaa6 <USB_Device_ProcessControlRequest+0x138>
     a80:	82 38       	cpi	r24, 0x82	; 130
     a82:	09 f0       	breq	.+2      	; 0xa86 <USB_Device_ProcessControlRequest+0x118>
     a84:	9d cf       	rjmp	.-198    	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a86:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <USB_ControlRequest+0x4>
     a8a:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     a8c:	85 30       	cpi	r24, 0x05	; 5
     a8e:	08 f0       	brcs	.+2      	; 0xa92 <USB_Device_ProcessControlRequest+0x124>
     a90:	97 cf       	rjmp	.-210    	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a92:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a96:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     a9a:	85 fb       	bst	r24, 5
     a9c:	88 27       	eor	r24, r24
     a9e:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aa0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     aa4:	06 c0       	rjmp	.+12     	; 0xab2 <USB_Device_ProcessControlRequest+0x144>
	uint8_t CurrentStatus = 0;
     aa6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
     aaa:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <USB_Device_RemoteWakeupEnabled>
     aae:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     ab0:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
     ab2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ab6:	97 7f       	andi	r25, 0xF7	; 247
     ab8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     abc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
     ac0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ac4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ac8:	8e 77       	andi	r24, 0x7E	; 126
     aca:	32 c0       	rjmp	.+100    	; 0xb30 <USB_Device_ProcessControlRequest+0x1c2>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     acc:	28 2f       	mov	r18, r24
     ace:	2d 7f       	andi	r18, 0xFD	; 253
     ad0:	09 f0       	breq	.+2      	; 0xad4 <USB_Device_ProcessControlRequest+0x166>
     ad2:	76 cf       	rjmp	.-276    	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     ad4:	88 23       	and	r24, r24
     ad6:	e9 f0       	breq	.+58     	; 0xb12 <USB_Device_ProcessControlRequest+0x1a4>
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	09 f0       	breq	.+2      	; 0xade <USB_Device_ProcessControlRequest+0x170>
     adc:	71 cf       	rjmp	.-286    	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     ade:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <USB_ControlRequest+0x2>
     ae2:	81 11       	cpse	r24, r1
     ae4:	20 c0       	rjmp	.+64     	; 0xb26 <USB_Device_ProcessControlRequest+0x1b8>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ae6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <USB_ControlRequest+0x4>
     aea:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     aec:	2f ef       	ldi	r18, 0xFF	; 255
     aee:	28 0f       	add	r18, r24
     af0:	24 30       	cpi	r18, 0x04	; 4
     af2:	08 f0       	brcs	.+2      	; 0xaf6 <USB_Device_ProcessControlRequest+0x188>
     af4:	65 cf       	rjmp	.-310    	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     af6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
     afa:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     afe:	20 ff       	sbrs	r18, 0
     b00:	12 c0       	rjmp	.+36     	; 0xb26 <USB_Device_ProcessControlRequest+0x1b8>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b02:	93 30       	cpi	r25, 0x03	; 3
     b04:	c9 f4       	brne	.+50     	; 0xb38 <USB_Device_ProcessControlRequest+0x1ca>
				UECONX |= (1 << STALLRQ);
     b06:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     b0a:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
     b0c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <USB_Device_ProcessControlRequest+0x1b8>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b12:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <USB_ControlRequest+0x2>
     b16:	81 30       	cpi	r24, 0x01	; 1
     b18:	09 f0       	breq	.+2      	; 0xb1c <USB_Device_ProcessControlRequest+0x1ae>
     b1a:	52 cf       	rjmp	.-348    	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b1c:	93 30       	cpi	r25, 0x03	; 3
     b1e:	09 f0       	breq	.+2      	; 0xb22 <USB_Device_ProcessControlRequest+0x1b4>
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b26:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				UEINTX &= ~(1 << RXSTPI);
     b2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b2e:	87 7f       	andi	r24, 0xF7	; 247
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b30:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearStatusStage();
     b34:	a3 dd       	rcall	.-1210   	; 0x67c <Endpoint_ClearStatusStage>
     b36:	44 cf       	rjmp	.-376    	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
				UECONX |= (1 << STALLRQC);
     b38:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     b3c:	90 61       	ori	r25, 0x10	; 16
     b3e:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     b42:	21 e0       	ldi	r18, 0x01	; 1
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	01 c0       	rjmp	.+2      	; 0xb4a <USB_Device_ProcessControlRequest+0x1dc>
     b48:	22 0f       	add	r18, r18
     b4a:	8a 95       	dec	r24
     b4c:	ea f7       	brpl	.-6      	; 0xb48 <USB_Device_ProcessControlRequest+0x1da>
     b4e:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
     b52:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UECONX |= (1 << RSTDT);
     b56:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     b5a:	88 60       	ori	r24, 0x08	; 8
     b5c:	d7 cf       	rjmp	.-82     	; 0xb0c <USB_Device_ProcessControlRequest+0x19e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b5e:	81 11       	cpse	r24, r1
     b60:	2f cf       	rjmp	.-418    	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     b62:	10 91 4a 01 	lds	r17, 0x014A	; 0x80014a <USB_ControlRequest+0x2>
     b66:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b68:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     b6c:	80 78       	andi	r24, 0x80	; 128
     b6e:	81 2b       	or	r24, r17
     b70:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
				UEINTX &= ~(1 << RXSTPI);
     b74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b78:	87 7f       	andi	r24, 0xF7	; 247
     b7a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearStatusStage();
     b7e:	7e dd       	rcall	.-1284   	; 0x67c <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b80:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	while (!(Endpoint_IsINReady()));
     b84:	80 ff       	sbrs	r24, 0
     b86:	fc cf       	rjmp	.-8      	; 0xb80 <USB_Device_ProcessControlRequest+0x212>
				UDADDR |= (1 << ADDEN);
     b88:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     b8c:	80 68       	ori	r24, 0x80	; 128
     b8e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b92:	83 e0       	ldi	r24, 0x03	; 3
     b94:	11 11       	cpse	r17, r1
     b96:	01 c0       	rjmp	.+2      	; 0xb9a <USB_Device_ProcessControlRequest+0x22c>
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <USB_DeviceState>
     b9e:	10 cf       	rjmp	.-480    	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     ba0:	c0 96       	adiw	r24, 0x30	; 48
     ba2:	56 cf       	rjmp	.-340    	; 0xa50 <USB_Device_ProcessControlRequest+0xe2>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     ba4:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <USB_ControlRequest+0x4>
     ba8:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <USB_ControlRequest+0x5>
     bac:	ae 01       	movw	r20, r28
     bae:	4f 5f       	subi	r20, 0xFF	; 255
     bb0:	5f 4f       	sbci	r21, 0xFF	; 255
     bb2:	0b dc       	rcall	.-2026   	; 0x3ca <CALLBACK_USB_GetDescriptor>
     bb4:	bc 01       	movw	r22, r24
     bb6:	89 2b       	or	r24, r25
     bb8:	09 f4       	brne	.+2      	; 0xbbc <USB_Device_ProcessControlRequest+0x24e>
     bba:	02 cf       	rjmp	.-508    	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
				UEINTX &= ~(1 << RXSTPI);
     bbc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     bc0:	97 7f       	andi	r25, 0xF7	; 247
     bc2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	9a 81       	ldd	r25, Y+2	; 0x02
     bca:	8b dc       	rcall	.-1770   	; 0x4e2 <Endpoint_Write_Control_PStream_LE>
     bcc:	51 cf       	rjmp	.-350    	; 0xa70 <USB_Device_ProcessControlRequest+0x102>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     bce:	80 38       	cpi	r24, 0x80	; 128
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <USB_Device_ProcessControlRequest+0x266>
     bd2:	f6 ce       	rjmp	.-532    	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
     bd4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     bd8:	87 7f       	andi	r24, 0xF7	; 247
     bda:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     bde:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
     be2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     be6:	6e cf       	rjmp	.-292    	; 0xac4 <USB_Device_ProcessControlRequest+0x156>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     be8:	81 11       	cpse	r24, r1
     bea:	ea ce       	rjmp	.-556    	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     bec:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <USB_ControlRequest+0x2>
     bf0:	92 30       	cpi	r25, 0x02	; 2
     bf2:	08 f0       	brcs	.+2      	; 0xbf6 <USB_Device_ProcessControlRequest+0x288>
     bf4:	e5 ce       	rjmp	.-566    	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
				UEINTX &= ~(1 << RXSTPI);
     bf6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     bfa:	87 7f       	andi	r24, 0xF7	; 247
     bfc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c00:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
     c04:	3b dd       	rcall	.-1418   	; 0x67c <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
     c06:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <USB_Device_ConfigurationNumber>
     c0a:	88 23       	and	r24, r24
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c0c:	29 f0       	breq	.+10     	; 0xc18 <USB_Device_ProcessControlRequest+0x2aa>
     c0e:	84 e0       	ldi	r24, 0x04	; 4
     c10:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
     c14:	be da       	rcall	.-2692   	; 0x192 <EVENT_USB_Device_ConfigurationChanged>
     c16:	d4 ce       	rjmp	.-600    	; 0x9c0 <USB_Device_ProcessControlRequest+0x52>
				return (UDADDR & (1 << ADDEN));
     c18:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c1c:	87 fd       	sbrc	r24, 7
     c1e:	f7 cf       	rjmp	.-18     	; 0xc0e <USB_Device_ProcessControlRequest+0x2a0>
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	f6 cf       	rjmp	.-20     	; 0xc10 <USB_Device_ProcessControlRequest+0x2a2>

00000c24 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     c24:	08 95       	ret

00000c26 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     c26:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     c28:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <USB_DeviceState>
     c2c:	88 23       	and	r24, r24
     c2e:	91 f0       	breq	.+36     	; 0xc54 <USB_USBTask+0x2e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c30:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     c34:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c36:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     c3a:	80 fd       	sbrc	r24, 0
     c3c:	0d c0       	rjmp	.+26     	; 0xc58 <USB_USBTask+0x32>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c40:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c42:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     c4a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     c4c:	90 de       	rcall	.-736    	; 0x96e <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c4e:	cf 70       	andi	r28, 0x0F	; 15
     c50:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
}
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c58:	80 e8       	ldi	r24, 0x80	; 128
     c5a:	f2 cf       	rjmp	.-28     	; 0xc40 <USB_USBTask+0x1a>

00000c5c <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     c62:	fc 01       	movw	r30, r24
     c64:	70 96       	adiw	r30, 0x10	; 16
     c66:	8b e0       	ldi	r24, 0x0B	; 11
     c68:	df 01       	movw	r26, r30
     c6a:	1d 92       	st	X+, r1
     c6c:	8a 95       	dec	r24
     c6e:	e9 f7       	brne	.-6      	; 0xc6a <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     c70:	82 e0       	ldi	r24, 0x02	; 2
     c72:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     c74:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     c76:	83 e0       	ldi	r24, 0x03	; 3
     c78:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	ce 01       	movw	r24, r28
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	c1 dc       	rcall	.-1662   	; 0x604 <Endpoint_ConfigureEndpointTable>
     c82:	88 23       	and	r24, r24
     c84:	61 f0       	breq	.+24     	; 0xc9e <CDC_Device_ConfigureEndpoints+0x42>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	ce 01       	movw	r24, r28
     c8a:	06 96       	adiw	r24, 0x06	; 6
     c8c:	bb dc       	rcall	.-1674   	; 0x604 <Endpoint_ConfigureEndpointTable>
     c8e:	88 23       	and	r24, r24
     c90:	31 f0       	breq	.+12     	; 0xc9e <CDC_Device_ConfigureEndpoints+0x42>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     c92:	61 e0       	ldi	r22, 0x01	; 1
     c94:	ce 01       	movw	r24, r28
     c96:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	return true;
}
     c98:	df 91       	pop	r29
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     c9a:	cf 91       	pop	r28
     c9c:	b3 cc       	rjmp	.-1690   	; 0x604 <Endpoint_ConfigureEndpointTable>
}
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <CDC_Device_SendByte>:
	return Endpoint_Write_PStream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     ca6:	cf 93       	push	r28
     ca8:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     caa:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <USB_DeviceState>
     cae:	24 30       	cpi	r18, 0x04	; 4
     cb0:	f9 f4       	brne	.+62     	; 0xcf0 <CDC_Device_SendByte+0x4a>
     cb2:	fc 01       	movw	r30, r24
     cb4:	44 89       	ldd	r20, Z+20	; 0x14
     cb6:	55 89       	ldd	r21, Z+21	; 0x15
     cb8:	66 89       	ldd	r22, Z+22	; 0x16
     cba:	77 89       	ldd	r23, Z+23	; 0x17
     cbc:	45 2b       	or	r20, r21
     cbe:	46 2b       	or	r20, r22
     cc0:	47 2b       	or	r20, r23
     cc2:	b1 f0       	breq	.+44     	; 0xcf0 <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cc4:	81 81       	ldd	r24, Z+1	; 0x01
     cc6:	8f 70       	andi	r24, 0x0F	; 15
     cc8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ccc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     cd0:	85 ff       	sbrs	r24, 5
     cd2:	05 c0       	rjmp	.+10     	; 0xcde <CDC_Device_SendByte+0x38>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cd4:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     cd8:	80 e0       	ldi	r24, 0x00	; 0
}
     cda:	cf 91       	pop	r28
     cdc:	08 95       	ret
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cde:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ce2:	8e 77       	andi	r24, 0x7E	; 126
     ce4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     ce8:	e8 dc       	rcall	.-1584   	; 0x6ba <Endpoint_WaitUntilReady>
     cea:	88 23       	and	r24, r24
     cec:	99 f3       	breq	.-26     	; 0xcd4 <CDC_Device_SendByte+0x2e>
     cee:	f5 cf       	rjmp	.-22     	; 0xcda <CDC_Device_SendByte+0x34>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	f3 cf       	rjmp	.-26     	; 0xcda <CDC_Device_SendByte+0x34>

00000cf4 <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
     cf4:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
     cf6:	68 2f       	mov	r22, r24
     cf8:	84 85       	ldd	r24, Z+12	; 0x0c
     cfa:	95 85       	ldd	r25, Z+13	; 0x0d
     cfc:	d4 df       	rcall	.-88     	; 0xca6 <CDC_Device_SendByte>
     cfe:	21 e0       	ldi	r18, 0x01	; 1
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	81 11       	cpse	r24, r1
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <CDC_Device_putchar+0x16>
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	20 e0       	ldi	r18, 0x00	; 0
}
     d0a:	88 27       	eor	r24, r24
     d0c:	99 27       	eor	r25, r25
     d0e:	82 1b       	sub	r24, r18
     d10:	93 0b       	sbc	r25, r19
     d12:	08 95       	ret

00000d14 <CDC_Device_Flush>:
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     d14:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <USB_DeviceState>
     d18:	24 30       	cpi	r18, 0x04	; 4
     d1a:	29 f5       	brne	.+74     	; 0xd66 <CDC_Device_Flush+0x52>
     d1c:	fc 01       	movw	r30, r24
     d1e:	44 89       	ldd	r20, Z+20	; 0x14
     d20:	55 89       	ldd	r21, Z+21	; 0x15
     d22:	66 89       	ldd	r22, Z+22	; 0x16
     d24:	77 89       	ldd	r23, Z+23	; 0x17
     d26:	45 2b       	or	r20, r21
     d28:	46 2b       	or	r20, r22
     d2a:	47 2b       	or	r20, r23
     d2c:	e1 f0       	breq	.+56     	; 0xd66 <CDC_Device_Flush+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d2e:	81 81       	ldd	r24, Z+1	; 0x01
     d30:	8f 70       	andi	r24, 0x0F	; 15
     d32:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
					return UEBCLX;
     d36:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
	if (!(Endpoint_BytesInEndpoint()))
     d3a:	81 11       	cpse	r24, r1
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <CDC_Device_Flush+0x2e>
	  return ENDPOINT_READYWAIT_NoError;
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	08 95       	ret
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d42:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d4a:	8e 77       	andi	r24, 0x7E	; 126
     d4c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (BankFull)
     d50:	95 fd       	sbrc	r25, 5
     d52:	f5 cf       	rjmp	.-22     	; 0xd3e <CDC_Device_Flush+0x2a>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     d54:	b2 dc       	rcall	.-1692   	; 0x6ba <Endpoint_WaitUntilReady>
     d56:	81 11       	cpse	r24, r1
     d58:	07 c0       	rjmp	.+14     	; 0xd68 <CDC_Device_Flush+0x54>
     d5a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d5e:	9e 77       	andi	r25, 0x7E	; 126
     d60:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d64:	08 95       	ret
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     d66:	82 e0       	ldi	r24, 0x02	; 2
}
     d68:	08 95       	ret

00000d6a <CDC_Device_USBTask>:
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     d6a:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <USB_DeviceState>
     d6e:	24 30       	cpi	r18, 0x04	; 4
     d70:	89 f4       	brne	.+34     	; 0xd94 <CDC_Device_USBTask+0x2a>
     d72:	fc 01       	movw	r30, r24
     d74:	44 89       	ldd	r20, Z+20	; 0x14
     d76:	55 89       	ldd	r21, Z+21	; 0x15
     d78:	66 89       	ldd	r22, Z+22	; 0x16
     d7a:	77 89       	ldd	r23, Z+23	; 0x17
     d7c:	45 2b       	or	r20, r21
     d7e:	46 2b       	or	r20, r22
     d80:	47 2b       	or	r20, r23
     d82:	41 f0       	breq	.+16     	; 0xd94 <CDC_Device_USBTask+0x2a>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d84:	21 81       	ldd	r18, Z+1	; 0x01
     d86:	2f 70       	andi	r18, 0x0F	; 15
     d88:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d8c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (Endpoint_IsINReady())
     d90:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
     d92:	c0 cf       	rjmp	.-128    	; 0xd14 <CDC_Device_Flush>
}
     d94:	08 95       	ret

00000d96 <CDC_Device_ReceiveByte>:
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     d96:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <USB_DeviceState>
     d9a:	24 30       	cpi	r18, 0x04	; 4
     d9c:	19 f0       	breq	.+6      	; 0xda4 <CDC_Device_ReceiveByte+0xe>
	  return -1;
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	9f ef       	ldi	r25, 0xFF	; 255
     da2:	08 95       	ret
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     da4:	fc 01       	movw	r30, r24
     da6:	44 89       	ldd	r20, Z+20	; 0x14
     da8:	55 89       	ldd	r21, Z+21	; 0x15
     daa:	66 89       	ldd	r22, Z+22	; 0x16
     dac:	77 89       	ldd	r23, Z+23	; 0x17
     dae:	45 2b       	or	r20, r21
     db0:	46 2b       	or	r20, r22
     db2:	47 2b       	or	r20, r23
     db4:	a1 f3       	breq	.-24     	; 0xd9e <CDC_Device_ReceiveByte+0x8>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     db6:	86 81       	ldd	r24, Z+6	; 0x06
     db8:	8f 70       	andi	r24, 0x0F	; 15
     dba:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     dbe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (Endpoint_IsOUTReceived())
     dc2:	82 ff       	sbrs	r24, 2
     dc4:	ec cf       	rjmp	.-40     	; 0xd9e <CDC_Device_ReceiveByte+0x8>
					return UEBCLX;
     dc6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
		if (Endpoint_BytesInEndpoint())
     dca:	88 23       	and	r24, r24
     dcc:	69 f0       	breq	.+26     	; 0xde8 <CDC_Device_ReceiveByte+0x52>
				return UEDATX;
     dce:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
		  ReceivedByte = Endpoint_Read_8();
     dd2:	90 e0       	ldi	r25, 0x00	; 0
					return UEBCLX;
     dd4:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
		if (!(Endpoint_BytesInEndpoint()))
     dd8:	21 11       	cpse	r18, r1
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <CDC_Device_ReceiveByte+0x50>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ddc:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     de0:	2b 77       	andi	r18, 0x7B	; 123
     de2:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
}
     de6:	08 95       	ret
	int16_t ReceivedByte = -1;
     de8:	8f ef       	ldi	r24, 0xFF	; 255
     dea:	9f ef       	ldi	r25, 0xFF	; 255
     dec:	f3 cf       	rjmp	.-26     	; 0xdd4 <CDC_Device_ReceiveByte+0x3e>

00000dee <CDC_Device_getchar>:

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
     dee:	fc 01       	movw	r30, r24
     df0:	84 85       	ldd	r24, Z+12	; 0x0c
     df2:	95 85       	ldd	r25, Z+13	; 0x0d
     df4:	d0 df       	rcall	.-96     	; 0xd96 <CDC_Device_ReceiveByte>

	if (ReceivedByte < 0)
     df6:	97 ff       	sbrs	r25, 7
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <CDC_Device_getchar+0x10>
	  return _FDEV_EOF;
     dfa:	8e ef       	ldi	r24, 0xFE	; 254
     dfc:	9f ef       	ldi	r25, 0xFF	; 255

	return ReceivedByte;
}
     dfe:	08 95       	ret

00000e00 <CDC_Device_CreateStream>:
{
     e00:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
     e02:	2e e0       	ldi	r18, 0x0E	; 14
     e04:	db 01       	movw	r26, r22
     e06:	1d 92       	st	X+, r1
     e08:	2a 95       	dec	r18
     e0a:	e9 f7       	brne	.-6      	; 0xe06 <CDC_Device_CreateStream+0x6>
     e0c:	23 e0       	ldi	r18, 0x03	; 3
     e0e:	23 83       	std	Z+3, r18	; 0x03
     e10:	2a e7       	ldi	r18, 0x7A	; 122
     e12:	36 e0       	ldi	r19, 0x06	; 6
     e14:	31 87       	std	Z+9, r19	; 0x09
     e16:	20 87       	std	Z+8, r18	; 0x08
     e18:	27 ef       	ldi	r18, 0xF7	; 247
     e1a:	36 e0       	ldi	r19, 0x06	; 6
     e1c:	33 87       	std	Z+11, r19	; 0x0b
     e1e:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
     e20:	95 87       	std	Z+13, r25	; 0x0d
     e22:	84 87       	std	Z+12, r24	; 0x0c
}
     e24:	08 95       	ret

00000e26 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
     e26:	08 95       	ret

00000e28 <CDC_Device_ProcessControlRequest>:
{
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	ec 01       	movw	r28, r24
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (!(Endpoint_IsSETUPReceived()))
     e32:	83 ff       	sbrs	r24, 3
     e34:	10 c0       	rjmp	.+32     	; 0xe56 <CDC_Device_ProcessControlRequest+0x2e>
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     e36:	28 81       	ld	r18, Y
     e38:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <USB_ControlRequest+0x4>
     e3c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <USB_ControlRequest+0x5>
     e40:	28 17       	cp	r18, r24
     e42:	19 06       	cpc	r1, r25
     e44:	41 f4       	brne	.+16     	; 0xe56 <CDC_Device_ProcessControlRequest+0x2e>
	switch (USB_ControlRequest.bRequest)
     e46:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <USB_ControlRequest+0x1>
     e4a:	81 32       	cpi	r24, 0x21	; 33
     e4c:	e1 f0       	breq	.+56     	; 0xe86 <CDC_Device_ProcessControlRequest+0x5e>
     e4e:	30 f4       	brcc	.+12     	; 0xe5c <CDC_Device_ProcessControlRequest+0x34>
     e50:	80 32       	cpi	r24, 0x20	; 32
     e52:	09 f4       	brne	.+2      	; 0xe56 <CDC_Device_ProcessControlRequest+0x2e>
     e54:	4d c0       	rjmp	.+154    	; 0xef0 <CDC_Device_ProcessControlRequest+0xc8>
}
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	08 95       	ret
	switch (USB_ControlRequest.bRequest)
     e5c:	82 32       	cpi	r24, 0x22	; 34
     e5e:	09 f4       	brne	.+2      	; 0xe62 <CDC_Device_ProcessControlRequest+0x3a>
     e60:	79 c0       	rjmp	.+242    	; 0xf54 <CDC_Device_ProcessControlRequest+0x12c>
     e62:	83 32       	cpi	r24, 0x23	; 35
     e64:	c1 f7       	brne	.-16     	; 0xe56 <CDC_Device_ProcessControlRequest+0x2e>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e66:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <USB_ControlRequest>
     e6a:	81 32       	cpi	r24, 0x21	; 33
     e6c:	a1 f7       	brne	.-24     	; 0xe56 <CDC_Device_ProcessControlRequest+0x2e>
				UEINTX &= ~(1 << RXSTPI);
     e6e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e72:	87 7f       	andi	r24, 0xF7	; 247
     e74:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_ClearStatusStage();
     e78:	01 dc       	rcall	.-2046   	; 0x67c <Endpoint_ClearStatusStage>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     e7a:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <USB_ControlRequest+0x2>
     e7e:	ce 01       	movw	r24, r28
}
     e80:	df 91       	pop	r29
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     e82:	cf 91       	pop	r28
     e84:	d0 cf       	rjmp	.-96     	; 0xe26 <CDC_Device_Event_Stub>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e86:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <USB_ControlRequest>
     e8a:	81 3a       	cpi	r24, 0xA1	; 161
     e8c:	21 f7       	brne	.-56     	; 0xe56 <CDC_Device_ProcessControlRequest+0x2e>
     e8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e92:	87 7f       	andi	r24, 0xF7	; 247
     e94:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e98:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				while (!(Endpoint_IsINReady()));
     e9c:	80 ff       	sbrs	r24, 0
     e9e:	fc cf       	rjmp	.-8      	; 0xe98 <CDC_Device_ProcessControlRequest+0x70>
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     ea0:	8c 89       	ldd	r24, Y+20	; 0x14
     ea2:	9d 89       	ldd	r25, Y+21	; 0x15
     ea4:	ae 89       	ldd	r26, Y+22	; 0x16
     ea6:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     ea8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
     eac:	49 2f       	mov	r20, r25
     eae:	5a 2f       	mov	r21, r26
     eb0:	6b 2f       	mov	r22, r27
     eb2:	77 27       	eor	r23, r23
     eb4:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 16);
     eb8:	ad 01       	movw	r20, r26
     eba:	66 27       	eor	r22, r22
     ebc:	77 27       	eor	r23, r23
     ebe:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 24);
     ec2:	8b 2f       	mov	r24, r27
     ec4:	99 27       	eor	r25, r25
     ec6:	aa 27       	eor	r26, r26
     ec8:	bb 27       	eor	r27, r27
     eca:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     ece:	88 8d       	ldd	r24, Y+24	; 0x18
				UEDATX = Data;
     ed0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     ed4:	89 8d       	ldd	r24, Y+25	; 0x19
     ed6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     eda:	8a 8d       	ldd	r24, Y+26	; 0x1a
     edc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ee0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ee4:	8e 77       	andi	r24, 0x7E	; 126
     ee6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
}
     eea:	df 91       	pop	r29
				Endpoint_ClearStatusStage();
     eec:	cf 91       	pop	r28
     eee:	c6 cb       	rjmp	.-2164   	; 0x67c <Endpoint_ClearStatusStage>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     ef0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <USB_ControlRequest>
     ef4:	81 32       	cpi	r24, 0x21	; 33
     ef6:	09 f0       	breq	.+2      	; 0xefa <CDC_Device_ProcessControlRequest+0xd2>
     ef8:	ae cf       	rjmp	.-164    	; 0xe56 <CDC_Device_ProcessControlRequest+0x2e>
				UEINTX &= ~(1 << RXSTPI);
     efa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     efe:	87 7f       	andi	r24, 0xF7	; 247
     f00:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				while (!(Endpoint_IsOUTReceived()))
     f08:	82 ff       	sbrs	r24, 2
     f0a:	1f c0       	rjmp	.+62     	; 0xf4a <CDC_Device_ProcessControlRequest+0x122>
				Data.Bytes[0] = UEDATX;
     f0c:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[1] = UEDATX;
     f10:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[2] = UEDATX;
     f14:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[3] = UEDATX;
     f18:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     f1c:	3c 8b       	std	Y+20, r19	; 0x14
     f1e:	2d 8b       	std	Y+21, r18	; 0x15
     f20:	9e 8b       	std	Y+22, r25	; 0x16
     f22:	8f 8b       	std	Y+23, r24	; 0x17
				return UEDATX;
     f24:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     f28:	88 8f       	std	Y+24, r24	; 0x18
     f2a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     f2e:	89 8f       	std	Y+25, r24	; 0x19
     f30:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     f34:	8a 8f       	std	Y+26, r24	; 0x1a
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f3a:	8b 77       	andi	r24, 0x7B	; 123
     f3c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f40:	9d db       	rcall	.-2246   	; 0x67c <Endpoint_ClearStatusStage>
}
     f42:	ce 01       	movw	r24, r28
     f44:	df 91       	pop	r29
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f46:	cf 91       	pop	r28
     f48:	6e cf       	rjmp	.-292    	; 0xe26 <CDC_Device_Event_Stub>
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     f4a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <USB_DeviceState>
     f4e:	81 11       	cpse	r24, r1
     f50:	d9 cf       	rjmp	.-78     	; 0xf04 <CDC_Device_ProcessControlRequest+0xdc>
     f52:	81 cf       	rjmp	.-254    	; 0xe56 <CDC_Device_ProcessControlRequest+0x2e>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f54:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <USB_ControlRequest>
     f58:	81 32       	cpi	r24, 0x21	; 33
     f5a:	09 f0       	breq	.+2      	; 0xf5e <CDC_Device_ProcessControlRequest+0x136>
     f5c:	7c cf       	rjmp	.-264    	; 0xe56 <CDC_Device_ProcessControlRequest+0x2e>
				UEINTX &= ~(1 << RXSTPI);
     f5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f62:	87 7f       	andi	r24, 0xF7	; 247
     f64:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_ClearStatusStage();
     f68:	89 db       	rcall	.-2286   	; 0x67c <Endpoint_ClearStatusStage>
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     f6a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <USB_ControlRequest+0x2>
     f6e:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <USB_ControlRequest+0x3>
     f72:	99 8b       	std	Y+17, r25	; 0x11
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f74:	88 8b       	std	Y+16, r24	; 0x10
}
     f76:	ce 01       	movw	r24, r28
     f78:	df 91       	pop	r29
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f7a:	cf 91       	pop	r28
     f7c:	10 c9       	rjmp	.-3552   	; 0x19e <EVENT_CDC_Device_ControLineStateChanged>

00000f7e <ax_check_comms>:
    }
}

int ax_check_comms() {
	uint8_t stat;
	stat = SPI_RW_8(AX_REG_SILICONREVISION,0x00,0);
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	40 e0       	ldi	r20, 0x00	; 0
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	11 d9       	rcall	.-3550   	; 0x1ae <SPI_RW_8>
	if (stat == AX_REG_SILICONREVISION_DEFAULT) {
     f8c:	81 35       	cpi	r24, 0x51	; 81
     f8e:	21 f0       	breq	.+8      	; 0xf98 <ax_check_comms+0x1a>
		return 1;
	}
	else if (stat == 0x00 || stat == 0xFF) {
     f90:	81 50       	subi	r24, 0x01	; 1
     f92:	8e 3f       	cpi	r24, 0xFE	; 254
     f94:	20 f4       	brcc	.+8      	; 0xf9e <ax_check_comms+0x20>
		return 0;
	}
}
     f96:	08 95       	ret
		return 1;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	08 95       	ret
		return 0;
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	80 e0       	ldi	r24, 0x00	; 0
}
     fa2:	08 95       	ret

00000fa4 <AX_getStatusBits>:
	
}

uint16_t AX_getStatusBits() {
  int16_t data = 0;
  PORTB &= ~(1 << DDB5); //SS low //change this
     fa4:	2d 98       	cbi	0x05, 5	; 5
  SPDR = 0x00;
     fa6:	1e bc       	out	0x2e, r1	; 46
  while (!(SPSR & (1 << SPIF)));
     fa8:	0d b4       	in	r0, 0x2d	; 45
     faa:	07 fe       	sbrs	r0, 7
     fac:	fd cf       	rjmp	.-6      	; 0xfa8 <AX_getStatusBits+0x4>
  data |= SPDR; //LSB
     fae:	8e b5       	in	r24, 0x2e	; 46
     fb0:	90 e0       	ldi	r25, 0x00	; 0
  SPDR = 0x00; //shift clock
     fb2:	1e bc       	out	0x2e, r1	; 46
  while (!(SPSR & (1 << SPIF)));
     fb4:	0d b4       	in	r0, 0x2d	; 45
     fb6:	07 fe       	sbrs	r0, 7
     fb8:	fd cf       	rjmp	.-6      	; 0xfb4 <AX_getStatusBits+0x10>
  int16_t SPDRShift = SPDR;
     fba:	2e b5       	in	r18, 0x2e	; 46
  SPDRShift <<= 8;
  data |= SPDRShift; //MSB
  PORTB |= (1 << DDB5); //SS high //change this
     fbc:	2d 9a       	sbi	0x05, 5	; 5
  return data;
}
     fbe:	92 2b       	or	r25, r18
     fc0:	08 95       	ret

00000fc2 <ax_bootup>:
	//uint8_t status;
	//int count;
	//ax_sel(ax_driver_s);  /* Need to set the SEL and wait for 1us. MISO should go high when ready.  */
						  /* Need to delay a us.  */
	//ax_wr88reg(ax_driver_s, AX_REG_PWRMODE, AX_REG_PWRMODE_RST_MASK);  /* Puts the chip into RST mode. */
	PORTB |= (1<<DDB5); //SS high
     fc2:	2d 9a       	sbi	0x05, 5	; 5
	while(!(PINB & (1 << PB5)));
     fc4:	1d 9b       	sbis	0x03, 5	; 3
     fc6:	fe cf       	rjmp	.-4      	; 0xfc4 <ax_bootup+0x2>
	SPI_RW_8(AX_REG_PWRMODE,AX_REG_PWRMODE_REST_MASK,0);
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	60 e8       	ldi	r22, 0x80	; 128
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	ec d8       	rcall	.-3624   	; 0x1ae <SPI_RW_8>
     fd6:	2f ef       	ldi	r18, 0xFF	; 255
     fd8:	80 e7       	ldi	r24, 0x70	; 112
     fda:	92 e0       	ldi	r25, 0x02	; 2
     fdc:	21 50       	subi	r18, 0x01	; 1
     fde:	80 40       	sbci	r24, 0x00	; 0
     fe0:	90 40       	sbci	r25, 0x00	; 0
     fe2:	e1 f7       	brne	.-8      	; 0xfdc <ax_bootup+0x1a>
     fe4:	00 c0       	rjmp	.+0      	; 0xfe6 <ax_bootup+0x24>
     fe6:	00 00       	nop
	_delay_ms(100);																   /* Delay a bit here.  */
	//ax_wr88reg(ax_driver_s, AX_REG_PWRMODE, 0);  /* UGH. Magic numbers. This basically sets the chip into powerdown, and clears the RST bit. */
	SPI_RW_8(AX_REG_PWRMODE,AX_REG_PWRMODE_POWERDOWN_MASK,0);
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	dc d8       	rcall	.-3656   	; 0x1ae <SPI_RW_8>
     ff6:	2f ef       	ldi	r18, 0xFF	; 255
     ff8:	80 e7       	ldi	r24, 0x70	; 112
     ffa:	92 e0       	ldi	r25, 0x02	; 2
     ffc:	21 50       	subi	r18, 0x01	; 1
     ffe:	80 40       	sbci	r24, 0x00	; 0
    1000:	90 40       	sbci	r25, 0x00	; 0
    1002:	e1 f7       	brne	.-8      	; 0xffc <ax_bootup+0x3a>
    1004:	00 c0       	rjmp	.+0      	; 0x1006 <ax_bootup+0x44>
    1006:	00 00       	nop
    /* Delay a bit here.  */
												 /* Should be able to set all the register contents here.
												 * In power down, the register file is still up. */
	/* In that case, it seems pretty legit.
	* Need to set up the osc. */
	SPI_RW_A16_R8(AX_REG_XTALOSC,0x04,0);
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	40 e0       	ldi	r20, 0x00	; 0
    100c:	64 e0       	ldi	r22, 0x04	; 4
    100e:	80 e1       	ldi	r24, 0x10	; 16
    1010:	9f e0       	ldi	r25, 0x0F	; 15
    1012:	de d8       	rcall	.-3652   	; 0x1d0 <SPI_RW_A16_R8>
    1014:	8f ec       	ldi	r24, 0xCF	; 207
    1016:	97 e0       	ldi	r25, 0x07	; 7
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <ax_bootup+0x56>
    101c:	00 c0       	rjmp	.+0      	; 0x101e <ax_bootup+0x5c>
    101e:	00 00       	nop
    _delay_ms(1);
	SPI_RW_A16_R8(AX_REG_XTALAMPL,0x00,0);
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	81 e1       	ldi	r24, 0x11	; 17
    1028:	9f e0       	ldi	r25, 0x0F	; 15
    102a:	d2 d8       	rcall	.-3676   	; 0x1d0 <SPI_RW_A16_R8>
    102c:	8f ec       	ldi	r24, 0xCF	; 207
    102e:	97 e0       	ldi	r25, 0x07	; 7
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <ax_bootup+0x6e>
    1034:	00 c0       	rjmp	.+0      	; 0x1036 <ax_bootup+0x74>
    1036:	00 00       	nop
    _delay_ms(1);
	SPI_RW_A16_R8(AX_REG_XTALCAP,0,0);
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	84 e8       	ldi	r24, 0x84	; 132
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	c6 d8       	rcall	.-3700   	; 0x1d0 <SPI_RW_A16_R8>
    1044:	8f ec       	ldi	r24, 0xCF	; 207
    1046:	97 e0       	ldi	r25, 0x07	; 7
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <ax_bootup+0x86>
    104c:	00 c0       	rjmp	.+0      	; 0x104e <ax_bootup+0x8c>
    104e:	00 00       	nop
    1050:	8f ec       	ldi	r24, 0xCF	; 207
    1052:	97 e0       	ldi	r25, 0x07	; 7
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <ax_bootup+0x92>
    1058:	00 c0       	rjmp	.+0      	; 0x105a <ax_bootup+0x98>
    105a:	00 00       	nop
    _delay_ms(1);
	//SPI_RW_A16_R8(AX_REG_PWRMODE,PWRMODE_SYNTHTX,0);
    _delay_ms(1);
    SPI_RW_8(AX_REG_PWRMODE,PWRMODE_FIFOON,0);
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	67 e0       	ldi	r22, 0x07	; 7
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	a2 d8       	rcall	.-3772   	; 0x1ae <SPI_RW_8>
    106a:	8f ec       	ldi	r24, 0xCF	; 207
    106c:	97 e0       	ldi	r25, 0x07	; 7
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <ax_bootup+0xac>
    1072:	00 c0       	rjmp	.+0      	; 0x1074 <ax_bootup+0xb2>
    1074:	00 00       	nop
	//ax_wr168reg(ax_driver_s, AX_REG_XTALOSC, 0x04);  /* Magic numbers. Came from DS.  */
	//ax_wr168reg(ax_driver_s, AX_REG_XTALAMPL, 0x00);  /* Once again, from DS. */
	//ax_wr88reg(ax_driver_s, AX_REG_XTALCAP, 0);  /* Set minimal XTAL load, 3pf */
	//ax_wr88reg(ax_driver_s, AX_REG_PWRMODE, AX_REG_PWRMODE_XTALEN_MASK); /* Enable the xtal osc. We need to wait until the xtal osc is up and running. */

}
    1076:	08 95       	ret

00001078 <__mulhi3>:
    1078:	00 24       	eor	r0, r0
    107a:	55 27       	eor	r21, r21
    107c:	04 c0       	rjmp	.+8      	; 0x1086 <__mulhi3+0xe>
    107e:	08 0e       	add	r0, r24
    1080:	59 1f       	adc	r21, r25
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	29 f0       	breq	.+10     	; 0x1094 <__mulhi3+0x1c>
    108a:	76 95       	lsr	r23
    108c:	67 95       	ror	r22
    108e:	b8 f3       	brcs	.-18     	; 0x107e <__mulhi3+0x6>
    1090:	71 05       	cpc	r23, r1
    1092:	b9 f7       	brne	.-18     	; 0x1082 <__mulhi3+0xa>
    1094:	80 2d       	mov	r24, r0
    1096:	95 2f       	mov	r25, r21
    1098:	08 95       	ret

0000109a <__udivmodsi4>:
    109a:	a1 e2       	ldi	r26, 0x21	; 33
    109c:	1a 2e       	mov	r1, r26
    109e:	aa 1b       	sub	r26, r26
    10a0:	bb 1b       	sub	r27, r27
    10a2:	fd 01       	movw	r30, r26
    10a4:	0d c0       	rjmp	.+26     	; 0x10c0 <__udivmodsi4_ep>

000010a6 <__udivmodsi4_loop>:
    10a6:	aa 1f       	adc	r26, r26
    10a8:	bb 1f       	adc	r27, r27
    10aa:	ee 1f       	adc	r30, r30
    10ac:	ff 1f       	adc	r31, r31
    10ae:	a2 17       	cp	r26, r18
    10b0:	b3 07       	cpc	r27, r19
    10b2:	e4 07       	cpc	r30, r20
    10b4:	f5 07       	cpc	r31, r21
    10b6:	20 f0       	brcs	.+8      	; 0x10c0 <__udivmodsi4_ep>
    10b8:	a2 1b       	sub	r26, r18
    10ba:	b3 0b       	sbc	r27, r19
    10bc:	e4 0b       	sbc	r30, r20
    10be:	f5 0b       	sbc	r31, r21

000010c0 <__udivmodsi4_ep>:
    10c0:	66 1f       	adc	r22, r22
    10c2:	77 1f       	adc	r23, r23
    10c4:	88 1f       	adc	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	1a 94       	dec	r1
    10ca:	69 f7       	brne	.-38     	; 0x10a6 <__udivmodsi4_loop>
    10cc:	60 95       	com	r22
    10ce:	70 95       	com	r23
    10d0:	80 95       	com	r24
    10d2:	90 95       	com	r25
    10d4:	9b 01       	movw	r18, r22
    10d6:	ac 01       	movw	r20, r24
    10d8:	bd 01       	movw	r22, r26
    10da:	cf 01       	movw	r24, r30
    10dc:	08 95       	ret

000010de <itoa>:
    10de:	45 32       	cpi	r20, 0x25	; 37
    10e0:	51 05       	cpc	r21, r1
    10e2:	18 f4       	brcc	.+6      	; 0x10ea <itoa+0xc>
    10e4:	42 30       	cpi	r20, 0x02	; 2
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <itoa+0xc>
    10e8:	04 c0       	rjmp	.+8      	; 0x10f2 <__itoa_ncheck>
    10ea:	fb 01       	movw	r30, r22
    10ec:	10 82       	st	Z, r1
    10ee:	cb 01       	movw	r24, r22
    10f0:	08 95       	ret

000010f2 <__itoa_ncheck>:
    10f2:	bb 27       	eor	r27, r27
    10f4:	4a 30       	cpi	r20, 0x0A	; 10
    10f6:	31 f4       	brne	.+12     	; 0x1104 <__itoa_ncheck+0x12>
    10f8:	99 23       	and	r25, r25
    10fa:	22 f4       	brpl	.+8      	; 0x1104 <__itoa_ncheck+0x12>
    10fc:	bd e2       	ldi	r27, 0x2D	; 45
    10fe:	90 95       	com	r25
    1100:	81 95       	neg	r24
    1102:	9f 4f       	sbci	r25, 0xFF	; 255
    1104:	01 c0       	rjmp	.+2      	; 0x1108 <__utoa_common>

00001106 <__utoa_ncheck>:
    1106:	bb 27       	eor	r27, r27

00001108 <__utoa_common>:
    1108:	fb 01       	movw	r30, r22
    110a:	55 27       	eor	r21, r21
    110c:	aa 27       	eor	r26, r26
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	aa 1f       	adc	r26, r26
    1114:	a4 17       	cp	r26, r20
    1116:	10 f0       	brcs	.+4      	; 0x111c <__utoa_common+0x14>
    1118:	a4 1b       	sub	r26, r20
    111a:	83 95       	inc	r24
    111c:	50 51       	subi	r21, 0x10	; 16
    111e:	b9 f7       	brne	.-18     	; 0x110e <__utoa_common+0x6>
    1120:	a0 5d       	subi	r26, 0xD0	; 208
    1122:	aa 33       	cpi	r26, 0x3A	; 58
    1124:	08 f0       	brcs	.+2      	; 0x1128 <__utoa_common+0x20>
    1126:	a9 5d       	subi	r26, 0xD9	; 217
    1128:	a1 93       	st	Z+, r26
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	79 f7       	brne	.-34     	; 0x110c <__utoa_common+0x4>
    112e:	b1 11       	cpse	r27, r1
    1130:	b1 93       	st	Z+, r27
    1132:	11 92       	st	Z+, r1
    1134:	cb 01       	movw	r24, r22
    1136:	59 c0       	rjmp	.+178    	; 0x11ea <strrev>

00001138 <fputc>:
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	18 2f       	mov	r17, r24
    1142:	09 2f       	mov	r16, r25
    1144:	eb 01       	movw	r28, r22
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	81 fd       	sbrc	r24, 1
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <fputc+0x1a>
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	9f ef       	ldi	r25, 0xFF	; 255
    1150:	1e c0       	rjmp	.+60     	; 0x118e <fputc+0x56>
    1152:	82 ff       	sbrs	r24, 2
    1154:	0f c0       	rjmp	.+30     	; 0x1174 <fputc+0x3c>
    1156:	2e 81       	ldd	r18, Y+6	; 0x06
    1158:	3f 81       	ldd	r19, Y+7	; 0x07
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	9d 81       	ldd	r25, Y+5	; 0x05
    115e:	28 17       	cp	r18, r24
    1160:	39 07       	cpc	r19, r25
    1162:	74 f4       	brge	.+28     	; 0x1180 <fputc+0x48>
    1164:	e8 81       	ld	r30, Y
    1166:	f9 81       	ldd	r31, Y+1	; 0x01
    1168:	cf 01       	movw	r24, r30
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	99 83       	std	Y+1, r25	; 0x01
    116e:	88 83       	st	Y, r24
    1170:	10 83       	st	Z, r17
    1172:	06 c0       	rjmp	.+12     	; 0x1180 <fputc+0x48>
    1174:	e8 85       	ldd	r30, Y+8	; 0x08
    1176:	f9 85       	ldd	r31, Y+9	; 0x09
    1178:	81 2f       	mov	r24, r17
    117a:	09 95       	icall
    117c:	89 2b       	or	r24, r25
    117e:	31 f7       	brne	.-52     	; 0x114c <fputc+0x14>
    1180:	8e 81       	ldd	r24, Y+6	; 0x06
    1182:	9f 81       	ldd	r25, Y+7	; 0x07
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	9f 83       	std	Y+7, r25	; 0x07
    1188:	8e 83       	std	Y+6, r24	; 0x06
    118a:	81 2f       	mov	r24, r17
    118c:	90 2f       	mov	r25, r16
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	08 95       	ret

00001198 <fputs>:
    1198:	ef 92       	push	r14
    119a:	ff 92       	push	r15
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	7b 01       	movw	r14, r22
    11a6:	db 01       	movw	r26, r22
    11a8:	13 96       	adiw	r26, 0x03	; 3
    11aa:	2c 91       	ld	r18, X
    11ac:	21 ff       	sbrs	r18, 1
    11ae:	17 c0       	rjmp	.+46     	; 0x11de <fputs+0x46>
    11b0:	8c 01       	movw	r16, r24
    11b2:	d0 e0       	ldi	r29, 0x00	; 0
    11b4:	c0 e0       	ldi	r28, 0x00	; 0
    11b6:	f8 01       	movw	r30, r16
    11b8:	81 91       	ld	r24, Z+
    11ba:	8f 01       	movw	r16, r30
    11bc:	88 23       	and	r24, r24
    11be:	61 f0       	breq	.+24     	; 0x11d8 <fputs+0x40>
    11c0:	d7 01       	movw	r26, r14
    11c2:	18 96       	adiw	r26, 0x08	; 8
    11c4:	ed 91       	ld	r30, X+
    11c6:	fc 91       	ld	r31, X
    11c8:	19 97       	sbiw	r26, 0x09	; 9
    11ca:	b7 01       	movw	r22, r14
    11cc:	09 95       	icall
    11ce:	89 2b       	or	r24, r25
    11d0:	91 f3       	breq	.-28     	; 0x11b6 <fputs+0x1e>
    11d2:	df ef       	ldi	r29, 0xFF	; 255
    11d4:	cf ef       	ldi	r28, 0xFF	; 255
    11d6:	ef cf       	rjmp	.-34     	; 0x11b6 <fputs+0x1e>
    11d8:	8d 2f       	mov	r24, r29
    11da:	9c 2f       	mov	r25, r28
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <fputs+0x4a>
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	9f ef       	ldi	r25, 0xFF	; 255
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	e6 e0       	ldi	r30, 0x06	; 6
    11e8:	1c c0       	rjmp	.+56     	; 0x1222 <__epilogue_restores__+0x18>

000011ea <strrev>:
    11ea:	dc 01       	movw	r26, r24
    11ec:	fc 01       	movw	r30, r24
    11ee:	67 2f       	mov	r22, r23
    11f0:	71 91       	ld	r23, Z+
    11f2:	77 23       	and	r23, r23
    11f4:	e1 f7       	brne	.-8      	; 0x11ee <strrev+0x4>
    11f6:	32 97       	sbiw	r30, 0x02	; 2
    11f8:	04 c0       	rjmp	.+8      	; 0x1202 <strrev+0x18>
    11fa:	7c 91       	ld	r23, X
    11fc:	6d 93       	st	X+, r22
    11fe:	70 83       	st	Z, r23
    1200:	62 91       	ld	r22, -Z
    1202:	ae 17       	cp	r26, r30
    1204:	bf 07       	cpc	r27, r31
    1206:	c8 f3       	brcs	.-14     	; 0x11fa <strrev+0x10>
    1208:	08 95       	ret

0000120a <__epilogue_restores__>:
    120a:	2a 88       	ldd	r2, Y+18	; 0x12
    120c:	39 88       	ldd	r3, Y+17	; 0x11
    120e:	48 88       	ldd	r4, Y+16	; 0x10
    1210:	5f 84       	ldd	r5, Y+15	; 0x0f
    1212:	6e 84       	ldd	r6, Y+14	; 0x0e
    1214:	7d 84       	ldd	r7, Y+13	; 0x0d
    1216:	8c 84       	ldd	r8, Y+12	; 0x0c
    1218:	9b 84       	ldd	r9, Y+11	; 0x0b
    121a:	aa 84       	ldd	r10, Y+10	; 0x0a
    121c:	b9 84       	ldd	r11, Y+9	; 0x09
    121e:	c8 84       	ldd	r12, Y+8	; 0x08
    1220:	df 80       	ldd	r13, Y+7	; 0x07
    1222:	ee 80       	ldd	r14, Y+6	; 0x06
    1224:	fd 80       	ldd	r15, Y+5	; 0x05
    1226:	0c 81       	ldd	r16, Y+4	; 0x04
    1228:	1b 81       	ldd	r17, Y+3	; 0x03
    122a:	aa 81       	ldd	r26, Y+2	; 0x02
    122c:	b9 81       	ldd	r27, Y+1	; 0x01
    122e:	ce 0f       	add	r28, r30
    1230:	d1 1d       	adc	r29, r1
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	ed 01       	movw	r28, r26
    123e:	08 95       	ret

00001240 <_exit>:
    1240:	f8 94       	cli

00001242 <__stop_program>:
    1242:	ff cf       	rjmp	.-2      	; 0x1242 <__stop_program>
